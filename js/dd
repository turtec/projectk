/**
* creates namespaces used to avoid overwrite existing namespace
* useage;
var ns = SKOOVE.createNS("SKOOVE.MODEL.OBJECT");
 
ns.object = function(foo){
   
};
**/
var SKOOVE = SKOOVE || {};

SKOOVE.createNamespace = function (namespace) {

    var nsparts = namespace.split(".");

    var parent = SKOOVE;
 
    // we want to be able to include or exclude the root namespace so we strip
    // it if it's in the namespace
    if (nsparts[0] === "SKOOVE") {

        nsparts = nsparts.slice(1);

    }
 
    // loop through the parts and create a nested namespace if necessary
    for (var i = 0; i < nsparts.length; i++) {

        var partname = nsparts[i];
        // check if the current parent already has the namespace declared
        // if it isn't, then create it
        if (typeof parent[partname] === "undefined") {
            parent[partname] = {};
        }
        // get a reference to the deepest element in the hierarchy so far
        parent = parent[partname];
    }
    // the parent is now constructed with empty namespaces and can be used.
    // we return the outermost namespace
    return parent;

};
var SKOOVE = SKOOVE || {};

SKOOVE.Appsettings = {};

SKOOVE.Appsettings.backendpath = 'https://az835833.vo.msecnd.net/content/';

SKOOVE.Appsettings.debug = true;

SKOOVE.Appsettings.logsink = 'console';

SKOOVE.Appsettings.blockSize = 1024;

SKOOVE.Appsettings.fftSize = 2048;

SKOOVE.Appsettings.numberOfRightDetection = 2;

SKOOVE.Appsettings.treshold = 0.125;

var ns = SKOOVE.createNamespace("SKOOVE.Templating");

/**
 * Wrapps the HandleBar Templateingengine-Calls
 * renders a simple template into its placeholder
 * @param placeholderId
 * @param templateId
 * @param templateData
*/

ns.TemplateRenderer = function (placeholderId, templateId, templateData) {

    var source = jQuery("#" + templateId).html();

    var template = Handlebars.compile(source);

    if (templateData !== undefined) {

        jQuery("#" + placeholderId).html(template(templateData));

    }
    else {

        jQuery("#" + placeholderId).html(template);

    }

    return this;

};

/**
 * renders a template into a dialogoverlay
 * @param placeholderId
 * @param templateId
 * @param templateData
 */
ns.DialogRenderer = function (placeholderId, templateId, templateData) {

    var source = jQuery("#" + templateId).html();

    var template = Handlebars.compile(source);

    if (templateData !== undefined) {

        jQuery("#" + placeholderId).html(template(templateData));

    }
    else {

        jQuery("#" + placeholderId).html(template);

    }

    jQuery("#" + placeholderId).show();

};

var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.SOUNDOUTPUT");

/**
* checks which audio api is provided by the used browser 
* and returns the corresponding audio-handler
* - return Values: - MIDIAudio-Object
*				   - WebAudio-Object
*/
ns.AudioOutputFactory = function(api){

	var audioHandler = null;
	
	// set default value
	var api = 'audio';

	if(api===undefined){
		
		if(navigator.requestMIDIAccess){
			
			audioHandler = new SKOOVE.SOUNDOUTPUT.MIDIAudio();

		}	
		else if (window.AudioContext || window.webkitAudioContext){
			
			audioHandler = new SKOOVE.SOUNDOUTPUT.WebAudio();	
		
		}
		else{

			alert('native apis not supported');

		}
	}
	else{
		if(api==='midi'){
			
			audioHandler = new SKOOVE.SOUNDOUTPUT.MIDIAudio();
		
		}	
		else if (api==='audio'){
		
			audioHandler = new SKOOVE.SOUNDOUTPUT.WebAudio();	
		
		}

	}

	return audioHandler;

};
var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.SOUNDOUTPUT");

ns.MIDIAudio = function(){

	var output = null;

	this._setup();

	return this;

};

/**
* plays a note
*/
ns.MIDIAudio.prototype.noteOn = function(channel, noteNumber, velocity, delay){

	var root = this;

	console.log('in note on');

	console.log(root.output);

	root.output.send([0x90 + channel, note, velocity], delay * 1000);

}; 

/**
* mutes a note
**/
ns.MIDIAudio.prototype.noteOff = function(midiNotenumber){



};

ns.MIDIAudio.prototype._setup = function(){

	var root = this;

	navigator.requestMIDIAccess().then(function(access) {
			
			plugin = access;
			var pluginOutputs = plugin.outputs;
			if (typeof pluginOutputs == 'function') 
			{ // Chrome pre-43
				root.output = pluginOutputs()[0];
			} 
			else 
			{ // Chrome post-43
				root.output = pluginOutputs[0];
			}

			if (root.output === undefined) 
			{ // nothing there...
				
			} 
			else 
			{
						
			}
		}, 
		function(){
			alert('error');
		}
	);


};


/**
* handles playing sounds via webaudio api
* these object will be created by the AudioOutput-Factory
**/

var SKOOVE = SKOOVE || {};

var ns_skoove_soundoutput = SKOOVE.createNamespace("SKOOVE.SOUNDOUTPUT");

ns_skoove_soundoutput.WebAudio = function(){

    //create the AudioContext  
    this.ctx = new AudioContext();

    // storage of audiBuffers
    this.audioBuffers = {};

    // currently played keys
    this.keys = {};

    this.pedalIsPressed = false;

    return this;

};

ns_skoove_soundoutput.WebAudio.prototype.init = function(){

    var root = this;

    //@todo: remove the callback
    root._getFileSoundfont(
        function(){
            
        }

    );

    return this;

};

ns_skoove_soundoutput.WebAudio.prototype._getFileSoundfont = function(onLoaded){

    var root = this;

    var requests = [];

    // @todo put this into the app Settings
    var path = '/soundfont/skoovepiano/';

    // get the number of sound files to decode
    var soundFilesToDecode = 15;

    var decodedSoundFiles = 0;

    for (keyValue in mp3SoundFiles) {

            if (!isNaN(keyValue)) (function(keyValue) {

                var requestPath = path.concat(mp3SoundFiles[keyValue]);

                requests[keyValue] = new XMLHttpRequest();
                
                requests[keyValue].open('GET', requestPath, true);
                
                requests[keyValue].responseType = 'arraybuffer';

                requests[keyValue].onload = function() {

                    root.ctx.decodeAudioData(requests[keyValue].response, function (buffer) {
            
                        root.audioBuffers[keyValue] = buffer;

                        decodedSoundFiles += 1;

                        if(decodedSoundFiles === soundFilesToDecode ){
                            
                            onLoaded();

                        }

                    });

                };

                requests[keyValue].send();


        })(keyValue);

    }

};

ns_skoove_soundoutput.WebAudio.prototype.setPedal = function(isPressed){

    var root = this;

    root.pedalIsPressed = isPressed;

    if(isPressed === false){

        for(var prop in root.keys) {

            if(root.keys.hasOwnProperty(prop)){

                if(root.keys[prop].released === true){

                    root.noteOff(0,prop,0);

                }

            }

        }

    }

};


/**
* plays a note by triggering a soundfont using the webaudio-api
*/
ns_skoove_soundoutput.WebAudio.prototype.noteOn = function(channel, playedKey, velocity, delay){

        var velo = parseInt(velocity);

        var root = this;

        var mappedKey = root._getMappedKey(playedKey);

        if (!root.audioBuffers[mappedKey]){

            return;

        } 

        /// convert relative delay to absolute delay
        if (delay < root.ctx.currentTime){

             delay += root.ctx.currentTime;
        
        }

        var amplitude = root.ctx.createGain(); 

        var volume = parseFloat(velo/170);

        amplitude.gain.value = volume;
        
        amplitude.connect(root.ctx.destination);

        var filter = root.ctx.createBiquadFilter();
        
        filter.type = "lowpass";
        
        filter.frequency.value = 415 * Math.exp(velo/48);

        filter.connect(amplitude);

        /// create audio buffer
        var source = root.ctx.createBufferSource();
        
        source.connect(filter);
        
        source.buffer = root.audioBuffers[mappedKey];

        source.playbackRate.value = Math.pow(1.059463, playedKey - mappedKey);

        source.start(root.ctx.currentTime, 0);

        var note = {

            source: source,

            amplitude: amplitude

        };

        if (typeof root.keys[playedKey] === "undefined") {

            root.keys[playedKey] = {

                notes: [note],

                released: false

            };

        } else {

            root.keys[playedKey].notes.push(note);

            root.keys[playedKey].released = false;

        }

        return source;

}; 

/**
* mutes a note
**/
ns_skoove_soundoutput.WebAudio.prototype.noteOff = function (channel, playedKey, delay) {

        var root = this;

        var delay = delay || 0;
    
        if (delay < root.ctx.currentTime){
        
            delay += root.ctx.currentTime;
        
        } 

        if( root.pedalIsPressed === false ){

            if (playedKey < 90) { // No dampers from F#6 on

                root.keys[playedKey].notes.forEach(function(note){

                    note.amplitude.gain.setTargetAtTime(0, root.ctx.currentTime + 0.01, 0.1);

                    note.source.stop(root.ctx.currentTime + 0.4);

                });
            }
            
            delete root.keys[playedKey];
            
        }
        else{

            root.keys[playedKey].released = true;

        }
    
};

ns_skoove_soundoutput.WebAudio.prototype._getMappedKey = function(key){


    // Some nicer way to write this?...
            if (key >= 59) {
                if (key <= 63)
                   return 61; 
                else if (key <= 67)
                    return 66;
                else if (key <= 71)
                    return 70;
                else if (key <= 75)
                    return 73;
                else if (key <= 79)
                    return 77;
                else if (key <= 84)
                    return 82;
                else if (key <= 88)
                    return 86;
                else if (key <= 92)
                    return 90;
                else if (key <= 99)
                    return 95;
                else return 103;
            } else {
                if (key >= 51)
                    return 56;
                else if (key >= 43)
                    return 45;
                else if (key >= 38)
                    return 40;
                else if (key >= 32)
                    return 36;
                else return 27;
            }

};

var mp3SoundFiles = {
    27: "027.mp3",
    36: "036.mp3",
    40: "040.mp3",
    45: "045.mp3",
    56: "056.mp3",
    61: "061.mp3",
    66: "066.mp3",
    70: "070.mp3",
    73: "073.mp3",
    77: "077.mp3",
    82: "082.mp3",
    86: "086.mp3",
    90: "090.mp3",
    95: "095.mp3",
    103: "103.mp3"
};

var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.NAVIGATION");

ns.MidiKeyboardNavigation = function(inputSource,startHotKey,nextHotKey){

    var root = this;

    // the input source (midi input)
    this.inputSource = inputSource;

    // the type of the module-> there a different handlings
    // disable start-keyboard-key in playcards mode
    this.moduletype = null;

    // HANDLER FUNCTION
    this.midiEventHandler = function(ev){

        if(root.moduletype.type != 'playcards'){

            // start-stop
            if((ev.data[0] >= 144 && ev.data[0] <= 159) &&
                ev.data[1] == startHotKey &&
                ev.data[2] > 0){

                window.skooveeventhub.fire('deviceinput.statechange');

            }
        }

        //
        if((ev.data[0] >= 144 && ev.data[0] <= 159) && ev.data[1] == nextHotKey && ev.data[2] > 0){

            window.skooveeventhub.fire('deviceinput.next');

        }

        if(ev.data[0] === 176){

            if(ev.data[2]>63){

                SKOOVE.SOUNDOUTPUT.audioout.setPedal(true);

            }
            else
            {

                SKOOVE.SOUNDOUTPUT.audioout.setPedal(false);
            }

        }

        if((ev.data[2] > 0 && (ev.data[0]>=144 && ev.data[0]<=159))){

            window.skooveeventhub.fire('keyboardinput.down',ev.data);

        }

        if((ev.data[2] === 0 && (ev.data[0]>=144 && ev.data[0]<=159))){

            window.skooveeventhub.fire('keyboardinput.up',ev.data);

        }

        if(ev.data[0]>=128 && ev.data[0]<=143){

            window.skooveeventhub.fire('keyboardinput.up',ev.data);

        }

    };

};

/**
 * sets up keyboardnavigation
 * @param moduletype
 */
ns.MidiKeyboardNavigation.prototype.setup = function(moduletype,userModel){

    var root = this;

    root.moduletype = 'g';

    // if there is an inputSource
    // remove old handlers and add 
    // new ones
    if(root.inputSource){

        // remove all listeners
        root.inputSource.removeEventListener("midimessage",root.midiEventHandler);

        // workaround
        root.inputSource.onmidimessage = function(){
            // without these stub nothing works on chrome
        };

        // register EventHandler for Tracking hotkey-Strokes
        root.inputSource.addEventListener("midimessage", root.midiEventHandler);

    }

};

// clones an Object

var clone = function (o) {

    if (typeof o != 'object') return (o);

    if (o == null) return (o);

    var ret = (typeof o.length == 'number') ? [] : {};

    for (var key in o) ret[key] = clone(o[key]);

    return ret;

};

/**
 * StreamReader wrapps different methods for reading string
 * @param str
 * @returns {{eof: eof, read: read, readInt32: readInt32, readInt16: readInt16, readInt8: readInt8, readVarInt: readVarInt}}
 * @constructor
 */

function StreamReader(str) {

    var position = 0;

    function read(length) {

        var result = str.substr(position, length);
        position += length;
        return result;

    }

    /* read a big-endian 32-bit integer */
    function readInt32() {
        var result = (
            (str.charCodeAt(position) << 24)
                + (str.charCodeAt(position + 1) << 16)
                + (str.charCodeAt(position + 2) << 8)
                + str.charCodeAt(position + 3));
        position += 4;
        return result;
    }

    /* read a big-endian 16-bit integer */
    function readInt16() {
        var result = (
            (str.charCodeAt(position) << 8)
                + str.charCodeAt(position + 1));
        position += 2;
        return result;
    }

    /* read an 8-bit integer */
    function readInt8(signed) {
        var result = str.charCodeAt(position);
        if (signed && result > 127) result -= 256;
        position += 1;
        return result;
    }

    function eof() {
        return position >= str.length;
    }

    /* read a MIDI-style variable-length integer
     (big-endian value in groups of 7 bits,
     with top bit set to signify that another byte follows)
     */
    function readVarInt() {
        var result = 0;
        while (true) {
            var b = readInt8();
            if (b & 0x80) {
                result += (b & 0x7f);
                result <<= 7;
            } else {
                /* b is the last byte */
                return result + b;
            }
        }
    }

    return {
        'eof': eof,
        'read': read,
        'readInt32': readInt32,
        'readInt16': readInt16,
        'readInt8': readInt8,
        'readVarInt': readVarInt
    }
}
/**
 * MIDI-File-Parser
 * returns a Representation of a MIDI-File
 * for further computing with javascript
 * @param data
 * @returns {{header: {formatType: *, trackCount: *, ticksPerBeat: *}, tracks: Array}}
 * @constructor
 */

function MidiFileReader(data) {

    function readChunk(stream) {

        var id = stream.read(4);

        var length = stream.readInt32();

        return {
            'id': id,
            'length': length,
            'data': stream.read(length)
        };

    };

    var lastEventTypeByte;

    function readEvent(stream) {
        var event = {};
        event.deltaTime = stream.readVarInt();
        var eventTypeByte = stream.readInt8();
        if ((eventTypeByte & 0xf0) == 0xf0) {
            /* system / meta event */
            if (eventTypeByte == 0xff) {
                /* meta event */
                event.type = 'meta';
                var subtypeByte = stream.readInt8();
                var length = stream.readVarInt();
                switch (subtypeByte) {
                    case 0x00:
                        event.subtype = 'sequenceNumber';
                        if (length != 2) throw "Expected length for sequenceNumber event is 2, got " + length;
                        event.number = stream.readInt16();
                        return event;
                    case 0x01:
                        event.subtype = 'text';
                        event.text = stream.read(length);
                        return event;
                    case 0x02:
                        event.subtype = 'copyrightNotice';
                        event.text = stream.read(length);
                        return event;
                    case 0x03:
                        event.subtype = 'trackName';
                        event.text = stream.read(length);
                        return event;
                    case 0x04:
                        event.subtype = 'instrumentName';
                        event.text = stream.read(length);
                        return event;
                    case 0x05:
                        event.subtype = 'lyrics';
                        event.text = stream.read(length);
                        return event;
                    case 0x06:
                        event.subtype = 'marker';
                        event.text = stream.read(length);
                        return event;
                    case 0x07:
                        event.subtype = 'cuePoint';
                        event.text = stream.read(length);
                        return event;
                    case 0x20:
                        event.subtype = 'midiChannelPrefix';
                        if (length != 1) throw "Expected length for midiChannelPrefix event is 1, got " + length;
                        event.channel = stream.readInt8();
                        return event;
                    case 0x2f:
                        event.subtype = 'endOfTrack';
                        if (length != 0) throw "Expected length for endOfTrack event is 0, got " + length;
                        return event;
                    case 0x51:
                        event.subtype = 'setTempo';
                        if (length != 3) throw "Expected length for setTempo event is 3, got " + length;
                        event.microsecondsPerBeat = (
                            (stream.readInt8() << 16)
                                + (stream.readInt8() << 8)
                                + stream.readInt8()
                            );
                        return event;
                    case 0x54:
                        event.subtype = 'smpteOffset';
                        if (length != 5) throw "Expected length for smpteOffset event is 5, got " + length;
                        var hourByte = stream.readInt8();
                        event.frameRate = {
                            0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30
                        }[hourByte & 0x60];
                        event.hour = hourByte & 0x1f;
                        event.min = stream.readInt8();
                        event.sec = stream.readInt8();
                        event.frame = stream.readInt8();
                        event.subframe = stream.readInt8();
                        return event;
                    case 0x58:
                        event.subtype = 'timeSignature';
                        if (length != 4) throw "Expected length for timeSignature event is 4, got " + length;
                        event.numerator = stream.readInt8();
                        event.denominator = Math.pow(2, stream.readInt8());
                        event.metronome = stream.readInt8();
                        event.thirtyseconds = stream.readInt8();
                        return event;
                    case 0x59:
                        event.subtype = 'keySignature';
                        if (length != 2) throw "Expected length for keySignature event is 2, got " + length;
                        event.key = stream.readInt8(true);
                        event.scale = stream.readInt8();
                        return event;
                    case 0x7f:
                        event.subtype = 'sequencerSpecific';
                        event.data = stream.read(length);
                        return event;
                    default:
                        // console.log("Unrecognised meta event subtype: " + subtypeByte);
                        event.subtype = 'unknown';
                        event.data = stream.read(length);
                        return event;
                }
                event.data = stream.read(length);
                return event;
            } else if (eventTypeByte == 0xf0) {
                event.type = 'sysEx';
                var length = stream.readVarInt();
                event.data = stream.read(length);
                return event;
            } else if (eventTypeByte == 0xf7) {
                event.type = 'dividedSysEx';
                var length = stream.readVarInt();
                event.data = stream.read(length);
                return event;
            } else {
                throw "Unrecognised MIDI event type byte: " + eventTypeByte;
            }
        } else {
            /* channel event */
            var param1;
            if ((eventTypeByte & 0x80) == 0) {
                /* running status - reuse lastEventTypeByte as the event type.
                 eventTypeByte is actually the first parameter
                 */
                param1 = eventTypeByte;
                eventTypeByte = lastEventTypeByte;
            } else {
                param1 = stream.readInt8();
                lastEventTypeByte = eventTypeByte;
            }
            var eventType = eventTypeByte >> 4;
            event.channel = eventTypeByte & 0x0f;
            event.type = 'channel';
            switch (eventType) {
                case 0x08:
                    event.subtype = 'noteOff';
                    event.noteNumber = param1;
                    event.velocity = stream.readInt8();
                    return event;
                case 0x09:
                    event.noteNumber = param1;
                    event.velocity = stream.readInt8();
                    if (event.velocity == 0) {
                        event.subtype = 'noteOff';
                    } else {
                        event.subtype = 'noteOn';
                    }
                    return event;
                case 0x0a:
                    event.subtype = 'noteAftertouch';
                    event.noteNumber = param1;
                    event.amount = stream.readInt8();
                    return event;
                case 0x0b:
                    event.subtype = 'controller';
                    event.controllerType = param1;
                    event.value = stream.readInt8();
                    return event;
                case 0x0c:
                    event.subtype = 'programChange';
                    event.programNumber = param1;
                    return event;
                case 0x0d:
                    event.subtype = 'channelAftertouch';
                    event.amount = param1;
                    return event;
                case 0x0e:
                    event.subtype = 'pitchBend';
                    event.value = param1 + (stream.readInt8() << 7);
                    return event;
                default:
                    throw "Unrecognised MIDI event type: " + eventType
                
            }
        }
    }

    stream = StreamReader(data);

    var headerChunk = readChunk(stream);
    
    if (headerChunk.id != 'MThd' || headerChunk.length != 6) {
    
        throw "Bad .mid file - header not found";
    
    }
    
    var headerStream = StreamReader(headerChunk.data);
    
    var formatType = headerStream.readInt16();
    
    var trackCount = headerStream.readInt16();
    
    var timeDivision = headerStream.readInt16();

    if (timeDivision & 0x8000) {
    
        throw "Expressing time division in SMTPE frames is not supported yet"
    
    } else {
    
        ticksPerBeat = timeDivision;
    }

    var header = {
        'formatType': formatType,
        'trackCount': trackCount,
        'ticksPerBeat': ticksPerBeat
    };

    var tracks = [];
    for (var i = 0; i < header.trackCount; i++) {
        
        tracks[i] = [];
        
        var trackChunk = readChunk(stream);
        
        if (trackChunk.id != 'MTrk') {
        
            throw "Unexpected chunk - expected MTrk, got " + trackChunk.id;
        
        }
        
        var trackStream = StreamReader(trackChunk.data);
        
        while (!trackStream.eof()) {
            
            var event = readEvent(trackStream);
            
            tracks[i].push(event);
            
        }
    }

    return {
        'header': header,
        'tracks': tracks
    }
}
var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Dom");

/**
 * Wraps DOM-Operations
 * @constructor
 */
ns.SkooveDom = function(){

};

/**
 * wrapps the getElementById-Method
 * @param id
 * @returns {HTMLElement}
 */
ns.SkooveDom.prototype.getElementById = function(id){

    var retVal = null;
    var element = document.getElementById(id);

    // if the elemnet could be found
    if (element) {
        retVal = document.getElementById(id);
    }
    return retVal;
};

/**
 * removing css-classes
 * @param elmentId
 * @param css
 */
ns.SkooveDom.prototype.removeCss = function (id, css) {

    // get the element by noteId
    var element = document.getElementById(id);

    // if the element could be found
    if (element) {
        element.className = element.className.replace(css, "");
    }

};

/**
 * add a css-classes
 * @param elementId
 * @param css
 */
ns.SkooveDom.prototype.addCss = function (id, css) {

    // get the element by noteId
    var element = document.getElementById(id);

    // if the element could be found
    if (element) {
        element.className += ' ' + css;
    }

};



/**
 * add a css-classes
 * @param elementId
 * @param css
 */
ns.SkooveDom.prototype.clear = function (id) {

    // get the element by noteId
    var element = document.getElementById(id);

    // if the element could be found
    if (element) {
        element.innerHTML = "";
    }

};

/**
 * replaces a css-Class with onaother one
 * cases: - changing the icons of the start-stop-button
 * @param id
 * @param oldCssClass
 * @param newCssClass
 */
ns.SkooveDom.prototype.replaceCssClass = function(id, oldCssClass, newCssClass){

    var element = document.getElementById(id);

    if(element){
        // replace duplicates
        element.className = element.className.replace(newCssClass, "");

        element.className = element.className.replace(oldCssClass, "");

        element.className += ' ' + newCssClass;
    }

};


/**
 * displays a element
 * @param elementId
 * @param css
 */
ns.SkooveDom.prototype.show = function (id) {

    // get the element by noteId
    var element = document.getElementById(id);

    // if the element could be found
    if (element) {
        element.style.display = 'block';
    }

};

/**
 * hides a element
 * @param elementId
 * @param css
 */
ns.SkooveDom.prototype.hide = function (id) {

    // get the element by noteId
    var element = document.getElementById(id);

    // if the element could be found
    if (element) {
        element.style.display = 'none';
    }

};


function EventHub() {

    this.listeners = {};

    this.publishers = {};

};

EventHub.prototype = {

    constructor: EventHub,

    addEventListener: function (eventtype, fn, context, contextidentifier) {

        fn = typeof fn === "function" ? fn : context[fn];

        // check if the eventtype is already registered
        if (typeof this.listeners[eventtype] == "undefined") {
            this.listeners[eventtype] = [];
        }

        //@todo remove pending
        var listener = {
            fn: fn,
            context: context || this,
            listenon: eventtype,
            contextidentifier: contextidentifier,
            pending: true
        };

        this.listeners[eventtype].push(listener);

        // check if a contextname is given
        // contextname will be used for hashing
        // all listeners added to a context

        if (typeof contextidentifier != "undefined") {

            if (typeof this.publishers[contextidentifier] == "undefined") {

                this.publishers[contextidentifier] = [];

            }

            this.publishers[contextidentifier].push(listener);

        }

    },

    fire: function (eventType, data) {


        if (typeof eventType == "string") {
            eventType = { type: eventType };
        }

        if (!eventType.type) {
            throw new Error("Event object missing 'type' property.");
        }

        if (this.listeners[eventType.type] instanceof Array) {

            var len = this.listeners[eventType.type].length;

            for (var i = 0; i < len; i++) {

                if (this.listeners[eventType.type][i] && this.listeners[eventType.type][i].pending) {

                    this.listeners[eventType.type][i].fn.call(this.listeners[eventType.type][i].context, data);

                }

            }

        }

    },
    removeAllListeners: function(type){

        if(this.listeners[type])
            this.listeners[type]=[];

    },
    removeAllListenersFromPublisher: function (contextidentifier) {


        // get all listners registered

        if (typeof this.publishers[contextidentifier] == "undefined") {

            return;
        }

        var tempPublishers = this.publishers[contextidentifier];

        var len = tempPublishers.length;

        for (var i = 0; i < len; i++) {

            var listenOn = tempPublishers[i].listenon;

            if (this.listeners[listenOn] instanceof Array) {

                var tempListeners = this.listeners[listenOn];

                var offset = 0;
                var jlen = tempListeners.length;
                var jo = 0;

                for (var j = 0; j < jlen; j++) {

                    jo = j;
                    if (tempListeners[jo].contextidentifier === contextidentifier) { // && tempListeners[i].context === context){

                        tempListeners[jo].pending = false;
                        // tempListeners.splice(jo, 1);
                        offset++;


                    }
                }

                this.listeners[listenOn] = tempListeners;

            }
        }
    },



    removeListener: function (type, fn, context) {

        fn = typeof fn === "function" ? fn : context[fn];

        if (this.listeners[type] instanceof Array) {

            var tempListeners = this.listeners[type];

            var len = tempListeners.length;

            for (var i = 0; i < len; i++) {

                if (tempListeners[i].fn === fn) { // && tempListeners[i].context === context){

                    tempListeners.splice(i, 1);
                    break;
                }
            }

            this.listeners[type] = tempListeners;

        }
    }

};

/**
 * Loads a File via Ajax-Request
 * @constructor
 */
var RemoteFileLoader = function () {

    var loadRemoteFile = function (path, successcallback, errorcallback) {
        var fetch = new XMLHttpRequest();
        fetch.open('GET', path);

        if (fetch.overrideMimeType){
           fetch.overrideMimeType("text/plain; charset=x-user-defined");
        }

        fetch.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                /* munge response into a binary string */
                var t = this.responseText || "";
                var ff = [];
                var mx = t.length;
                var scc = String.fromCharCode;
                for (var z = 0; z < mx; z++) {
                    ff[z] = scc(t.charCodeAt(z) & 255);
                }
                successcallback(ff.join(""));
            }
        };
        fetch.send();
    };

    // public API
    return{
        loadRemoteFile: loadRemoteFile
    };

};
var Router = function(){

    return this;

};

/**
 * Redirecting to an specified URL
 * @param url
 */
Router.prototype.redirectTo = function(url){

    window.location = url ;

};
/**
 * Tracking of events
 * the event-tracker listens on different events which has
 * been fired form different modules and handles the specific
 * event by routing to the Tracker
 * @constructor
 */
var Events = function () {

    var root = this;

    // the first Loop of a module has been done
    window.skooveeventhub.addEventListener("trainer.lessonstarted", function (data) {
       
        root.pushToServer('/tracklessonstarted', {
            lessonid: data.lessonid
        });
    });

    // the first Loop of a module has been done
    window.skooveeventhub.addEventListener("trainer.lessondone", function (data) {

        root.pushToServer('/tracklessondone', {
            lessonid: data.lessonid
        });
    });


    // the first Loop of a module has been done
    window.skooveeventhub.addEventListener("keymodeplus.firstloopdone", function (data) {

        root.pushToServer('/trackfistloopdone', {
            lessonid: data.lessonid,
            stepid: data.lessonstep
        });
    });

    // when the first loop has been started
    window.skooveeventhub.addEventListener("keymodeplus.firstloopstarted", function (data) {

        root.pushToServer('/trackfistloopstarted', {
            lessonid: data.lessonid,
            stepid: data.lessonstep
        });
    });
};

/**
 * Push the data to the Server
 *
 * @param {string} url
 * @param {string} content
 * @returns {undefined}
 */
Events.prototype.pushToServer = function(url, content) {

    jQuery.ajaxSetup({
        headers: {
            'X-CSRF-TOKEN': jQuery('meta[name="csrf-token"]').attr('content')
        }
    });
    jQuery.ajax({
        type: "post",
        url: url,
        dataType: 'json',
        data: content,
        success: function (data) {
           // root.onSuccess(data);
        },
        error: function (error) {
           // root.onError(error);
        }
    });
};

/**
 * Wraps the access to the Elements of the Datastructure
 * acts like a repository
 *
 * @constructor
 */

var ns = SKOOVE.createNamespace("SKOOVE.Model");

ns.UserSettingsModel = function(){

	// set default values
    this.devicetype = 'none';
    this.nexthotkey = 34;
    this.starthotkey = 32;
    this.mostleftkey = null;
    this.mostrightkey = null;
    this.keyboardleft = null;
    this.devicename = null;

    return this;

};

/**
 * init the datastructure
 * @param data
 */
ns.UserSettingsModel.prototype.init = function(data){

    if(data){

        this.mostleftkey = data.mostleftkey || 30;

        this.devicename = data.devicename;

        this.mostrightkey = data.mostrightkey || 96;

        // get the device-type midi/ usb /audio / keyboard
        if(data.devicetype){
        	this.devicetype = data.devicetype;
        }

        this.output = data.output;
    
    }
    else{
        // set default values
        this.mostleftkey = 24;

        this.starthotkey = 40;

        this.nexthotkey = 34;

        this.mostrightkey = 96;

        this.devicetype = 'none';

        this.output = 'none';

    }


};

/**
* stores the model into the sink
**/
ns.UserSettingsModel.prototype.save = function(){

	var root = this;
	
	var xsrfToken = jQuery('#_token').val();

	var data = {
        mostleft: root.mostleftkey,
        mostright: root.mostrightkey,
        keyboardleft: root.keyboardleft,
        devicename: root.devicename,
        devicetype: root.devicetype,
        output: root.output,
        _token: xsrfToken
    };

    SKOOVE.Service.LogService({message:'UsersettingsModel.save', data: data});

    //@todo: should be handled in a specific call like dataService 
    jQuery.ajax({
        type: "POST",
        cache: false,
        headers: { 'X-XSRF-TOKEN' : xsrfToken },
        url: '/keyboardsettings/save',
        data: data,
        success: function (data) {
        	
            SKOOVE.Service.LogService({message:'UsersettingsModel.save successfull'});
        	window.skooveeventhub.fire('UserModel.saved.success');
           
        }
      
    });
};
var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.View");

ns.TrainerMainView = function(lessonModel,userModel){

    this.pianoWidget = new PianoWidgetFactory({});

    this.pianoWidget.setUpVisibleKeys(userModel.mostleftkey, userModel.mostrightkey);

    this.hotkeyWidget = SKOOVE.Widgets.HotkeySectionWidget;

    this.hotkeyWidget.init(userModel.startHotKey, userModel.nextHotKey);

    this.processMenuBarWidget = new SKOOVE.Widgets.ProcessMenuBar('stepprocessor', lessonModel.lessonSteps);

    this.mainnav = document.getElementById('trainermenuicon');

    document.getElementById('btn_mnu_back').setAttribute('href','/course/' +  lessonModel.courseId);


    // the flyin-menu
    this.mainnav.addEventListener('click',function(){

        jQuery('#trainermenu').toggle(300);

        return false;

    });

};

/**
 * updates the MainView after Controller-Actions or
 * events
 * @param data
 */
ns.TrainerMainView.prototype.update = function(data){

    SKOOVE.Service.LogService({message:'TrainerMainView.update', data: data});

    // get the Model-Data
    var mainheadline = data.stepheadline;

    var stepId = data.id;

    this.processMenuBarWidget.activeStepById(stepId);

    // change and animate headline
    document.getElementById('mainheadline').innerHTML = mainheadline;

};

/**
 * shows an overlay that shows that the app is loading
 * the overlay contains a main background and a spinner
 * called everytime a new step is requested by the user
 */
ns.TrainerMainView.prototype.showLoadingPanel = function(){

   // show backgroundoverlay
   document.getElementById('overlaybackground').style.display = 'block';

   // show the spinner
   document.getElementById('loadingoverlay').style.display = 'block';

};

/**
 * shows an overlay that shows that the app is loading
 * the overlay contains a main background and a spinner
 * called everytime a new step is requested by the user
 */
ns.TrainerMainView.prototype.hideLoadingPanel = function(){

   // hide backgroundoverlay
   document.getElementById('overlaybackground').style.display = 'none';

   // hide the spinner
   document.getElementById('loadingoverlay').style.display = 'none';

};

/**
 * visualizes the click on a start-stop-Element by transforming the
 * color of the start / stop button
 */
ns.TrainerMainView.prototype.visualizeHotkeyMainClicked = function(){

    var root = this;

    root.btnmain.style.backgroundColor ='#005AA0';

    setTimeout(
        function(){
            root.btnmain.style.backgroundColor ='';
        },
        100
    );

};

/**
 * visualizes the click on a next-Element by transforming the
 * color of the next button
 */
ns.TrainerMainView.prototype.visualizeHotkeyNextClicked = function(){

    var root = this;

    root.btnnext.style.backgroundColor ='#D38A3E';

    setTimeout(
        function(){
            root.btnnext.style.backgroundColor ='';
        },
        100
    );

};


/**
 * visualizies a key-down-event in unstarted lesson
 * @param keyNumber
 */
ns.TrainerMainView.prototype.visualizeKeyBoardInputDown = function(keyNumber){

   var root = this;

   root.pianoWidget.visualizeKeyDown(keyNumber);

};

/**
 * visualizies a key-up-event in unstarted lesson
 * @param keyNumber
 */
ns.TrainerMainView.prototype.visualizeKeyBoardInputUp = function(keyNumber){

    var root = this;

    root.pianoWidget.visualizeKeyUp(keyNumber);

};

/**
 * visualizies a key-up-event in unstarted lesson
 * @param keyNumber
 */
ns.TrainerMainView.prototype.hideStartHotKey = function(){

    this.hotkeyWidget.hideStartHotKey();

};

ns.TrainerMainView.prototype.showStartHotKey = function(){

    this.hotkeyWidget.showStartHotKey();

};

ns.TrainerMainView.prototype.setupPianoNoKeyboard = function(){

    this.hotkeyWidget.setNoKeyboardPositions();

};

ns.TrainerMainView.prototype.displayDialog = function(tmpl){

    var placeholder = 'overlaydialog';

    SKOOVE.Templating.DialogRenderer(placeholder, tmpl);

};

var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Analytics");

ns.AnalyticsService = (function() {

    var root = this;

    function init(eventHub){

        root.eventHub = eventHub;

        root.intercomservice = new SKOOVE.Analytics.AnalyticsIntercomService();

        root.mixpanelservice = new SKOOVE.Analytics.AnalyticsMixpanelService();

        root.googletagservice = new SKOOVE.Analytics.AnalyticsGoogleTagService();

        registerEventHandler();

    };

    function registerEventHandler(){


       /* root.eventHub.addEventListener('skoove.trainerStarted', function(){


            root.intercomservice.track('skoove.trainerStarted');

            // root.mixpanelservice.track('skoove.trainerStarted');

        });

        root.eventHub.addEventListener('skoove.trainerStepVisited', function(data){

            root.intercomservice.track('TSV');

            root.intercomservice.track('TSV', data);

            //root.mixpanelservice.track('skoove.trainerStepVisited');


        });

        root.eventHub.addEventListener('skoove.keyboardsetup', function(data){

            root.intercomservice.track('KB', data);
        });*/

        root.eventHub.addEventListener('skoove.keyboardsetup', function(data){

            var noIntercom = Boolean(data.eventName === 'MIDI.key.pressed' ||
                                     data.eventName === 'Step.entered');

            if (!noIntercom) {
                root.intercomservice.track('KBS', data);
            }

            if (data.eventName === 'MIDI.key.pressed')Â {
                root.googletagservice.trackMIDI(data.eventName, data.eventData);
            }

            root.googletagservice.trackSetup(data.eventName, data.eventData);


            //root.mixpanelservice.track('skoove.trainerStepVisited');

        });



        root.eventHub.addEventListener('skoove.setAttribute', function(name, data){

            root.intercomservice.trackAttribute(name, data);
            //root.mixpanelservice.track('skoove.trainerStepVisited');

        });

        root.eventHub.addEventListener('skoove.homepage', function(subEvent){

            root.googletagservice.trackHomepage(subEvent.eventName, subEvent.eventData);

        });

        root.eventHub.addEventListener('skoove.trainer', function(subEvent){

            root.googletagservice.trackTrainer(subEvent.eventName, subEvent.eventData);

        });

        root.eventHub.addEventListener('playcardsmodedone', function(){

            root.googletagservice.trackTrainer('playcards.done');

        });

        root.eventHub.addEventListener('onUserSettingFailed', function(){

            root.googletagservice.trackTrainer('Settings.load.failed');

        });

        root.eventHub.addEventListener('onMIDIDeviceDetected', function(device){

            root.googletagservice.trackMIDI('Device.detected', device);

        });

        root.eventHub.addEventListener('onMIDIDevicesDetected', function(devices){

            root.googletagservice.trackMIDI('Devices.detected', devices);

        });

        root.eventHub.addEventListener('onMIDIDeviceSelected', function(device){

            root.googletagservice.trackMIDI('Device.selected', device);

        });

        root.eventHub.addEventListener('onMIDIDeviceDetectionFailed', function(){

            root.googletagservice.trackMIDI('Device.detection.failed');

        });

        root.eventHub.addEventListener('onMIDIDevicePingFailed', function(){

            root.googletagservice.trackMIDI('Device.ping.failed');

        });

        root.eventHub.addEventListener('unknownMIDIDevicesDetected', function(){

            root.googletagservice.trackMIDI('Device.unknown');

        });

        root.eventHub.addEventListener('onMIDIPluginFailed', function(){

            root.googletagservice.trackMIDI('Plugin.failed');

        });


    };

    return {

        init : init


     };


})();


ns.AnalyticsIntercomService = function() {


    var trackAttribute = function(attributeData, data){

        var attName = attributeData.name;

        var attValue = attributeData.data;

        if(attName==='numberofkeys'){
            Intercom('update', {'numberofkeys': attValue});
        }
        if(attName==='soundoutput'){
            Intercom('update', {'soundoutput': attValue});
        }
        if(attName==='devicetype'){
            Intercom('update', {'devicetype': attValue});
        }
        if(attName==='devicename'){
            Intercom('update', {'devicename': attValue});
        }
    };

    var track = function(eventName, data){

        var dataStream = '';

        if(data){

            for(var prop in data){

                if(prop!='subEvent'){
                    dataStream += prop + " : " + data[prop] + " ";
                }
                else{
                    dataStream += data[prop] + " ";
                }

            }

            Intercom('trackEvent', eventName + ' ' + dataStream);

        }
        else{

            Intercom('trackEvent', eventName);

        }

    };

    return {

        track : track,
        trackAttribute : trackAttribute

    };

};


ns.AnalyticsMixpanelService = function() {

    var root = this;

    var track = function(eventName){

        alert('mixpanel ' + eventName );

    };

    return {

        track : track

    };


};

ns.AnalyticsGoogleTagService = function() {

    var root = this;

    if (typeof dataLayer === 'undefined') {
        // Google Tag Manager was not included, but avoid future crashes
        dataLayer = new Array();
    }

    var trackHomepage = function(eventName, eventData) {

        switch (eventName) {

            case 'section.shown':

                dataLayer.push({'event': 'Homepage section shown', 'homepage_section_shown': eventData.section});

            break;

        }

    };

    var trackTrainer = function(eventName, eventData) {

        var trainer = {};
        var sendEvent = Boolean(true);

        switch (eventName) {

            case 'step.visited':

                trainer = {
                    'event': 'Step loaded',
                    'stepType': eventData.stepType,
                    'step': eventData.stepNumber
                };

                break;

            case 'loop.ended':

                trainer = {
                    'event': 'Loop ended',
                    'loop': eventData.loopNumber
                };

                break;

            case 'playcards.done':

                trainer = {
                    'event': 'Playcards done',
                };

                break;

            case 'Settings.load.failed':

                trainer = {
                    'event': 'Settings not loaded'
                };

                break;

            default:

                sendEvent = false;

                break;

        }

        if (sendEvent) {

            dataLayer.push({ 'event': 'Trainer event', 'trainer': trainer });

        }

    };

    var trackMIDI = function(eventName, eventData) {

        var midi = {};
        var sendEvent = Boolean(true);

        switch (eventName) {

            case 'Device.detected':

                midi = {
                    'event': 'Device detected',
                    'devices': eventData.name
                };

                break;

            case 'Devices.detected':

                var devices = [];

                for (var i = 0; i < eventData.length; ++i) {

                    devices.push(eventData[i].name);

                }

                midi = {
                    'event': 'Devices detected',
                    'devices': devices
                };

            break;

            case 'Device.selected':

                midi = {
                    'event': 'Device selected',
                    'selectedDevice': eventData.name
                };

                break;

            case 'Device.detection.failed':

                midi = {
                    'event': 'Failure',
                    'failure': 'Device detection'
                };

                break;

            case 'Device.ping.failed':

                midi = {
                    'event': 'Failure',
                    'failure': 'Device ping'
                };

                break;

            case 'Device.unknown':

                midi = {
                    'event': 'Failure',
                    'failure': 'Device unknown'
                };

                break;

            case 'Plugin.failed':

                midi = {
                    'event': 'Failure',
                    'failure': 'Plugin'
                };

                break;

            case 'MIDI.key.pressed':

                midi = {
                    'event': 'Key pressed',
                    'key': eventData.midi_key
                };

                break;

            default:

                sendEvent = false;

            break;

        }

        if (sendEvent) {

            dataLayer.push({ 'event': 'MIDI event', 'midi': midi });

        }

    };

    var trackSetup = function(eventName, eventData) {

        var setup = {};
        var sendEvent = Boolean(true);

        switch (eventName) {

            case 'Step.entered':

                setup = {
                    'event': 'Step entered',
                    'step': eventData.stepName
                };

            break;

            default:

                sendEvent = false;

            break;
        }

        if (sendEvent) {

            dataLayer.push({ 'event': 'Setup event', 'setup': setup });

        }
    };


    return {

        trackHomepage: trackHomepage,
        trackTrainer: trackTrainer,
        trackMIDI: trackMIDI,
        trackSetup: trackSetup

    };

};


var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Analizer");

ns.AccousticAnalizer = function(){

    var root = this;

    this.expectedPitchesIndex = -1;

    //set defualt sample rate, will be rested by audiocontext rate
    this.sampleRate = 44100;
    this.blockSize = 1024;
    this.maxNumNotes = 10;
    var treshold = 0.025;
    var numberOfRightFrames = 3;

    this.numberOfPitchesToDetect = 0;

    // allocate memory on Emscripten heap and get pointer
    var samplesPtr = Module._malloc(this.blockSize*4);
    var referencePitchesPtr = Module._malloc(this.maxNumNotes*4);
    var activityResultsPtr = Module._malloc(this.maxNumNotes*4);
    var validationResultsPtr = Module._malloc(this.maxNumNotes*4);
    var validationConfPtr = Module._malloc(this.maxNumNotes*4);

    // get byte-wise views on newly allocated buffers
    this.samplesHeap = new Float32Array(Module.HEAPF32.buffer, samplesPtr, this.blockSize);
    this.referencePitchesHeap = new Uint32Array(Module.HEAPU32.buffer, referencePitchesPtr, this.maxNumNotes);
    var validationResultsHeap = new Uint32Array(Module.HEAPU32.buffer, validationResultsPtr, this.maxNumNotes);
    this.activityResultsHeap = new Uint32Array(Module.HEAPU32.buffer, activityResultsPtr, this.maxNumNotes);
    var validationConfHeap = new Float32Array(Module.HEAPF32.buffer, validationConfPtr, this.maxNumNotes);

    // Check if Web Audio API is supported.
    try {
        if(!window.audioContext){
            window.audioContext = new (window.AudioContext ||	window.webkitAudioContext)();
        }

    } catch (e) {
        alert('Web Audio API is not supported in this browser');
    }

    this.sampleRate = window.audioContext.sampleRate;

    validator = new Module.MultipitchValidationEmscriptenWrapper(this.sampleRate, this.blockSize, treshold , numberOfRightFrames);
    validator.setPointerToValidationResults(validationResultsHeap.byteOffset);
    validator.setPointerToValidationConfidences(validationConfHeap.byteOffset);
    validator.setPointerToActivityResults(root.activityResultsHeap.byteOffset);


    // making it global:
    // http://stackoverflow.com/questions/24338144/chrome-onaudioprocess-stops-getting-called-after-a-while
    window.myPCMProcessingNode = audioContext.createScriptProcessor(this.blockSize, 1, 1);

    window.inputSource.getStream(

        function(stream){
            window.microphone = window.audioContext.createMediaStreamSource(stream);
            window.microphone.connect(myPCMProcessingNode);
        }

    );

    myPCMProcessingNode.connect(window.audioContext.destination);

    this.getNextReferencePitches();

    // define how each frame is processed
    myPCMProcessingNode.onaudioprocess = function(e)
    {

        // get the input
        var input = e.inputBuffer.getChannelData(0);

        // convert the input to a Float32-Array
        var array = new Float32Array(input.buffer);

        // call the DOM2-EventHandler
        root.onGotInputData(array);

        // set the validator sampleHeap -> add the
        // current sample into the validator
        root.samplesHeap.set(array);

        // set the reference pitches
        validator.setReferencePitches(root.referencePitchesHeap.byteOffset, root.maxNumNotes);

        // process the validator and retriev a output
        var output = validator.process(root.samplesHeap.byteOffset, root.blockSize);

        if(output === 1){
            //console.log('output to low');
            root.onVolumeToLow();

        }
        else if(output===0){

            //console.log('output ok');
            root.onVolumeOk();

            var numberOfPitchesDetected = 0;

           // console.log(root.activityResultsHeap);

            for(var i=0; i < root.activityResultsHeap.length; i++){

                numberOfPitchesDetected += root.activityResultsHeap[i];

            }

           // console.log('numberofPitches detected ' + numberOfPitchesDetected);

            if(numberOfPitchesDetected === root.numberOfPitchesToDetect){

                root.onPitchCompareSuccess(root.expectedPitches[root.expectedPitchesIndex]);

                root.resetReferencePitches();

                root.getNextReferencePitches();

            }
            else{

               // console.log(root.activityResultsHeap);
               // console.log('not all detected');

                //window.setTimeout(function(){
                //root.resetReferencePitches();
                //root.getCurrentReferencePitches();
                //},1000);

            }

        }

    };

};

ns.AccousticAnalizer.prototype.init = function(expectedPitches){

    var root = this;

    root.expectedPitches = expectedPitches;

};

ns.AccousticAnalizer.prototype.getNextReferencePitches = function(){

    var root = this;

    window.setTimeout(function(){

        root.onListen();

        root.expectedPitchesIndex +=1;

        if(root.expectedPitchesIndex>=root.expectedPitches.length){

            root.expectedPitchesIndex = 0;

        }

        var pitchesOnIndex = root.expectedPitches[root.expectedPitchesIndex];

        root.numberOfPitchesToDetect = pitchesOnIndex.length;

        for(var i=0; i < root.numberOfPitchesToDetect; i++){

            root.referencePitchesHeap[i] = pitchesOnIndex[i].midiNoteNumber;

        }

        console.log(root.referencePitchesHeap);

    }, 100);

};


ns.AccousticAnalizer.prototype.resetReferencePitches = function(){

    var root = this;

    for(var i = 0;i < root.referencePitchesHeap.length; i++){

        root.referencePitchesHeap[i] = 0;

    }

};

ns.AccousticAnalizer.prototype.reset = function(){

    this.expectedPitchesIndex = -1;

    this.resetReferencePitches();

    this.getNextReferencePitches();

};


/**
 * Event fired when the Anlayzier is ready for listen to the next pitch
 */
ns.AccousticAnalizer.prototype.onListen = function(){

};

/**
 * Eventhandler called when the input return a 0 - > that means the level is
 * to low
 */
ns.AccousticAnalizer.prototype.onVolumeToLow = function(){

};

/**
 * Eventhandler called when the input return a 0 - > that means the level is
 * to low
 */
ns.AccousticAnalizer.prototype.onVolumeOk= function(){

};

/**
 * Eventhandler if there are some data form nodeprocessor
 * @param data
 */
ns.AccousticAnalizer.prototype.onGotInputData = function(data){

};

ns.AccousticAnalizer.prototype.onPitchCompareSuccess = function(data){

};
var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Analytics");

ns.TimingService = (function() {

    var root = this;

    var startTime = 0;

    var stopTime = 0;

    var usedTime = 1000;

    function init(){

        this.startTime = getCurrentTime();

        return root;

    }

    function getCurrentTime(){

        return new Date().getTime();

    }

    //@todo: check if these Method is called everywhere and remove it
    function start(){


    };

    function stop(){

       this.stopTime = getCurrentTime();

       var usedTimeInMs = this.stopTime - this.startTime;

       var seconds = Math.floor(usedTimeInMs / 1000);

        var minutes = Math.floor(seconds / 60);

       return minutes;

    };

    return {

        start : start,
        stop: stop,
        init: init

    };

})();



var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Service");

/**
 * Loads the User-Data via Ajax-Call
 */
ns.UserDataService = function(){

    return this;

};

ns.UserDataService.prototype.save = function(model){

   // LoggingService('UserdataServcie save' , model);

};

ns.UserDataService.prototype.getUserSettings = function(){

    return new Promise(function (fulfill, reject){

        jQuery.ajax({
            type: "GET",
            url: "/keyboardsettings/get",
            success: function(data){

                if(data.status===-1){

                    reject('err');

                }
                else{

                    var settingsModel = new SKOOVE.Model.UserSettingsModel();

                    settingsModel.init(data.payload);

                    fulfill(settingsModel);

                }
            },
            error: function(){

                reject('err');

            }
        });

    });

};

var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Service");

/**
 * loads a lesson Model by accessing the API
 * returns a LessonModel-Object
 */
ns.LessonDataService = (function() {

    function _getLessonById(id){

        return new Promise(function (fulfill, reject){

            jQuery.ajax({
                type: "GET",
                url: "/api/lessonsteps/" + id,
                success: function(data){

                    if(data.status===0){

                        reject('err');

                    }
                    else{

                        // if the request is successfull
                        // return a lessonModel
                        var lessonModel = new LessonModel();

                        lessonModel.init(data.payload);

                        fulfill(lessonModel);

                    }
                },
                error: function(){

                    reject('err');

                }
            });

        });

    };

    return {
        getLessonById: _getLessonById
    };

})();
var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Service");

/**
 * Loads the User-Data and Lesson-Data
 */
ns.TrainerDataService = (function() {

    function _getTrainerData(lessonId, callback){

        userDataService = new SKOOVE.Service.UserDataService();

        Promise.all([userDataService.getUserSettings(),
                    SKOOVE.Service.LessonDataService.getLessonById(lessonId)])
                    .then(function(response) {

            callback({
                status: 1,
                userModel: response[0],
                lessonModel: response[1]
            });

        }, function() {

            callback({
                status: 0
            });

        });

    };

    return {

        getTrainerData: _getTrainerData

    };

})();
var ns = SKOOVE.createNamespace("SKOOVE.Service");

ns.HotKeyComputingService = function (keyNumber){

        var modulo = keyNumber % 12;

        var midiKeyMapping = ['w','b','w','b','w','w','b','w','b','w','b','w'];

        var counter = 0;

        for (var i = modulo+1; i<12;i++){

            counter +=1;

            if(midiKeyMapping[i]==='b'){

                break;
            }

        }

        var midikeyNumber = parseInt(keyNumber) + parseInt(counter);

        return midikeyNumber;

};
var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Service");

/**
 * wrapps the browser-detection-library platform.js
 * @constructor
 */
ns.BrowserDetectionService = function() {

};

/**
 * returns the name of the detected Userbrowser
 */
ns.BrowserDetectionService.prototype.getBrowserName = function(){

    var platFormName = platform.name.toLowerCase();

    return platFormName;

};

/**
 * returns the name of the detected Userbrowser
 */
ns.BrowserDetectionService.prototype.getOSName = function(){

    var osName = '';

    (/^Windows/i).test(platform.os.family) && (osName = 'windows');
    (/^OS X/i).test(platform.os.family) && (osName = 'osx');

    return osName;

};
var ns = SKOOVE.createNamespace("SKOOVE.Service");

ns.LogService = function (logEntry){

    if(SKOOVE.Appsettings.debug === true){

        var adddataString = '';

        if(SKOOVE.Appsettings.logsink==='console'){
            console.log(logEntry.message);
            if(logEntry.data){
                 console.log(logEntry.data);
            }
            console.log('------------------');
        }
        else{
            if(logEntry.data){

                adddataString =  JSON.stringify(logEntry.data);
            
                message = logEntry.message + ' data  ' + adddataString ;

            }

            var data = {
                'message':message,
                'useragent':'unknown'
            };

            jQuery.ajax({
                type: "post",
                url: "/log",
                data: data
            });
        }

    }

};
/**
 * Detects connections to the different devices
 * by accessing the mid-web-api-polyfill or
 * the web-midi-api (currently just implemented by chrome)
 * @constructor
 */
var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Device");

ns.MidiDeviceService = function (browserDetectionService) {

    // reference to the context
    var self = this;

    this.browserDetectionService = browserDetectionService;

    // holds all input devices
    this.inputs = null;

    //holds all output devices
    this.outputs = null;

    this.getType = function(){

        return 'midi';

    };

    this.getSelectedDeviceName = function(){

        SKOOVE.Service.LogService({message:'MidiDeviceService.getSelectedDeviceName',
            data: self.devicesArray
        }); 

        return self.devicesArray[0].name;

    };

    /**
     * detects the connected devices and calls eventhandler
     * functions to handle 3 cases:
     * 1 - one device detected -> calling onMIDIDeviceDetected (device)
     * 2 - two or more devices detected -> calling onMIDIDevicesDetected (devices)
     * 3 - no device could be detected -> calling onMIDIDeviceDetectionFailed ()
     * all of these handler-Methods are able to monkey pitch
     * @param midiAccessObject
     */
    this.fetchingDevices = function (midiAccessObject) {

        SKOOVE.Service.LogService({message:'MidiDeviceService.fetchingDevices'});

        // store for detected Devices
        self.devicesArray = [];

        // get all Inputs which are detected
        self.inputs = midiAccessObject.inputs;

        // iterate over detected devices and put
        // each of these into a Storage Array
        self.inputs.forEach(
            function (midiInput) {

                self.devicesArray.push(midiInput);

            }
        );

        // check the number of detected devices and
        // handle the cases
        if (self.devicesArray.length === 1) {

            SKOOVE.Service.LogService({message:'MidiDeviceService.fetchingDevices one Device'});

            self.setActiveDevice(self.devicesArray[0]);

            //... only one device could be detected
            self.onMIDIDeviceDetected(self.devicesArray[0]);

        }
        else if (self.inputs.size > 1) {

            SKOOVE.Service.LogService({message:'MidiDeviceService.fetchingDevices more than one Devices'});

            //... more than one device could be detected
            self.onMIDIDevicesDetected(self.devicesArray);

        }
        else {

            SKOOVE.Service.LogService({message:'MidiDeviceService.fetchingDevices detection Failed'});

            //... no device could be detected
            self.onMIDIDeviceDetectionFailed();

        }
    };

    /**
     * select a device by a id
     * usecase: user has many keyboards connected
     * and he should use which one he wanna use
     * used in: device Detection on Trainer main-Site
     *
     */
    this.selectById = function (deviceId) {

        var self = this;

        if(window.navigator.requestMIDIAccess){

            navigator.requestMIDIAccess().then(function(access){

                    var theSelectedDevice = null;

                    access.inputs.forEach(
                        function(midiInput){
                            if(midiInput.id === deviceId){
                                theSelectedDevice = midiInput;
                            }

                        }

                    );

                    self.onMIDIDeviceSelected(theSelectedDevice);

                },

                this.onMIDIAccessError);

        }
        else{

            this.onMIDIAccessError();

        }

    };

    /**
     * select a device by a id
     * usecase: user has many keyboards connected
     * and he should use which one he wanna use
     * used in: device Detection on Trainer main-Site
     *
     */
    this.chooseByName = function (accessor, name) {

        // get the Device by id
        var allDevices = accessor.inputs;
        var theNamedDevice = null;
        var devicesArray = [];

        allDevices.forEach(
            function(midiInput){
                if(midiInput.name === name){
                    theNamedDevice =  midiInput;
                }
                devicesArray.push(midiInput);
            }

        );

        if(theNamedDevice){
            self.onMIDIDeviceSelected(theNamedDevice);
        }
        else if(allDevices.size == 0){
            //console.log(1);
            self.onMIDIDeviceDetectionFailed();
        }
        else if(allDevices.size == 1){
            // console.log(1);
            self.onMIDIDeviceDetected(devicesArray[0]);
        }
        else if(allDevices.size>0){

            var devicesArray = [];
         
            allDevices.forEach(
                function (midiInput) {
                    devicesArray.push(midiInput);
                }
            );
         
        }

    };

    /**
     * run the detection
     */
    this.detectDevices = function () {

        SKOOVE.Service.LogService({message:'MidiDeviceService.detectDevices called'}); 

        if(window.navigator.requestMIDIAccess){

            SKOOVE.Service.LogService({message:'MidiDeviceService.detectMidiAccess successfull'});

            navigator.requestMIDIAccess().then(this.fetchingDevices, this.onMIDIAccessError);

        }
        else{

            SKOOVE.Service.LogService({message:'MidiDeviceService.detectMidiAccess error'});

            this.onMIDIAccessError();

        }

    };

    this.selectByName = function (name) {

        var root = this;

        if(window.navigator.requestMIDIAccess){

            // navigator.requestMIDIAccess().then(root.fetchingDevices, root.onMIDIAccessError);

            navigator.requestMIDIAccess().then(
                function(accessor){
                
                    root.chooseByName(accessor, name)
                
                },
                function(error){
                    
                    root.onMIDIAccessError();
                
                }

            );

        }
        else{
           
            root.onMIDIAccessError();
        }

    };

    this.setActiveDevice = function(thedevice){

        self.activeDevice = thedevice;

        // register the EventHandler
        self.activeDevice.onmidimessage = function () {
            // without these stub nothing works on chrome
        };

        // register EventHandler for the detection of a
        // keyboardstroke
        // the event midimessage will be fired via the midi
        // connector
        // injected Parameter contains the data, which will
        // be send by the midi-device
        // ev.data[0] -> type of midiEvent 144 keydown 128 -> keyup
        // ev.data[1] -> midinumber of the key
        // ev.data[2] -> velocity 0 to 127
        self.activeDevice.addEventListener("midimessage", function (ev) {

            if ((ev.data[2] == 0 && (ev.data[0] >= 144 && ev.data[0] <= 159)) || ev.data[0] == 128) {

                window.skooveeventhub.fire('noteOff',{
                    note: ev.data[1]
                });

            }
            else if (ev.data[2] > 0) {

                window.skooveeventhub.fire('noteOn',{
                    note: ev.data[1]
                });

            }

        });

    };

    /**
     * one Device could be detected
     * dom level 2 Eventhandler
     * @param device
     */
    this.onMIDIDeviceDetected = function (device) {

        // fire an event via skooveevent hub and send the device
        window.skooveeventhub.fire("onMIDIDeviceDetected", device);

    };

    /**
     * more than one device could be detected
     * dom level 2 Eventhandler
     * @param devices
     */
    this.onMIDIDevicesDetected = function (devices) {

        // fire an event via skooveevent hub and send the devices
        window.skooveeventhub.fire("onMIDIDevicesDetected", devices);

    };

    /**
     * more than one device could be detected
     * dom level 2 Eventhandler
     * @param devices
     */
    this.onMIDIDeviceSelected = function (device) {

        // fire an event via skooveevent hub and send the devices
        window.skooveeventhub.fire("onMIDIDeviceSelected", device);

    };

    /**
     * no device could be detected
     */
    this.onMIDIDeviceDetectionFailed = function () {

        window.skooveeventhub.fire("onMIDIDeviceDetectionFailed");

    };

    /**
     *
     */
    this.onMIDIDevicePingFailed = function () {

        window.skooveeventhub.fire("onMIDIDevicePingFailed");

    };

    /**
     * no access to the MIDI-Interface, this could have different reasons
     * @param error
     */
    this.onMIDIAccessError = function (error) {

        SKOOVE.Service.LogService({message:'MidiDeviceService.onMIDIAccessError'});

        window.skooveeventhub.fire("onMIDIPluginFailed");


    };

    /**
     * no access to the MIDI-Interface, this could have different reasons
     * @param error
     */
    this.onMIDIAccessDetectionError = function (error) {

        window.skooveeventhub.fire("onMIDIPluginDetectionFailed");

    };

};
/**
 * Detects connections to the different devices
 * by accessing the mid-web-api-polyfill or
 * the web-midi-api (currently just implemented by chrome)
 * @constructor
 */
var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Device");

ns.MicrophoneDeviceService = function () {

    var root = this;

   	root.stream = null;

    this.getType = function(){

        return 'microphone';

    };

    this.getSelectedDeviceName = function(){

        return 'Microphone';

    };

    this.getStream = function(callback){

        callback(root.stream);

    };

    this.detect = function(){

        try {
            if(!window.audioContext)
                window.audioContext = new (window.AudioContext ||	window.webkitAudioContext)();
        } catch (e) {
            alert('Web Audio API is not supported in this browser');
        }
       
        // Check if there is microphone input.
        try {

            if(!window.navigator.getUserMedia){

                window.navigator.getUserMedia = navigator.getUserMedia ||
                    navigator.webkitGetUserMedia ||
                    navigator.mozGetUserMedia ||
                    navigator.msGetUserMedia;

            }

            window.navigator.getUserMedia({
                        audio: true
                    }, root.onSuccess,
                    root.onError);


        } catch (e) {

            window.skooveeventhub.fire('MicrophoneDeviceService.accessNotSupported');

            root.onError = null;

        }
    };

    /**
     * Eventhandler on successfull detection on a microphone
     * returns a stream
     * could be overwritten
     * @param stream
     */
    this.onSuccess = function (stream) {

        root.stream = stream;   
   	    
        window.skooveeventhub.fire('MicrophoneDeviceService.deviceDetected');

    };

    this.onError = function (e) {

    	window.skooveeventhub.fire('MicrophoneDeviceService.onError');
    
    };

};
var SKOOVE = SKOOVE || {};
/*


getByteTimeDomainData (and the newer getFloatTimeDomainData) return an array of the size you requested - its frequencyBinCount, which is calculated as half of the requested fftSize. That array is, of course, at the current sampleRate exposed on the AudioContext, so if it's the default 2048 fftSize, frequencyBinCount will be 1024, and if your device is running at 44.1kHz, that will equate to around 23ms of data.

The byte values do range between 0-255, and yes, that maps to -1 to +1, so 128 is zero. (It's not volts, but full-range unitless values.)

If you use getFloatFrequencyData, the values returned are in dB; if you use the Byte version, the values are mapped based on minDecibels/maxDecibels (see the minDecibels/maxDecibels description).


*/
var ns = SKOOVE.createNamespace("SKOOVE.Service");

ns.SimplePitchAudioAnalizer = function(audiostream){

    var root = this;

    // get the AudioContext-Object webKit or other Browser
    window.AudioContext = window.AudioContext || window.webkitAudioContext;

    // instantiate the AudioContext
    root.audioContext = new AudioContext();

    // Create an AudioNode from the audiostream.
    root.mediaStreamSource =  root.audioContext.createMediaStreamSource(audiostream);

    // Connect it to the destination.
    root.analyser = root.audioContext.createAnalyser();

    // some global Object-Settings
    root.analyser.fftSize = SKOOVE.Appsettings.fftSize;
    //root.analyser.smoothingTimeConstant = 0.5;

    //connect the Anaylizer with the AudioScource
    root.mediaStreamSource.connect(root.analyser);

    // init-setup for the RunnerId
    root.runnerId = null;

    return this;

 };

/**
 *  run the Analyzer
 */
ns.SimplePitchAudioAnalizer.prototype.run = function(){

    var self = this;

    // start streamfetching
    self.runnerId = setInterval(function(){self.getPitch()}, 500);

    return this;
};

/**
* stop the Analyzer
*/
ns.SimplePitchAudioAnalizer.prototype.stop = function(){

   var self = this;
   // stop the runner
   clearInterval(self.runnerId);

};

/**
 * get a pitch and compute these pitch
 */
ns.SimplePitchAudioAnalizer.prototype.getPitch = function(){

    console.log('get Pitch');

    var root = this;

    var bufferLength = root.analyser.fftSize;

    // create the Buffer-Array
    var bufferTimeDomainData = new Uint8Array(bufferLength);

    root.analyser.getByteTimeDomainData(bufferTimeDomainData);

    // compute the frequency
    var frequency = root.computeFrequency(bufferTimeDomainData, root.audioContext.sampleRate);

    if (frequency!=null){
        // get a numeric value of frequency
        var notenumber = root.convertFrequencyToNote(frequency);

        if((notenumber !== root.lastNotenumber)){

            // invoke the EventHandler
            root.lastNotenumber = notenumber;
            
            root.onPitchDetected(notenumber);

        }

    }

};

/**
 * Converts a frequency into a internal Notenumber
 * @param frequency
 * @returns {number}
 */
ns.SimplePitchAudioAnalizer.prototype.convertFrequencyToNote = function(frequency){
   
    var noteNum = 12 * (Math.log( frequency / 440 )/Math.log(2) );
    
    return Math.round(noteNum) + 69;

};

ns.SimplePitchAudioAnalizer.prototype.teardown = function(){

    this.stop();

    this.analyzer = null;

};


/**
 * computes the frequency->
 * TODO: has to be refactored 
 * @param buf
 * @param sampleRate
 * @returns {*}
 */
ns.SimplePitchAudioAnalizer.prototype.computeFrequency = function( buf, sampleRate ) {

    var MIN_SAMPLES = 4;    // corresponds to an 11kHz signal
    var MAX_SAMPLES = 1000; // corresponds to a 44Hz signal
    var SIZE = 1000;
    var best_offset = -1;
    var best_correlation = 0;
    var rms = 0;
    var foundGoodCorrelation = false;
    var lastCorrelation = 1;

    if (buf.length < (SIZE + MAX_SAMPLES - MIN_SAMPLES)){
        // not enough data
       return null;
    }

    for (var i=0; i<SIZE; i++) {
        var val = (buf[i] - 128)/128;
        rms += val*val;
    }

    rms = Math.sqrt(rms/SIZE);

    if (rms<0.01){
        return null;
    }

    for (var offset = MIN_SAMPLES; offset <= MAX_SAMPLES; offset++) {
        var correlation = 0;
        for (var i=0; i<SIZE; i++) {
            correlation += Math.abs(((buf[i] - 128)/128)-((buf[i+offset] - 128)/128));
        }
        correlation = 1 - (correlation/SIZE);
        if ((correlation>0.9) && (correlation > lastCorrelation)){
            foundGoodCorrelation = true;
        }
        else if (foundGoodCorrelation) {
            return sampleRate/best_offset;
        }
        lastCorrelation = correlation;
        if (correlation > best_correlation) {
            best_correlation = correlation;
            best_offset = offset;
        }
    }


    if (best_correlation > 0.01) {
        return sampleRate/best_offset;
    }

    return null;

};

/**
 * eventHandler if a picht could be computed
 * @param note
 */
ns.SimplePitchAudioAnalizer.prototype.onPitchDetected = function(noteNumber){

};
var Module;if(!Module)Module=(typeof Module!=="undefined"?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window==="object";var ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof require==="function"&&!ENVIRONMENT_IS_WEB;var ENVIRONMENT_IS_WORKER=typeof importScripts==="function";var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module["print"])Module["print"]=function print(x){process["stdout"].write(x+"\n")};if(!Module["printErr"])Module["printErr"]=function printErr(x){process["stderr"].write(x+"\n")};var nodeFS=require("fs");var nodePath=require("path");Module["read"]=function read(filename,binary){filename=nodePath["normalize"](filename);var ret=nodeFS["readFileSync"](filename);if(!ret&&filename!=nodePath["resolve"](filename)){filename=path.join(__dirname,"..","src",filename);ret=nodeFS["readFileSync"](filename)}if(ret&&!binary)ret=ret.toString();return ret};Module["readBinary"]=function readBinary(filename){return Module["read"](filename,true)};Module["load"]=function load(f){globalEval(read(f))};if(!Module["thisProgram"]){if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")}else{Module["thisProgram"]="unknown-program"}}Module["arguments"]=process["argv"].slice(2);if(typeof module!=="undefined"){module["exports"]=Module}process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));Module["inspect"]=(function(){return"[Emscripten Module object]"})}else if(ENVIRONMENT_IS_SHELL){if(!Module["print"])Module["print"]=print;if(typeof printErr!="undefined")Module["printErr"]=printErr;if(typeof read!="undefined"){Module["read"]=read}else{Module["read"]=function read(){throw"no read() available (jsc?)"}}Module["readBinary"]=function readBinary(f){if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}var data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module["read"]=function read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof console!=="undefined"){if(!Module["print"])Module["print"]=function print(x){console.log(x)};if(!Module["printErr"])Module["printErr"]=function printErr(x){console.log(x)}}else{var TRY_USE_DUMP=false;if(!Module["print"])Module["print"]=TRY_USE_DUMP&&typeof dump!=="undefined"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WORKER){Module["load"]=importScripts}if(typeof Module["setWindowTitle"]==="undefined"){Module["setWindowTitle"]=(function(title){document.title=title})}}else{throw"Unknown runtime environment. Where are we?"}function globalEval(x){eval.call(null,x)}if(!Module["load"]&&Module["read"]){Module["load"]=function load(f){globalEval(Module["read"](f))}}if(!Module["print"]){Module["print"]=(function(){})}if(!Module["printErr"]){Module["printErr"]=Module["print"]}if(!Module["arguments"]){Module["arguments"]=[]}if(!Module["thisProgram"]){Module["thisProgram"]="./this.program"}Module.print=Module["print"];Module.printErr=Module["printErr"];Module["preRun"]=[];Module["postRun"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}var Runtime={setTempRet0:(function(value){tempRet0=value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return Runtime.QUANTUM_SIZE}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,prepVararg:(function(ptr,type){if(type==="double"||type==="i64"){if(ptr&7){assert((ptr&7)===4);ptr+=4}}else{assert((ptr&3)===0)}return ptr}),getAlignSize:(function(type,size,vararg){if(!vararg&&(type=="i64"||type=="double"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){if(!args.splice)args=Array.prototype.slice.call(args);args.splice(0,0,ptr);return Module["dynCall_"+sig].apply(null,args)}else{return Module["dynCall_"+sig].call(null,ptr)}}),functionPointers:[],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 2*(1+i)}}throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."}),removeFunction:(function(index){Runtime.functionPointers[(index-2)/2]=null}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,arguments)}}return sigCache[func]}),getCompilerSetting:(function(name){throw"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=DYNAMICTOP;DYNAMICTOP=DYNAMICTOP+size|0;DYNAMICTOP=DYNAMICTOP+15&-16;if(DYNAMICTOP>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){DYNAMICTOP=ret;return 0}}return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module["Runtime"]=Runtime;var __THREW__=0;var ABORT=false;var EXITSTATUS=0;var undef=0;var tempValue,tempInt,tempBigInt,tempInt2,tempBigInt2,tempPair,tempBigIntI,tempBigIntR,tempBigIntS,tempBigIntP,tempBigIntD,tempDouble,tempFloat;var tempI64,tempI64b;var tempRet0,tempRet1,tempRet2,tempRet3,tempRet4,tempRet5,tempRet6,tempRet7,tempRet8,tempRet9;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}var globalScope=this;function getCFunc(ident){var func=Module["_"+ident];if(!func){try{func=eval("_"+ident)}catch(e){}}assert(func,"Cannot call unknown function "+ident+" (perhaps LLVM optimizations or closure removed it?)");return func}var cwrap,ccall;((function(){var JSfuncs={"stackSave":(function(){Runtime.stackSave()}),"stackRestore":(function(){Runtime.stackRestore()}),"arrayToC":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){ret=Runtime.stackAlloc((str.length<<2)+1);writeStringToMemory(str,ret)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};ccall=function ccallFunc(ident,returnType,argTypes,args,opts){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType==="string")ret=Pointer_stringify(ret);if(stack!==0){if(opts&&opts.async){EmterpreterAsync.asyncFinalizers.push((function(){Runtime.stackRestore(stack)}));return}Runtime.stackRestore(stack)}return ret};var sourceRegex=/^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;function parseJSFunc(jsfunc){var parsed=jsfunc.toString().match(sourceRegex).slice(1);return{arguments:parsed[0],body:parsed[1],returnValue:parsed[2]}}var JSsource={};for(var fun in JSfuncs){if(JSfuncs.hasOwnProperty(fun)){JSsource[fun]=parseJSFunc(JSfuncs[fun])}}cwrap=function cwrap(ident,returnType,argTypes){argTypes=argTypes||[];var cfunc=getCFunc(ident);var numericArgs=argTypes.every((function(type){return type==="number"}));var numericRet=returnType!=="string";if(numericRet&&numericArgs){return cfunc}var argNames=argTypes.map((function(x,i){return"$"+i}));var funcstr="(function("+argNames.join(",")+") {";var nargs=argTypes.length;if(!numericArgs){funcstr+="var stack = "+JSsource["stackSave"].body+";";for(var i=0;i<nargs;i++){var arg=argNames[i],type=argTypes[i];if(type==="number")continue;var convertCode=JSsource[type+"ToC"];funcstr+="var "+convertCode.arguments+" = "+arg+";";funcstr+=convertCode.body+";";funcstr+=arg+"="+convertCode.returnValue+";"}}var cfuncname=parseJSFunc((function(){return cfunc})).returnValue;funcstr+="var ret = "+cfuncname+"("+argNames.join(",")+");";if(!numericRet){var strgfy=parseJSFunc((function(){return Pointer_stringify})).returnValue;funcstr+="ret = "+strgfy+"(ret);"}if(!numericArgs){funcstr+=JSsource["stackRestore"].body.replace("()","(stack)")+";"}funcstr+="return ret})";return eval(funcstr)}}))();Module["cwrap"]=cwrap;Module["ccall"]=ccall;function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}Module["setValue"]=setValue;function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for setValue: "+type)}return null}Module["getValue"]=getValue;var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_STATIC=2;var ALLOC_DYNAMIC=3;var ALLOC_NONE=4;Module["ALLOC_NORMAL"]=ALLOC_NORMAL;Module["ALLOC_STACK"]=ALLOC_STACK;Module["ALLOC_STATIC"]=ALLOC_STATIC;Module["ALLOC_DYNAMIC"]=ALLOC_DYNAMIC;Module["ALLOC_NONE"]=ALLOC_NONE;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[_malloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr==="function"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}Module["allocate"]=allocate;function getMemory(size){if(!staticSealed)return Runtime.staticAlloc(size);if(typeof _sbrk!=="undefined"&&!_sbrk.called||!runtimeInitialized)return Runtime.dynamicAlloc(size);return _malloc(size)}Module["getMemory"]=getMemory;function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return Module["UTF8ToString"](ptr)}Module["Pointer_stringify"]=Pointer_stringify;function AsciiToString(ptr){var str="";while(1){var ch=HEAP8[ptr++>>0];if(!ch)return str;str+=String.fromCharCode(ch)}}Module["AsciiToString"]=AsciiToString;function stringToAscii(str,outPtr){return writeAsciiToMemory(str,outPtr,false)}Module["stringToAscii"]=stringToAscii;function UTF8ArrayToString(u8Array,idx){var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}Module["UTF8ArrayToString"]=UTF8ArrayToString;function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}Module["UTF8ToString"]=UTF8ToString;function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}Module["stringToUTF8Array"]=stringToUTF8Array;function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}Module["stringToUTF8"]=stringToUTF8;function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}Module["lengthBytesUTF8"]=lengthBytesUTF8;function UTF16ToString(ptr){var i=0;var str="";while(1){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)return str;++i;str+=String.fromCharCode(codeUnit)}}Module["UTF16ToString"]=UTF16ToString;function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}Module["stringToUTF16"]=stringToUTF16;function lengthBytesUTF16(str){return str.length*2}Module["lengthBytesUTF16"]=lengthBytesUTF16;function UTF32ToString(ptr){var i=0;var str="";while(1){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)return str;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}}Module["UTF32ToString"]=UTF32ToString;function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}Module["stringToUTF32"]=stringToUTF32;function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}Module["lengthBytesUTF32"]=lengthBytesUTF32;function demangle(func){var hasLibcxxabi=!!Module["___cxa_demangle"];if(hasLibcxxabi){try{var buf=_malloc(func.length);writeStringToMemory(func.substr(1),buf);var status=_malloc(4);var ret=Module["___cxa_demangle"](buf,0,0,status);if(getValue(status,"i32")===0&&ret){return Pointer_stringify(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}}var i=3;var basicTypes={"v":"void","b":"bool","c":"char","s":"short","i":"int","l":"long","f":"float","d":"double","w":"wchar_t","a":"signed char","h":"unsigned char","t":"unsigned short","j":"unsigned int","m":"unsigned long","x":"long long","y":"unsigned long long","z":"..."};var subs=[];var first=true;function dump(x){if(x)Module.print(x);Module.print(func);var pre="";for(var a=0;a<i;a++)pre+=" ";Module.print(pre+"^")}function parseNested(){i++;if(func[i]==="K")i++;var parts=[];while(func[i]!=="E"){if(func[i]==="S"){i++;var next=func.indexOf("_",i);var num=func.substring(i,next)||0;parts.push(subs[num]||"?");i=next+1;continue}if(func[i]==="C"){parts.push(parts[parts.length-1]);i+=2;continue}var size=parseInt(func.substr(i));var pre=size.toString().length;if(!size||!pre){i--;break}var curr=func.substr(i+pre,size);parts.push(curr);subs.push(curr);i+=pre+size}i++;return parts}function parse(rawList,limit,allowVoid){limit=limit||Infinity;var ret="",list=[];function flushList(){return"("+list.join(", ")+")"}var name;if(func[i]==="N"){name=parseNested().join("::");limit--;if(limit===0)return rawList?[name]:name}else{if(func[i]==="K"||first&&func[i]==="L")i++;var size=parseInt(func.substr(i));if(size){var pre=size.toString().length;name=func.substr(i+pre,size);i+=pre+size}}first=false;if(func[i]==="I"){i++;var iList=parse(true);var iRet=parse(true,1,true);ret+=iRet[0]+" "+name+"<"+iList.join(", ")+">"}else{ret=name}paramLoop:while(i<func.length&&limit-->0){var c=func[i++];if(c in basicTypes){list.push(basicTypes[c])}else{switch(c){case"P":list.push(parse(true,1,true)[0]+"*");break;case"R":list.push(parse(true,1,true)[0]+"&");break;case"L":{i++;var end=func.indexOf("E",i);var size=end-i;list.push(func.substr(i,size));i+=size+2;break};case"A":{var size=parseInt(func.substr(i));i+=size.toString().length;if(func[i]!=="_")throw"?";i++;list.push(parse(true,1,true)[0]+" ["+size+"]");break};case"E":break paramLoop;default:ret+="?"+c;break paramLoop}}}if(!allowVoid&&list.length===1&&list[0]==="void")list=[];if(rawList){if(ret){list.push(ret+"?")}return list}else{return ret+flushList()}}var parsed=func;try{if(func=="Object._main"||func=="_main"){return"main()"}if(typeof func==="number")func=Pointer_stringify(func);if(func[0]!=="_")return func;if(func[1]!=="_")return func;if(func[2]!=="Z")return func;switch(func[3]){case"n":return"operator new()";case"d":return"operator delete()"}parsed=parse()}catch(e){parsed+="?"}if(parsed.indexOf("?")>=0&&!hasLibcxxabi){Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling")}return parsed}function demangleAll(text){return text.replace(/__Z[\w\d_]+/g,(function(x){var y=demangle(x);return x===y?x:x+" ["+y+"]"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}function stackTrace(){return demangleAll(jsStackTrace())}Module["stackTrace"]=stackTrace;var PAGE_SIZE=4096;function alignMemoryPage(x){if(x%4096>0){x+=4096-x%4096}return x}var HEAP;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;var STATIC_BASE=0,STATICTOP=0,staticSealed=false;var STACK_BASE=0,STACKTOP=0,STACK_MAX=0;var DYNAMIC_BASE=0,DYNAMICTOP=0;function enlargeMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value "+TOTAL_MEMORY+", (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.")}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||16777216;var totalMemory=64*1024;while(totalMemory<TOTAL_MEMORY||totalMemory<2*TOTAL_STACK){if(totalMemory<16*1024*1024){totalMemory*=2}else{totalMemory+=16*1024*1024}}if(totalMemory!==TOTAL_MEMORY){Module.printErr("increasing TOTAL_MEMORY to "+totalMemory+" to be compliant with the asm.js spec (and given that TOTAL_STACK="+TOTAL_STACK+")");TOTAL_MEMORY=totalMemory}assert(typeof Int32Array!=="undefined"&&typeof Float64Array!=="undefined"&&!!(new Int32Array(1))["subarray"]&&!!(new Int32Array(1))["set"],"JS engine does not provide full typed array support");var buffer;buffer=new ArrayBuffer(TOTAL_MEMORY);HEAP8=new Int8Array(buffer);HEAP16=new Int16Array(buffer);HEAP32=new Int32Array(buffer);HEAPU8=new Uint8Array(buffer);HEAPU16=new Uint16Array(buffer);HEAPU32=new Uint32Array(buffer);HEAPF32=new Float32Array(buffer);HEAPF64=new Float64Array(buffer);HEAP32[0]=255;assert(HEAPU8[0]===255&&HEAPU8[3]===0,"Typed arrays 2 must be run on a little-endian system");Module["HEAP"]=HEAP;Module["buffer"]=buffer;Module["HEAP8"]=HEAP8;Module["HEAP16"]=HEAP16;Module["HEAP32"]=HEAP32;Module["HEAPU8"]=HEAPU8;Module["HEAPU16"]=HEAPU16;Module["HEAPU32"]=HEAPU32;Module["HEAPF32"]=HEAPF32;Module["HEAPF64"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Runtime.dynCall("v",func)}else{Runtime.dynCall("vi",func,[callback.arg])}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}Module["addOnPreRun"]=Module.addOnPreRun=addOnPreRun;function addOnInit(cb){__ATINIT__.unshift(cb)}Module["addOnInit"]=Module.addOnInit=addOnInit;function addOnPreMain(cb){__ATMAIN__.unshift(cb)}Module["addOnPreMain"]=Module.addOnPreMain=addOnPreMain;function addOnExit(cb){__ATEXIT__.unshift(cb)}Module["addOnExit"]=Module.addOnExit=addOnExit;function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}Module["addOnPostRun"]=Module.addOnPostRun=addOnPostRun;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}Module["intArrayFromString"]=intArrayFromString;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}Module["intArrayToString"]=intArrayToString;function writeStringToMemory(string,buffer,dontAddNull){var array=intArrayFromString(string,dontAddNull);var i=0;while(i<array.length){var chr=array[i];HEAP8[buffer+i>>0]=chr;i=i+1}}Module["writeStringToMemory"]=writeStringToMemory;function writeArrayToMemory(array,buffer){for(var i=0;i<array.length;i++){HEAP8[buffer++>>0]=array[i]}}Module["writeArrayToMemory"]=writeArrayToMemory;function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}Module["writeAsciiToMemory"]=writeAsciiToMemory;function unSign(value,bits,ignore){if(value>=0){return value}return bits<=32?2*Math.abs(1<<bits-1)+value:Math.pow(2,bits)+value}function reSign(value,bits,ignore){if(value<=0){return value}var half=bits<=32?Math.abs(1<<bits-1):Math.pow(2,bits-1);if(value>=half&&(bits<=32||value>half)){value=-2*half+value}return value}if(!Math["imul"]||Math["imul"](4294967295,5)!==-5)Math["imul"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math["imul"];if(!Math["clz32"])Math["clz32"]=(function(x){x=x>>>0;for(var i=0;i<32;i++){if(x&1<<31-i)return i}return 32});Math.clz32=Math["clz32"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_min=Math.min;var Math_clz32=Math.clz32;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}Module["addRunDependency"]=addRunDependency;function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["removeRunDependency"]=removeRunDependency;Module["preloadedImages"]={};Module["preloadedAudios"]={};var memoryInitializer=null;var ASM_CONSTS=[];STATIC_BASE=8;STATICTOP=STATIC_BASE+8528;__ATINIT__.push({func:(function(){__GLOBAL__sub_I_MultipitchValidation_Emscripten_cpp()})},{func:(function(){__GLOBAL__sub_I_bind_cpp()})});allocate([32,13,0,0,248,1,0,0,8,14,0,0,192,1,0,0,0,0,0,0,8,0,0,0,8,14,0,0,136,1,0,0,1,0,0,0,8,0,0,0,105,105,0,0,0,0,0,0,118,0,0,0,0,0,0,0,77,117,108,116,105,112,105,116,99,104,86,97,108,105,100,97,116,105,111,110,69,109,115,99,114,105,112,116,101,110,87,114,97,112,112,101,114,0,0,0,118,105,0,0,0,0,0,0,16,0,0,0,208,12,0,0,208,12,0,0,0,13,0,0,208,12,0,0,0,0,0,0,105,105,105,105,102,105,0,0,115,101,116,80,111,105,110,116,101,114,84,111,86,97,108,105,100,97,116,105,111,110,82,101,115,117,108,116,115,0,0,0,64,12,0,0,16,0,0,0,208,12,0,0,0,0,0,0,118,105,105,105,0,0,0,0,115,101,116,80,111,105,110,116,101,114,84,111,65,99,116,105,118,105,116,121,82,101,115,117,108,116,115,0,0,0,0,0,115,101,116,80,111,105,110,116,101,114,84,111,86,97,108,105,100,97,116,105,111,110,67,111,110,102,105,100,101,110,99,101,115,0,0,0,0,0,0,0,115,101,116,82,101,102,101,114,101,110,99,101,80,105,116,99,104,101,115,0,0,0,0,0,64,12,0,0,16,0,0,0,208,12,0,0,208,12,0,0,118,105,105,105,105,0,0,0,112,114,111,99,101,115,115,0,208,12,0,0,16,0,0,0,208,12,0,0,208,12,0,0,105,105,105,105,105,0,0,0,109,97,120,105,109,117,109,65,108,108,111,119,101,100,78,111,116,101,115,0,0,0,0,0,208,12,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,78,49,48,76,101,97,114,110,70,105,101,108,100,51,55,77,117,108,116,105,112,105,116,99,104,86,97,108,105,100,97,116,105,111,110,69,109,115,99,114,105,112,116,101,110,87,114,97,112,112,101,114,69,0,80,78,49,48,76,101,97,114,110,70,105,101,108,100,51,55,77,117,108,116,105,112,105,116,99,104,86,97,108,105,100,97,116,105,111,110,69,109,115,99,114,105,112,116,101,110,87,114,97,112,112,101,114,69,0,0,78,49,48,76,101,97,114,110,70,105,101,108,100,51,55,77,117,108,116,105,112,105,116,99,104,86,97,108,105,100,97,116,105,111,110,69,109,115,99,114,105,112,116,101,110,87,114,97,112,112,101,114,69,0,0,0,78,117,109,98,101,114,32,111,102,32,102,114,97,109,101,115,32,116,111,32,111,110,115,101,116,32,100,101,99,105,115,105,111,110,32,109,117,115,116,32,98,101,32,115,109,97,108,108,101,114,32,116,104,97,110,32,110,117,109,98,101,114,32,111,102,32,102,114,97,109,101,115,32,102,111,114,32,109,97,106,111,114,105,116,121,32,118,111,116,105,110,103,33,0,0,0,78,111,110,45,118,97,108,105,100,32,115,97,109,112,108,101,32,114,97,116,101,33,0,0,0,0,0,0,192,2,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,72,13,0,0,16,3,0,0,232,2,0,0,0,0,0,0,0,0,0,0,232,2,0,0,1,0,0,0,4,0,0,0,3,0,0,0,1,0,0,0,32,13,0,0,240,2,0,0,78,52,117,116,105,108,49,52,82,105,110,103,66,117,102,102,101,114,66,97,115,101,73,102,69,69,0,0,0,0,0,0,78,52,117,116,105,108,49,55,79,118,101,114,108,97,112,82,105,110,103,66,117,102,102,101,114,73,102,69,69,0,0,0,72,97,110,110,105,110,103,0,68,105,102,102,72,97,110,110,105,110,103,0,0,0,0,0,78,111,110,45,118,97,108,105,100,32,119,105,110,100,111,119,32,116,121,112,101,33,0,0,118,111,105,100,0,0,0,0,98,111,111,108,0,0,0,0,99,104,97,114,0,0,0,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,115,104,111,114,116,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,105,110,116,0,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,108,111,110,103,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,102,108,111,97,116,0,0,0,100,111,117,98,108,101,0,0,168,13,0,0,216,9,0,0,0,0,0,0,1,0,0,0,104,9,0,0,0,0,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,168,13,0,0,152,9,0,0,0,0,0,0,1,0,0,0,104,9,0,0,0,0,0,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,0,0,0,0,168,13,0,0,40,9,0,0,0,0,0,0,1,0,0,0,104,9,0,0,0,0,0,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,32,13,0,0,16,9,0,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,32,13,0,0,240,8,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,0,0,32,13,0,0,208,8,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,32,13,0,0,176,8,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,32,13,0,0,144,8,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,0,32,13,0,0,112,8,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,32,13,0,0,80,8,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,0,0,0,32,13,0,0,48,8,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,0,0,32,13,0,0,16,8,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,0,0,32,13,0,0,240,7,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,0,0,0,0,0,0,32,13,0,0,208,7,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,0,32,13,0,0,176,7,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,32,13,0,0,144,7,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,0,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,32,13,0,0,112,9,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,0,0,64,10,0,0,5,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,72,13,0,0,48,10,0,0,104,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,32,13,0,0,88,10,0,0,0,0,0,0,152,10,0,0,7,0,0,0,8,0,0,0,2,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,72,13,0,0,136,10,0,0,104,10,0,0,0,0,0,0,0,0,0,0,216,10,0,0,7,0,0,0,9,0,0,0,2,0,0,0,0,0,0,0,83,116,49,54,105,110,118,97,108,105,100,95,97,114,103,117,109,101,110,116,0,0,0,0,72,13,0,0,192,10,0,0,152,10,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,32,13,0,0,232,10,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,72,13,0,0,0,11,0,0,248,10,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,72,13,0,0,56,11,0,0,40,11,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,72,13,0,0,152,11,0,0,40,11,0,0,0,0,0,0,72,13,0,0,112,11,0,0,192,11,0,0,0,0,0,0,0,0,0,0,40,12,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,1,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,72,13,0,0,0,12,0,0,40,11,0,0,0,0,0,0,118,0,0,0,0,0,0,0,232,11,0,0,56,12,0,0,68,110,0,0,0,0,0,0,232,11,0,0,72,12,0,0,98,0,0,0,0,0,0,0,232,11,0,0,88,12,0,0,99,0,0,0,0,0,0,0,232,11,0,0,104,12,0,0,104,0,0,0,0,0,0,0,232,11,0,0,120,12,0,0,97,0,0,0,0,0,0,0,232,11,0,0,136,12,0,0,115,0,0,0,0,0,0,0,232,11,0,0,152,12,0,0,116,0,0,0,0,0,0,0,232,11,0,0,168,12,0,0,105,0,0,0,0,0,0,0,232,11,0,0,184,12,0,0,106,0,0,0,0,0,0,0,232,11,0,0,200,12,0,0,108,0,0,0,0,0,0,0,232,11,0,0,216,12,0,0,109,0,0,0,0,0,0,0,232,11,0,0,232,12,0,0,102,0,0,0,0,0,0,0,232,11,0,0,248,12,0,0,100,0,0,0,0,0,0,0,232,11,0,0,8,13,0,0,0,0,0,0,96,11,0,0,10,0,0,0,14,0,0,0,12,0,0,0,13,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,144,13,0,0,10,0,0,0,15,0,0,0,12,0,0,0,13,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,72,13,0,0,104,13,0,0,96,11,0,0,0,0,0,0,0,0,0,0,240,13,0,0,10,0,0,0,16,0,0,0,12,0,0,0,13,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,72,13,0,0,200,13,0,0,96,11,0,0,0,0,0,0,0,0,0,0,208,11,0,0,10,0,0,0,17,0,0,0,12,0,0,0,13,0,0,0,3,0,0,0,0,0,0,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,0,67,58,92,80,114,111,103,114,97,109,32,70,105,108,101,115,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,52,46,49,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,118,101,99,116,111,114,0,0,0,0,0,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,0,0,0,67,58,92,80,114,111,103,114,97,109,32,70,105,108,101,115,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,52,46,49,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,115,116,114,105,110,103,0,0,0,0,0,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,0,0,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,93,61,127,102,158,160,230,63,0,0,0,0,0,136,57,61,68,23,117,250,82,176,230,63,0,0,0,0,0,0,216,60,254,217,11,117,18,192,230,63,0,0,0,0,0,120,40,189,191,118,212,221,220,207,230,63,0,0,0,0,0,192,30,61,41,26,101,60,178,223,230,63,0,0,0,0,0,0,216,188,227,58,89,152,146,239,230,63,0,0,0,0,0,0,188,188,134,147,81,249,125,255,230,63,0,0,0,0,0,216,47,189,163,45,244,102,116,15,231,63,0,0,0,0,0,136,44,189,195,95,236,232,117,31,231,63,0,0,0,0,0,192,19,61,5,207,234,134,130,47,231,63,0,0,0,0,0,48,56,189,82,129,165,72,154,63,231,63,0,0,0,0,0,192,0,189,252,204,215,53,189,79,231,63,0,0,0,0,0,136,47,61,241,103,66,86,235,95,231,63,0,0,0,0,0,224,3,61,72,109,171,177,36,112,231,63,0,0,0,0,0,208,39,189,56,93,222,79,105,128,231,63,0,0,0,0,0,0,221,188,0,29,172,56,185,144,231,63,0,0,0,0,0,0,227,60,120,1,235,115,20,161,231,63,0,0,0,0,0,0,237,188,96,208,118,9,123,177,231,63,0,0,0,0,0,64,32,61,51,193,48,1,237,193,231,63,0,0,0,0,0,0,160,60,54,134,255,98,106,210,231,63,0,0,0,0,0,144,38,189,59,78,207,54,243,226,231,63,0,0,0,0,0,224,2,189,232,195,145,132,135,243,231,63,0,0,0,0,0,88,36,189,78,27,62,84,39,4,232,63,0,0,0,0,0,0,51,61,26,7,209,173,210,20,232,63,0,0,0,0,0,0,15,61,126,205,76,153,137,37,232,63,0,0,0,0,0,192,33,189,208,66,185,30,76,54,232,63,0,0,0,0,0,208,41,61,181,202,35,70,26,71,232,63,0,0,0,0,0,16,71,61,188,91,159,23,244,87,232,63,0,0,0,0,0,96,34,61,175,145,68,155,217,104,232,63,0,0,0,0,0,196,50,189,149,163,49,217,202,121,232,63,0,0,0,0,0,0,35,189,184,101,138,217,199,138,232,63,0,0,0,0,0,128,42,189,0,88,120,164,208,155,232,63,0,0,0,0,0,0,237,188,35,162,42,66,229,172,232,63,0,0,0,0,0,40,51,61,250,25,214,186,5,190,232,63,0,0,0,0,0,180,66,61,131,67,181,22,50,207,232,63,0,0,0,0,0,208,46,189,76,102,8,94,106,224,232,63,0,0,0,0,0,80,32,189,7,120,21,153,174,241,232,63,0,0,0,0,0,40,40,61,14,44,40,208,254,2,233,63,0,0,0,0,0,176,28,189,150,255,145,11,91,20,233,63,0,0,0,0,0,224,5,189,249,47,170,83,195,37,233,63,0,0,0,0,0,64,245,60,74,198,205,176,55,55,233,63,0,0,0,0,0,32,23,61,174,152,95,43,184,72,233,63,0,0,0,0,0,0,9,189,203,82,200,203,68,90,233,63,0,0,0,0,0,104,37,61,33,111,118,154,221,107,233,63,0,0,0,0,0,208,54,189,42,78,222,159,130,125,233,63,0,0,0,0,0,0,1,189,163,35,122,228,51,143,233,63,0,0,0,0,0,0,45,61,4,6,202,112,241,160,233,63,0,0,0,0,0,164,56,189,137,255,83,77,187,178,233,63,0,0,0,0,0,92,53,61,91,241,163,130,145,196,233,63,0,0,0,0,0,184,38,61,197,184,75,25,116,214,233,63,0,0,0,0,0,0,236,188,142,35,227,25,99,232,233,63,0,0,0,0,0,208,23,61,2,243,7,141,94,250,233,63,0,0,0,0,0,64,22,61,77,229,93,123,102,12,234,63,0,0,0,0,0,0,245,188,246,184,142,237,122,30,234,63,0,0,0,0,0,224,9,61,39,46,74,236,155,48,234,63,0,0,0,0,0,216,42,61,93,10,70,128,201,66,234,63,0,0,0,0,0,240,26,189,155,37,62,178,3,85,234,63,0,0,0,0,0,96,11,61,19,98,244,138,74,103,234,63,0,0,0,0,0,136,56,61,167,179,48,19,158,121,234,63,0,0,0,0,0,32,17,61,141,46,193,83,254,139,234,63,0,0,0,0,0,192,6,61,210,252,121,85,107,158,234,63,0,0,0,0,0,184,41,189,184,111,53,33,229,176,234,63,0,0,0,0,0,112,43,61,129,243,211,191,107,195,234,63,0,0,0,0,0,0,217,60,128,39,60,58,255,213,234,63,0,0,0,0,0,0,228,60,163,210,90,153,159,232,234,63,0,0,0,0,0,144,44,189,103,243,34,230,76,251,234,63,0,0,0,0,0,80,22,61,144,183,141,41,7,14,235,63,0,0,0,0,0,212,47,61,169,137,154,108,206,32,235,63,0,0,0,0,0,112,18,61,75,26,79,184,162,51,235,63,0,0,0,0,0,71,77,61,231,71,183,21,132,70,235,63,0,0,0,0,0,56,56,189,58,89,229,141,114,89,235,63,0,0,0,0,0,0,152,60,106,197,241,41,110,108,235,63,0,0,0,0,0,208,10,61,80,94,251,242,118,127,235,63,0,0,0,0,0,128,222,60,178,73,39,242,140,146,235,63,0,0,0,0,0,192,4,189,3,6,161,48,176,165,235,63,0,0,0,0,0,112,13,189,102,111,154,183,224,184,235,63,0,0,0,0,0,144,13,61,255,193,75,144,30,204,235,63,0,0,0,0,0,160,2,61,111,161,243,195,105,223,235,63,0,0,0,0,0,120,31,189,184,29,215,91,194,242,235,63,0,0,0,0,0,160,16,189,233,178,65,97,40,6,236,63,0,0,0,0,0,64,17,189,224,82,133,221,155,25,236,63,0,0,0,0,0,224,11,61,238,100,250,217,28,45,236,63,0,0,0,0,0,64,9,189,47,208,255,95,171,64,236,63,0,0,0,0,0,208,14,189,21,253,250,120,71,84,236,63,0,0,0,0,0,102,57,61,203,208,87,46,241,103,236,63,0,0,0,0,0,16,26,189,182,193,136,137,168,123,236,63,0,0,0,0,128,69,88,189,51,231,6,148,109,143,236,63,0,0,0,0,0,72,26,189,223,196,81,87,64,163,236,63,0,0,0,0,0,0,203,60,148,144,239,220,32,183,236,63,0,0,0,0,0,64,1,61,137,22,109,46,15,203,236,63,0,0,0,0,0,32,240,60,18,196,93,85,11,223,236,63,0,0,0,0,0,96,243,60,59,171,91,91,21,243,236,63,0,0,0,0,0,144,6,189,188,137,7,74,45,7,237,63,0,0,0,0,0,160,9,61,250,200,8,43,83,27,237,63,0,0,0,0,0,224,21,189,133,138,13,8,135,47,237,63,0,0,0,0,0,40,29,61,3,162,202,234,200,67,237,63,0,0,0,0,0,160,1,61,145,164,251,220,24,88,237,63,0,0,0,0,0,0,223,60,161,230,98,232,118,108,237,63,0,0,0,0,0,160,3,189,78,131,201,22,227,128,237,63,0,0,0,0,0,216,12,189,144,96,255,113,93,149,237,63,0,0,0,0,0,192,244,60,174,50,219,3,230,169,237,63,0,0,0,0,0,144,255,60,37,131,58,214,124,190,237,63,0,0,0,0,0,128,233,60,69,180,1,243,33,211,237,63,0,0,0,0,0,32,245,188,191,5,28,100,213,231,237,63,0,0,0,0,0,112,29,189,236,154,123,51,151,252,237,63,0,0,0,0,0,20,22,189,94,125,25,107,103,17,238,63,0,0,0,0,0,72,11,61,231,163,245,20,70,38,238,63,0,0,0,0,0,206,64,61,92,238,22,59,51,59,238,63,0,0,0,0,0,104,12,61,180,63,139,231,46,80,238,63,0,0,0,0,0,48,9,189,104,109,103,36,57,101,238,63,0,0,0,0,0,0,229,188,68,76,199,251,81,122,238,63,0,0,0,0,0,248,7,189,38,183,205,119,121,143,238,63,0,0,0,0,0,112,243,188,232,144,164,162,175,164,238,63,0,0,0,0,0,208,229,60,228,202,124,134,244,185,238,63,0,0,0,0,0,26,22,61,13,104,142,45,72,207,238,63,0,0,0,0,0,80,245,60,20,133,24,162,170,228,238,63,0,0,0,0,0,64,198,60,19,90,97,238,27,250,238,63,0,0,0,0,0,128,238,188,6,65,182,28,156,15,239,63,0,0,0,0,0,136,250,188,99,185,107,55,43,37,239,63,0,0,0,0,0,144,44,189,117,114,221,72,201,58,239,63,0,0,0,0,0,0,170,60,36,69,110,91,118,80,239,63,0,0,0,0,0,240,244,188,253,68,136,121,50,102,239,63,0,0,0,0,0,128,202,60,56,190,156,173,253,123,239,63,0,0,0,0,0,188,250,60,130,60,36,2,216,145,239,63,0,0,0,0,0,96,212,188,142,144,158,129,193,167,239,63,0,0,0,0,0,12,11,189,17,213,146,54,186,189,239,63,0,0,0,0,0,224,192,188,148,113,143,43,194,211,239,63,0,0,0,0,128,222,16,189,238,35,42,107,217,233,239,63,0,0,0,0,0,67,238,60,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,190,188,90,250,26,11,240,63,0,0,0,0,0,64,179,188,3,51,251,169,61,22,240,63,0,0,0,0,0,23,18,189,130,2,59,20,104,33,240,63,0,0,0,0,0,64,186,60,108,128,119,62,154,44,240,63,0,0,0,0,0,152,239,60,202,187,17,46,212,55,240,63,0,0,0,0,0,64,199,188,137,127,110,232,21,67,240,63,0,0,0,0,0,48,216,60,103,84,246,114,95,78,240,63,0,0,0,0,0,63,26,189,90,133,21,211,176,89,240,63,0,0,0,0,0,132,2,189,149,31,60,14,10,101,240,63,0,0,0,0,0,96,241,60,26,247,221,41,107,112,240,63,0,0,0,0,0,36,21,61,45,168,114,43,212,123,240,63,0,0,0,0,0,160,233,188,208,155,117,24,69,135,240,63,0,0,0,0,0,64,230,60,200,7,102,246,189,146,240,63,0,0,0,0,0,120,0,189,131,243,198,202,62,158,240,63,0,0,0,0,0,0,152,188,48,57,31,155,199,169,240,63,0,0,0,0,0,160,255,60,252,136,249,108,88,181,240,63,0,0,0,0,0,200,250,188,138,108,228,69,241,192,240,63,0,0,0,0,0,192,217,60,22,72,114,43,146,204,240,63,0,0,0,0,0,32,5,61,216,93,57,35,59,216,240,63,0,0,0,0,0,208,250,188,243,209,211,50,236,227,240,63,0,0,0,0,0,172,27,61,166,169,223,95,165,239,240,63,0,0,0,0,0,232,4,189,240,210,254,175,102,251,240,63,0,0,0,0,0,48,13,189,75,35,215,40,48,7,241,63,0,0,0,0,0,80,241,60,91,91,18,208,1,19,241,63,0,0,0,0,0,0,236,60,249,42,94,171,219,30,241,63,0,0,0,0,0,188,22,61,213,49,108,192,189,42,241,63,0,0,0,0,0,64,232,60,125,4,242,20,168,54,241,63,0,0,0,0,0,208,14,189,233,45,169,174,154,66,241,63,0,0,0,0,0,224,232,60,56,49,79,147,149,78,241,63,0,0,0,0,0,64,235,60,113,142,165,200,152,90,241,63,0,0,0,0,0,48,5,61,223,195,113,84,164,102,241,63,0,0,0,0,0,56,3,61,17,82,125,60,184,114,241,63,0,0,0,0,0,212,40,61,159,187,149,134,212,126,241,63,0,0,0,0,0,208,5,189,147,141,140,56,249,138,241,63,0,0,0,0,0,136,28,189,102,93,55,88,38,151,241,63,0,0,0,0,0,240,17,61,167,203,111,235,91,163,241,63,0,0,0,0,0,72,16,61,227,135,19,248,153,175,241,63,0,0,0,0,0,57,71,189,84,93,4,132,224,187,241,63,0,0,0,0,0,228,36,61,67,28,40,149,47,200,241,63,0,0,0,0,0,32,10,189,178,185,104,49,135,212,241,63,0,0,0,0,0,128,227,60,49,64,180,94,231,224,241,63,0,0,0,0,0,192,234,60,56,217,252,34,80,237,241,63,0,0,0,0,0,144,1,61,247,205,56,132,193,249,241,63,0,0,0,0,0,120,27,189,143,141,98,136,59,6,242,63,0,0,0,0,0,148,45,61,30,168,120,53,190,18,242,63,0,0,0,0,0,0,216,60,65,221,125,145,73,31,242,63,0,0,0,0,0,52,43,61,35,19,121,162,221,43,242,63,0,0,0,0,0,248,25,61,231,97,117,110,122,56,242,63,0,0,0,0,0,200,25,189,39,20,130,251,31,69,242,63,0,0,0,0,0,48,2,61,2,166,178,79,206,81,242,63,0,0,0,0,0,72,19,189,176,206,30,113,133,94,242,63,0,0,0,0,0,112,18,61,22,125,226,101,69,107,242,63,0,0,0,0,0,208,17,61,15,224,29,52,14,120,242,63,0,0,0,0,0,238,49,61,62,99,245,225,223,132,242,63,0,0,0,0,0,192,20,189,48,187,145,117,186,145,242,63,0,0,0,0,0,216,19,189,9,223,31,245,157,158,242,63,0,0,0,0,0,176,8,61,155,14,209,102,138,171,242,63,0,0,0,0,0,124,34,189,58,218,218,208,127,184,242,63,0,0,0,0,0,52,42,61,249,26,119,57,126,197,242,63,0,0,0,0,0,128,16,189,217,2,228,166,133,210,242,63,0,0,0,0,0,208,14,189,121,21,100,31,150,223,242,63,0,0,0,0,0,32,244,188,207,46,62,169,175,236,242,63,0,0,0,0,0,152,36,189,34,136,189,74,210,249,242,63,0,0,0,0,0,48,22,189,37,182,49,10,254,6,243,63,0,0,0,0,0,54,50,189,11,165,238,237,50,20,243,63,0,0,0,0,128,223,112,189,184,215,76,252,112,33,243,63,0,0,0,0,0,72,34,189,162,233,168,59,184,46,243,63,0,0,0,0,0,152,37,189,102,23,100,178,8,60,243,63,0,0,0,0,0,208,30,61,39,250,227,102,98,73,243,63,0,0,0,0,0,0,220,188,15,159,146,95,197,86,243,63,0,0,0,0,0,216,48,189,185,136,222,162,49,100,243,63,0,0,0,0,0,200,34,61,57,170,58,55,167,113,243,63,0,0,0,0,0,96,32,61,254,116,30,35,38,127,243,63,0,0,0,0,0,96,22,189,56,216,5,109,174,140,243,63,0,0,0,0,0,224,10,189,195,62,113,27,64,154,243,63,0,0,0,0,0,114,68,189,32,160,229,52,219,167,243,63,0,0,0,0,0,32,8,61,149,110,236,191,127,181,243,63,0,0,0,0,0,128,62,61,242,168,19,195,45,195,243,63,0,0,0,0,0,128,239,60,34,225,237,68,229,208,243,63,0,0,0,0,0,160,23,189,187,52,18,76,166,222,243,63,0,0,0,0,0,48,38,61,204,78,28,223,112,236,243,63,0,0,0,0,0,166,72,189,140,126,172,4,69,250,243,63,0,0,0,0,0,220,60,189,187,160,103,195,34,8,244,63,0,0,0,0,0,184,37,61,149,46,247,33,10,22,244,63,0,0,0,0,0,192,30,61,70,70,9,39,251,35,244,63,0,0,0,0,0,96,19,189,32,169,80,217,245,49,244,63,0,0,0,0,0,152,35,61,235,185,132,63,250,63,244,63,0,0,0,0,0,0,250,60,25,137,97,96,8,78,244,63,0,0,0,0,0,192,246,188,1,210,167,66,32,92,244,63,0,0,0,0,0,192,11,189,22,0,29,237,65,106,244,63,0,0,0,0,0,128,18,189,38,51,139,102,109,120,244,63,0,0,0,0,0,224,48,61,0,60,193,181,162,134,244,63,0,0,0,0,0,64,45,189,4,175,146,225,225,148,244,63,0,0,0,0,0,32,12,61,114,211,215,240,42,163,244,63,0,0,0,0,0,80,30,189,1,184,109,234,125,177,244,63,0,0,0,0,0,128,7,61,225,41,54,213,218,191,244,63,0,0,0,0,0,128,19,189,50,193,23,184,65,206,244,63,0,0,0,0,0,128,0,61,219,221,253,153,178,220,244,63,0,0,0,0,0,112,44,61,150,171,216,129,45,235,244,63,0,0,0,0,0,224,28,189,2,45,157,118,178,249,244,63,0,0,0,0,0,32,25,61,193,49,69,127,65,8,245,63,0,0,0,0,0,192,8,189,42,102,207,162,218,22,245,63,0,0,0,0,0,0,250,188,234,81,63,232,125,37,245,63,0,0,0,0,0,8,74,61,218,78,157,86,43,52,245,63,0,0,0,0,0,216,38,189,26,172,246,244,226,66,245,63,0,0,0,0,0,68,50,189,219,148,93,202,164,81,245,63,0,0,0,0,0,60,72,61,107,17,233,221,112,96,245,63,0,0,0,0,0,176,36,61,222,41,181,54,71,111,245,63,0,0,0,0,0,90,65,61,14,196,226,219,39,126,245,63,0,0,0,0,0,224,41,189,111,199,151,212,18,141,245,63,0,0,0,0,0,8,35,189,76,11,255,39,8,156,245,63,0,0,0,0,0,236,77,61,39,84,72,221,7,171,245,63,0,0,0,0,0,0,196,188,244,122,168,251,17,186,245,63,0,0,0,0,0,8,48,61,11,70,89,138,38,201,245,63,0,0,0,0,0,200,38,189,63,142,153,144,69,216,245,63,0,0,0,0,0,154,70,61,225,32,173,21,111,231,245,63,0,0,0,0,0,64,27,189,202,235,220,32,163,246,245,63,0,0,0,0,0,112,23,61,184,220,118,185,225,5,246,63,0,0,0,0,0,248,38,61,21,247,205,230,42,21,246,63,0,0,0,0,0,0,1,61,49,85,58,176,126,36,246,63,0,0,0,0,0,208,21,189,181,41,25,29,221,51,246,63,0,0,0,0,0,208,18,189,19,195,204,52,70,67,246,63,0,0,0,0,0,128,234,188,250,142,188,254,185,82,246,63,0,0,0,0,0,96,40,189,151,51,85,130,56,98,246,63,0,0,0,0,0,254,113,61,142,50,8,199,193,113,246,63,0,0,0,0,0,32,55,189,126,169,76,212,85,129,246,63,0,0,0,0,0,128,230,60,113,148,158,177,244,144,246,63,0,0,0,0,0,120,41,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE);var tempDoublePtr=Runtime.alignMemory(allocate(12,"i8",ALLOC_STATIC),8);assert(tempDoublePtr%8==0);function copyTempFloat(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3]}function copyTempDouble(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3];HEAP8[tempDoublePtr+4]=HEAP8[ptr+4];HEAP8[tempDoublePtr+5]=HEAP8[ptr+5];HEAP8[tempDoublePtr+6]=HEAP8[ptr+6];HEAP8[tempDoublePtr+7]=HEAP8[ptr+7]}var _cosf=Math_cos;var _fabsf=Math_abs;var _floorf=Math_floor;function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes}var embind_charCodes=undefined;function readLatin1String(ptr){var ret="";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return"_unknown"}name=name.replace(/[^a-zA-Z0-9_]/g,"$");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return"_"+name}else{return name}}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return(new Function("body","return function "+name+"() {\n"+'    "use strict";'+"    return body.apply(this, arguments);\n"+"};\n"))(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,(function(message){this.name=errorName;this.message=message;var stack=(new Error(message)).stack;if(stack!==undefined){this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,"")}}));errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=(function(){if(this.message===undefined){return this.name}else{return this.name+": "+this.message}});return errorClass}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach((function(type){typeDependencies[type]=dependentTypes}));function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError("Mismatched type converter count")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach((function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push((function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}}))}}));if(0===unregisteredTypes.length){onComplete(typeConverters)}}function registerType(rawType,registeredInstance,options){options=options||{};if(!("argPackAdvance"in registeredInstance)){throw new TypeError("registerType registeredInstance requires argPackAdvance")}var name=registeredInstance.name;if(!rawType){throwBindingError('type "'+name+'" must have a positive integer typeid pointer')}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError("Cannot register type '"+name+"' twice")}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach((function(cb){cb()}))}}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,"argPackAdvance":0,"fromWireType":(function(){return undefined}),"toWireType":(function(destructors,o){return undefined})})}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var ptr in EXCEPTIONS.infos){var info=EXCEPTIONS.infos[ptr];if(info.adjusted===adjusted){return ptr}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0){if(info.destructor){Runtime.dynCall("vi",info.destructor,[ptr])}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr));throw ptr+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(asm["setTempRet0"](0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(asm["setTempRet0"](0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module["___cxa_is_pointer_type"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module["___cxa_can_catch"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted=thrown;return(asm["setTempRet0"](typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(asm["setTempRet0"](throwntype),thrown)|0}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:ptr,type:type,destructor:destructor,refcount:0};EXCEPTIONS.last=ptr;if(!("uncaught_exception"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}Module["_memset"]=_memset;var _BDtoILow=true;function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":(function(wt){return!!wt}),"toWireType":(function(destructors,o){return o?trueValue:falseValue}),"argPackAdvance":8,"readValueFromPointer":(function(pointer){var heap;if(size===1){heap=HEAP8}else if(size===2){heap=HEAP16}else if(size===4){heap=HEAP32}else{throw new TypeError("Unknown boolean type size: "+name)}return this["fromWireType"](heap[pointer>>shift])}),destructorFunction:null})}Module["_bitshift64Shl"]=_bitshift64Shl;function _abort(){Module["abort"]()}function _free(){}Module["_free"]=_free;function _malloc(bytes){var ptr=Runtime.dynamicAlloc(bytes+8);return ptr+8&4294967288}Module["_malloc"]=_malloc;function simpleReadValueFromPointer(pointer){return this["fromWireType"](HEAPU32[pointer>>2])}function __embind_register_std_string(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":(function(value){var length=HEAPU32[value>>2];var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i])}_free(value);return a.join("")}),"toWireType":(function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}function getTAElement(ta,index){return ta[index]}function getStringElement(string,index){return string.charCodeAt(index)}var getElement;if(value instanceof Uint8Array){getElement=getTAElement}else if(value instanceof Int8Array){getElement=getTAElement}else if(typeof value==="string"){getElement=getStringElement}else{throwBindingError("Cannot pass non-string to std::string")}var length=value.length;var ptr=_malloc(4+length);HEAPU32[ptr>>2]=length;for(var i=0;i<length;++i){var charCode=getElement(value,i);if(charCode>255){_free(ptr);throwBindingError("String has UTF-16 code units that do not fit in 8 bits")}HEAPU8[ptr+4+i]=charCode}if(destructors!==null){destructors.push(_free,ptr)}return ptr}),"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:(function(ptr){_free(ptr)})})}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var getHeap,shift;if(charSize===2){getHeap=(function(){return HEAPU16});shift=1}else if(charSize===4){getHeap=(function(){return HEAPU32});shift=2}registerType(rawType,{name:name,"fromWireType":(function(value){var HEAP=getHeap();var length=HEAPU32[value>>2];var a=new Array(length);var start=value+4>>shift;for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAP[start+i])}_free(value);return a.join("")}),"toWireType":(function(destructors,value){var HEAP=getHeap();var length=value.length;var ptr=_malloc(4+length*charSize);HEAPU32[ptr>>2]=length;var start=ptr+4>>shift;for(var i=0;i<length;++i){HEAP[start+i]=value.charCodeAt(i)}if(destructors!==null){destructors.push(_free,ptr)}return ptr}),"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:(function(ptr){_free(ptr)})})}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass}return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+" instance already deleted")}function ClassHandle_clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else{var clone=Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}});clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}}function runDestructor(handle){var $$=handle.$$;if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr)}else{$$.ptrType.registeredClass.rawDestructor($$.ptr)}}function ClassHandle_delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}this.$$.count.value-=1;var toDelete=0===this.$$.count.value;if(toDelete){runDestructor(this)}if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined}}function ClassHandle_isDeleted(){return!this.$$.ptr}var delayFunction=undefined;var deletionQueue=[];function flushPendingDeletes(){while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj["delete"]()}}function ClassHandle_deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes)}this.$$.deleteScheduled=true;return this}function init_ClassHandle(){ClassHandle.prototype["isAliasOf"]=ClassHandle_isAliasOf;ClassHandle.prototype["clone"]=ClassHandle_clone;ClassHandle.prototype["delete"]=ClassHandle_delete;ClassHandle.prototype["isDeleted"]=ClassHandle_isDeleted;ClassHandle.prototype["deleteLater"]=ClassHandle_deleteLater}function ClassHandle(){}var registeredPointers={};function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=(function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError("Function '"+humanName+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+proto[methodName].overloadTable+")!")}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)});proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError("Cannot register public name '"+name+"' twice")}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+numArguments+")!")}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError("Expected null or instance of "+desiredClass.name+", got an instance of "+ptrClass.name)}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass}return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}if(this.isSmartPointer){var ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr)}return ptr}else{return 0}}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError("Passing raw pointer to smart pointer is illegal")}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{var clonedHandle=handle["clone"]();ptr=this.rawShare(ptr,__emval_register((function(){clonedHandle["delete"]()})));if(destructors!==null){destructors.push(this.rawDestructor,ptr)}}break;default:throwBindingError("Unsupporting sharing policy")}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+handle.$$.ptrType.name+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function RegisteredPointer_getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr)}return ptr}function RegisteredPointer_destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr)}}function RegisteredPointer_deleteObject(handle){if(handle!==null){handle["delete"]()}}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)}function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k])}}return rv}function setDelayFunction(fn){delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes)}}function init_embind(){Module["getInheritedInstanceCount"]=getInheritedInstanceCount;Module["getLiveInheritedInstances"]=getLiveInheritedInstances;Module["flushPendingDeletes"]=flushPendingDeletes;Module["setDelayFunction"]=setDelayFunction}var registeredInstances={};function getBasestPointer(class_,ptr){if(ptr===undefined){throwBindingError("ptr should not be undefined")}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass}return ptr}function getInheritedInstance(class_,ptr){ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]}var _throwInternalError=undefined;function makeClassHandle(prototype,record){if(!record.ptrType||!record.ptr){throwInternalError("makeClassHandle requires ptr and ptrType")}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError("Both smartPtrType and smartPtr must be specified")}record.count={value:1};return Object.create(prototype,{$$:{value:record}})}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance["clone"]()}else{var rv=registeredInstance["clone"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType}else{toType=registeredPointerRecord.pointerType}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee;RegisteredPointer.prototype.destructor=RegisteredPointer_destructor;RegisteredPointer.prototype["argPackAdvance"]=8;RegisteredPointer.prototype["readValueFromPointer"]=simpleReadValueFromPointer;RegisteredPointer.prototype["deleteObject"]=RegisteredPointer_deleteObject;RegisteredPointer.prototype["fromWireType"]=RegisteredPointer_fromWireType}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this["toWireType"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null}else{this["toWireType"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null}}else{this["toWireType"]=genericPointerToWireType}}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError("Replacing nonexistant public symbol")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value}}function requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(dynCall){var args=[];for(var i=1;i<signature.length;++i){args.push("a"+i)}var name="dynCall_"+signature+"_"+rawFunction;var body="return function "+name+"("+args.join(", ")+") {\n";body+="    return dynCall(rawFunction"+(args.length?", ":"")+args.join(", ")+");\n";body+="};\n";return(new Function("dynCall","rawFunction",body))(dynCall,rawFunction)}var fp;if(Module["FUNCTION_TABLE_"+signature]!==undefined){fp=Module["FUNCTION_TABLE_"+signature][rawFunction]}else if(typeof FUNCTION_TABLE!=="undefined"){fp=FUNCTION_TABLE[rawFunction]}else{var dc=asm["dynCall_"+signature];if(dc===undefined){dc=asm["dynCall_"+signature.replace(/f/g,"d")];if(dc===undefined){throwBindingError("No dynCall invoker for signature: "+signature)}}fp=makeDynCaller(dc)}if(typeof fp!=="function"){throwBindingError("unknown function pointer with signature "+signature+": "+rawFunction)}return fp}var UnboundTypeError=undefined;function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){name=readLatin1String(name);getActualType=requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=requireFunction(upcastSignature,upcast)}if(downcast){downcast=requireFunction(downcastSignature,downcast)}rawDestructor=requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,(function(){throwUnboundTypeError("Cannot construct "+name+" due to unbound types",[baseClassRawType])}));whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],(function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype}else{basePrototype=ClassHandle.prototype}var constructor=createNamedFunction(legalFunctionName,(function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError("Use 'new' to construct "+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+" has no accessible constructor")}var body=registeredClass.constructor_body[arguments.length];if(undefined===body){throw new BindingError("Tried to invoke ctor of "+name+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(registeredClass.constructor_body).toString()+") parameters instead!")}return body.apply(this,arguments)}));var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+"*",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return[referenceConverter,pointerConverter,constPointerConverter]}))}Module["_strlen"]=_strlen;var _sqrtf=Math_sqrt;function ___assert_fail(condition,filename,line,func){ABORT=true;throw"Assertion failed: "+Pointer_stringify(condition)+", at: "+[filename?Pointer_stringify(filename):"unknown filename",line,func?Pointer_stringify(func):"unknown function"]+" at "+stackTrace()}var _floor=Math_floor;var _sqrt=Math_sqrt;function _embind_repr(v){if(v===null){return"null"}var t=typeof v;if(t==="object"||t==="array"||t==="function"){return v.toString()}else{return""+v}}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var shift=getShiftFromSize(size);var fromWireType=(function(value){return value});if(minRange===0){var bitshift=32-8*size;fromWireType=(function(value){return value<<bitshift>>>bitshift})}registerType(primitiveType,{name:name,"fromWireType":fromWireType,"toWireType":(function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}if(value<minRange||value>maxRange){throw new TypeError('Passing a number "'+_embind_repr(value)+'" from JS side to C/C++ side to an argument of type "'+name+'", which is outside the valid range ['+minRange+", "+maxRange+"]!")}return value|0}),"argPackAdvance":8,"readValueFromPointer":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null})}var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};var ___errno_state=0;function ___setErrNo(value){HEAP32[___errno_state>>2]=value;return value}var TTY={ttys:[],init:(function(){}),shutdown:(function(){}),register:(function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)}),stream_ops:{open:(function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}stream.tty=tty;stream.seekable=false}),close:(function(stream){stream.tty.ops.flush(stream.tty)}),flush:(function(stream){stream.tty.ops.flush(stream.tty)}),read:(function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(ERRNO_CODES.ENXIO)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead}),write:(function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(ERRNO_CODES.ENXIO)}for(var i=0;i<length;i++){try{stream.tty.ops.put_char(stream.tty,buffer[offset+i])}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}}if(length){stream.node.timestamp=Date.now()}return i})},default_tty_ops:{get_char:(function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=new Buffer(BUFSIZE);var bytesRead=0;var fd=process.stdin.fd;var usingDevice=false;try{fd=fs.openSync("/dev/stdin","r");usingDevice=true}catch(e){}bytesRead=fs.readSync(fd,buf,0,BUFSIZE,null);if(usingDevice){fs.closeSync(fd)}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}else{result=null}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()}),put_char:(function(tty,val){if(val===null||val===10){Module["print"](UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}}),flush:(function(tty){if(tty.output&&tty.output.length>0){Module["print"](UTF8ArrayToString(tty.output,0));tty.output=[]}})},default_tty1_ops:{put_char:(function(tty,val){if(val===null||val===10){Module["printErr"](UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}}),flush:(function(tty){if(tty.output&&tty.output.length>0){Module["printErr"](UTF8ArrayToString(tty.output,0));tty.output=[]}})}};var MEMFS={ops_table:null,mount:(function(mount){return MEMFS.createNode(null,"/",16384|511,0)}),createNode:(function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node}return node}),getFileDataAsRegularArray:(function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents}),getFileDataAsTypedArray:(function(node){if(!node.contents)return new Uint8Array;if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)}),expandFileStorage:(function(node,newCapacity){if(node.contents&&node.contents.subarray&&newCapacity>node.contents.length){node.contents=MEMFS.getFileDataAsRegularArray(node);node.usedBytes=node.contents.length}if(!node.contents||node.contents.subarray){var prevCapacity=node.contents?node.contents.buffer.byteLength:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)|0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return}if(!node.contents&&newCapacity>0)node.contents=[];while(node.contents.length<newCapacity)node.contents.push(0)}),resizeFileStorage:(function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(new ArrayBuffer(newSize));if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize}),node_ops:{getattr:(function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr}),setattr:(function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}}),lookup:(function(parent,name){throw FS.genericErrors[ERRNO_CODES.ENOENT]}),mknod:(function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)}),rename:(function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir}),unlink:(function(parent,name){delete parent.contents[name]}),rmdir:(function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}delete parent.contents[name]}),readdir:(function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries}),symlink:(function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node}),readlink:(function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return node.link})},stream_ops:{read:(function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);assert(size>=0);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size}),write:(function(stream,buffer,offset,length,position,canOwn){if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=new Uint8Array(buffer.subarray(offset,offset+length));node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length}),llseek:(function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position}),allocate:(function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)}),mmap:(function(stream,buffer,offset,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&(contents.buffer===buffer||contents.buffer===buffer.buffer)){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<stream.node.usedBytes){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=_malloc(length);if(!ptr){throw new FS.ErrnoError(ERRNO_CODES.ENOMEM)}buffer.set(contents,ptr)}return{ptr:ptr,allocated:allocated}}),msync:(function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0})}};var IDBFS={dbs:{},indexedDB:(function(){if(typeof indexedDB!=="undefined")return indexedDB;var ret=null;if(typeof window==="object")ret=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;assert(ret,"IDBFS used, but indexedDB not supported");return ret}),DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:(function(mount){return MEMFS.mount.apply(null,arguments)}),syncfs:(function(mount,populate,callback){IDBFS.getLocalSet(mount,(function(err,local){if(err)return callback(err);IDBFS.getRemoteSet(mount,(function(err,remote){if(err)return callback(err);var src=populate?remote:local;var dst=populate?local:remote;IDBFS.reconcile(src,dst,callback)}))}))}),getDB:(function(name,callback){var db=IDBFS.dbs[name];if(db){return callback(null,db)}var req;try{req=IDBFS.indexedDB().open(name,IDBFS.DB_VERSION)}catch(e){return callback(e)}req.onupgradeneeded=(function(e){var db=e.target.result;var transaction=e.target.transaction;var fileStore;if(db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)){fileStore=transaction.objectStore(IDBFS.DB_STORE_NAME)}else{fileStore=db.createObjectStore(IDBFS.DB_STORE_NAME)}if(!fileStore.indexNames.contains("timestamp")){fileStore.createIndex("timestamp","timestamp",{unique:false})}});req.onsuccess=(function(){db=req.result;IDBFS.dbs[name]=db;callback(null,db)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),getLocalSet:(function(mount,callback){var entries={};function isRealDir(p){return p!=="."&&p!==".."}function toAbsolute(root){return(function(p){return PATH.join2(root,p)})}var check=FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));while(check.length){var path=check.pop();var stat;try{stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){check.push.apply(check,FS.readdir(path).filter(isRealDir).map(toAbsolute(path)))}entries[path]={timestamp:stat.mtime}}return callback(null,{type:"local",entries:entries})}),getRemoteSet:(function(mount,callback){var entries={};IDBFS.getDB(mount.mountpoint,(function(err,db){if(err)return callback(err);var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readonly");transaction.onerror=(function(e){callback(this.error);e.preventDefault()});var store=transaction.objectStore(IDBFS.DB_STORE_NAME);var index=store.index("timestamp");index.openKeyCursor().onsuccess=(function(event){var cursor=event.target.result;if(!cursor){return callback(null,{type:"remote",db:db,entries:entries})}entries[cursor.primaryKey]={timestamp:cursor.key};cursor.continue()})}))}),loadLocalEntry:(function(path,callback){var stat,node;try{var lookup=FS.lookupPath(path);node=lookup.node;stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){return callback(null,{timestamp:stat.mtime,mode:stat.mode})}else if(FS.isFile(stat.mode)){node.contents=MEMFS.getFileDataAsTypedArray(node);return callback(null,{timestamp:stat.mtime,mode:stat.mode,contents:node.contents})}else{return callback(new Error("node type not supported"))}}),storeLocalEntry:(function(path,entry,callback){try{if(FS.isDir(entry.mode)){FS.mkdir(path,entry.mode)}else if(FS.isFile(entry.mode)){FS.writeFile(path,entry.contents,{encoding:"binary",canOwn:true})}else{return callback(new Error("node type not supported"))}FS.chmod(path,entry.mode);FS.utime(path,entry.timestamp,entry.timestamp)}catch(e){return callback(e)}callback(null)}),removeLocalEntry:(function(path,callback){try{var lookup=FS.lookupPath(path);var stat=FS.stat(path);if(FS.isDir(stat.mode)){FS.rmdir(path)}else if(FS.isFile(stat.mode)){FS.unlink(path)}}catch(e){return callback(e)}callback(null)}),loadRemoteEntry:(function(store,path,callback){var req=store.get(path);req.onsuccess=(function(event){callback(null,event.target.result)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),storeRemoteEntry:(function(store,path,entry,callback){var req=store.put(entry,path);req.onsuccess=(function(){callback(null)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),removeRemoteEntry:(function(store,path,callback){var req=store.delete(path);req.onsuccess=(function(){callback(null)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),reconcile:(function(src,dst,callback){var total=0;var create=[];Object.keys(src.entries).forEach((function(key){var e=src.entries[key];var e2=dst.entries[key];if(!e2||e.timestamp>e2.timestamp){create.push(key);total++}}));var remove=[];Object.keys(dst.entries).forEach((function(key){var e=dst.entries[key];var e2=src.entries[key];if(!e2){remove.push(key);total++}}));if(!total){return callback(null)}var errored=false;var completed=0;var db=src.type==="remote"?src.db:dst.db;var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readwrite");var store=transaction.objectStore(IDBFS.DB_STORE_NAME);function done(err){if(err){if(!done.errored){done.errored=true;return callback(err)}return}if(++completed>=total){return callback(null)}}transaction.onerror=(function(e){done(this.error);e.preventDefault()});create.sort().forEach((function(path){if(dst.type==="local"){IDBFS.loadRemoteEntry(store,path,(function(err,entry){if(err)return done(err);IDBFS.storeLocalEntry(path,entry,done)}))}else{IDBFS.loadLocalEntry(path,(function(err,entry){if(err)return done(err);IDBFS.storeRemoteEntry(store,path,entry,done)}))}}));remove.sort().reverse().forEach((function(path){if(dst.type==="local"){IDBFS.removeLocalEntry(path,done)}else{IDBFS.removeRemoteEntry(store,path,done)}}))})};var NODEFS={isWindows:false,staticInit:(function(){NODEFS.isWindows=!!process.platform.match(/^win/)}),mount:(function(mount){assert(ENVIRONMENT_IS_NODE);return NODEFS.createNode(null,"/",NODEFS.getMode(mount.opts.root),0)}),createNode:(function(parent,name,mode,dev){if(!FS.isDir(mode)&&!FS.isFile(mode)&&!FS.isLink(mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node=FS.createNode(parent,name,mode);node.node_ops=NODEFS.node_ops;node.stream_ops=NODEFS.stream_ops;return node}),getMode:(function(path){var stat;try{stat=fs.lstatSync(path);if(NODEFS.isWindows){stat.mode=stat.mode|(stat.mode&146)>>1}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}return stat.mode}),realPath:(function(node){var parts=[];while(node.parent!==node){parts.push(node.name);node=node.parent}parts.push(node.mount.opts.root);parts.reverse();return PATH.join.apply(null,parts)}),flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:(function(flags){if(flags in NODEFS.flagsToPermissionStringMap){return NODEFS.flagsToPermissionStringMap[flags]}else{return flags}}),node_ops:{getattr:(function(node){var path=NODEFS.realPath(node);var stat;try{stat=fs.lstatSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}if(NODEFS.isWindows&&!stat.blksize){stat.blksize=4096}if(NODEFS.isWindows&&!stat.blocks){stat.blocks=(stat.size+stat.blksize-1)/stat.blksize|0}return{dev:stat.dev,ino:stat.ino,mode:stat.mode,nlink:stat.nlink,uid:stat.uid,gid:stat.gid,rdev:stat.rdev,size:stat.size,atime:stat.atime,mtime:stat.mtime,ctime:stat.ctime,blksize:stat.blksize,blocks:stat.blocks}}),setattr:(function(node,attr){var path=NODEFS.realPath(node);try{if(attr.mode!==undefined){fs.chmodSync(path,attr.mode);node.mode=attr.mode}if(attr.timestamp!==undefined){var date=new Date(attr.timestamp);fs.utimesSync(path,date,date)}if(attr.size!==undefined){fs.truncateSync(path,attr.size)}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),lookup:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);var mode=NODEFS.getMode(path);return NODEFS.createNode(parent,name,mode)}),mknod:(function(parent,name,mode,dev){var node=NODEFS.createNode(parent,name,mode,dev);var path=NODEFS.realPath(node);try{if(FS.isDir(node.mode)){fs.mkdirSync(path,node.mode)}else{fs.writeFileSync(path,"",{mode:node.mode})}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}return node}),rename:(function(oldNode,newDir,newName){var oldPath=NODEFS.realPath(oldNode);var newPath=PATH.join2(NODEFS.realPath(newDir),newName);try{fs.renameSync(oldPath,newPath)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),unlink:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);try{fs.unlinkSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),rmdir:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);try{fs.rmdirSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),readdir:(function(node){var path=NODEFS.realPath(node);try{return fs.readdirSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),symlink:(function(parent,newName,oldPath){var newPath=PATH.join2(NODEFS.realPath(parent),newName);try{fs.symlinkSync(oldPath,newPath)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),readlink:(function(node){var path=NODEFS.realPath(node);try{path=fs.readlinkSync(path);path=NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root),path);return path}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}})},stream_ops:{open:(function(stream){var path=NODEFS.realPath(stream.node);try{if(FS.isFile(stream.node.mode)){stream.nfd=fs.openSync(path,NODEFS.flagsToPermissionString(stream.flags))}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),close:(function(stream){try{if(FS.isFile(stream.node.mode)&&stream.nfd){fs.closeSync(stream.nfd)}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),read:(function(stream,buffer,offset,length,position){if(length===0)return 0;var nbuffer=new Buffer(length);var res;try{res=fs.readSync(stream.nfd,nbuffer,0,length,position)}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}if(res>0){for(var i=0;i<res;i++){buffer[offset+i]=nbuffer[i]}}return res}),write:(function(stream,buffer,offset,length,position){var nbuffer=new Buffer(buffer.subarray(offset,offset+length));var res;try{res=fs.writeSync(stream.nfd,nbuffer,0,length,position)}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}return res}),llseek:(function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){try{var stat=fs.fstatSync(stream.nfd);position+=stat.size}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position})}};var _stdin=allocate(1,"i32*",ALLOC_STATIC);var _stdout=allocate(1,"i32*",ALLOC_STATIC);var _stderr=allocate(1,"i32*",ALLOC_STATIC);function _fflush(stream){}var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:(function(e){if(!(e instanceof FS.ErrnoError))throw e+" : "+stackTrace();return ___setErrNo(e.errno)}),lookupPath:(function(path,opts){path=PATH.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key]}}if(opts.recurse_count>8){throw new FS.ErrnoError(ERRNO_CODES.ELOOP)}var parts=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(ERRNO_CODES.ELOOP)}}}}return{path:current_path,node:current}}),getPath:(function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}}),hashName:(function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length}),hashAddNode:(function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node}),hashRemoveNode:(function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}}),lookupNode:(function(parent,name){var err=FS.mayLookup(parent);if(err){throw new FS.ErrnoError(err,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)}),createNode:(function(parent,name,mode,rdev){if(!FS.FSNode){FS.FSNode=(function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev});FS.FSNode.prototype={};var readMode=292|73;var writeMode=146;Object.defineProperties(FS.FSNode.prototype,{read:{get:(function(){return(this.mode&readMode)===readMode}),set:(function(val){val?this.mode|=readMode:this.mode&=~readMode})},write:{get:(function(){return(this.mode&writeMode)===writeMode}),set:(function(val){val?this.mode|=writeMode:this.mode&=~writeMode})},isFolder:{get:(function(){return FS.isDir(this.mode)})},isDevice:{get:(function(){return FS.isChrdev(this.mode)})}})}var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node}),destroyNode:(function(node){FS.hashRemoveNode(node)}),isRoot:(function(node){return node===node.parent}),isMountpoint:(function(node){return!!node.mounted}),isFile:(function(mode){return(mode&61440)===32768}),isDir:(function(mode){return(mode&61440)===16384}),isLink:(function(mode){return(mode&61440)===40960}),isChrdev:(function(mode){return(mode&61440)===8192}),isBlkdev:(function(mode){return(mode&61440)===24576}),isFIFO:(function(mode){return(mode&61440)===4096}),isSocket:(function(mode){return(mode&49152)===49152}),flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:(function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags}),flagsToPermissionString:(function(flag){var accmode=flag&2097155;var perms=["r","w","rw"][accmode];if(flag&512){perms+="w"}return perms}),nodePermissions:(function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return ERRNO_CODES.EACCES}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return ERRNO_CODES.EACCES}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return ERRNO_CODES.EACCES}return 0}),mayLookup:(function(dir){var err=FS.nodePermissions(dir,"x");if(err)return err;if(!dir.node_ops.lookup)return ERRNO_CODES.EACCES;return 0}),mayCreate:(function(dir,name){try{var node=FS.lookupNode(dir,name);return ERRNO_CODES.EEXIST}catch(e){}return FS.nodePermissions(dir,"wx")}),mayDelete:(function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var err=FS.nodePermissions(dir,"wx");if(err){return err}if(isdir){if(!FS.isDir(node.mode)){return ERRNO_CODES.ENOTDIR}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return ERRNO_CODES.EBUSY}}else{if(FS.isDir(node.mode)){return ERRNO_CODES.EISDIR}}return 0}),mayOpen:(function(node,flags){if(!node){return ERRNO_CODES.ENOENT}if(FS.isLink(node.mode)){return ERRNO_CODES.ELOOP}else if(FS.isDir(node.mode)){if((flags&2097155)!==0||flags&512){return ERRNO_CODES.EISDIR}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))}),MAX_OPEN_FDS:4096,nextfd:(function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(ERRNO_CODES.EMFILE)}),getStream:(function(fd){return FS.streams[fd]}),createStream:(function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=(function(){});FS.FSStream.prototype={};Object.defineProperties(FS.FSStream.prototype,{object:{get:(function(){return this.node}),set:(function(val){this.node=val})},isRead:{get:(function(){return(this.flags&2097155)!==1})},isWrite:{get:(function(){return(this.flags&2097155)!==0})},isAppend:{get:(function(){return this.flags&1024})}})}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p]}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream}),closeStream:(function(fd){FS.streams[fd]=null}),getStreamFromPtr:(function(ptr){return FS.streams[ptr-1]}),getPtrForStream:(function(stream){return stream?stream.fd+1:0}),chrdev_stream_ops:{open:(function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}}),llseek:(function(){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)})},major:(function(dev){return dev>>8}),minor:(function(dev){return dev&255}),makedev:(function(ma,mi){return ma<<8|mi}),registerDevice:(function(dev,ops){FS.devices[dev]={stream_ops:ops}}),getDevice:(function(dev){return FS.devices[dev]}),getMounts:(function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts}),syncfs:(function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false}var mounts=FS.getMounts(FS.root.mount);var completed=0;function done(err){if(err){if(!done.errored){done.errored=true;return callback(err)}return}if(++completed>=mounts.length){callback(null)}}mounts.forEach((function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)}))}),mount:(function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot}),unmount:(function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach((function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current)}current=next}}));node.mounted=null;var idx=node.mount.mounts.indexOf(mount);assert(idx!==-1);node.mount.mounts.splice(idx,1)}),lookup:(function(parent,name){return parent.node_ops.lookup(parent,name)}),mknod:(function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var err=FS.mayCreate(parent,name);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return parent.node_ops.mknod(parent,name,mode,dev)}),create:(function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)}),mkdir:(function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)}),mkdev:(function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)}),symlink:(function(oldpath,newpath){if(!PATH.resolve(oldpath)){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}var newname=PATH.basename(newpath);var err=FS.mayCreate(parent,newname);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return parent.node_ops.symlink(parent,newname,oldpath)}),rename:(function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;try{lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(!old_dir||!new_dir)throw new FS.ErrnoError(ERRNO_CODES.ENOENT);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(ERRNO_CODES.EXDEV)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}relative=PATH.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var err=FS.mayDelete(old_dir,old_name,isdir);if(err){throw new FS.ErrnoError(err)}err=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(err){throw new FS.ErrnoError(err)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(new_dir!==old_dir){err=FS.nodePermissions(old_dir,"w");if(err){throw new FS.ErrnoError(err)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path)}}catch(e){console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path)}catch(e){console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}}),rmdir:(function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,true);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}}),readdir:(function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}return node.node_ops.readdir(node)}),unlink:(function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,false);if(err){if(err===ERRNO_CODES.EISDIR)err=ERRNO_CODES.EPERM;throw new FS.ErrnoError(err)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}}),readlink:(function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(!link.node_ops.readlink){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return PATH.resolve(FS.getPath(lookup.node.parent),link.node_ops.readlink(link))}),stat:(function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(!node.node_ops.getattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return node.node_ops.getattr(node)}),lstat:(function(path){return FS.stat(path,true)}),chmod:(function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})}),lchmod:(function(path,mode){FS.chmod(path,mode,true)}),fchmod:(function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}FS.chmod(stream.node,mode)}),chown:(function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}node.node_ops.setattr(node,{timestamp:Date.now()})}),lchown:(function(path,uid,gid){FS.chown(path,uid,gid,true)}),fchown:(function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}FS.chown(stream.node,uid,gid)}),truncate:(function(path,len){if(len<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var err=FS.nodePermissions(node,"w");if(err){throw new FS.ErrnoError(err)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})}),ftruncate:(function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}FS.truncate(stream.node,len)}),utime:(function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})}),open:(function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path==="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(ERRNO_CODES.EEXIST)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(FS.isChrdev(node.mode)){flags&=~512}if(!created){var err=FS.mayOpen(node,flags);if(err){throw new FS.ErrnoError(err)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;Module["printErr"]("read file: "+path)}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE}FS.trackingDelegate["onOpenFile"](path,trackingFlags)}}catch(e){console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream}),close:(function(stream){try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}}),llseek:(function(stream,offset,whence){if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position}),read:(function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!stream.stream_ops.read){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var seeking=true;if(typeof position==="undefined"){position=stream.position;seeking=false}else if(!stream.seekable){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead}),write:(function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!stream.stream_ops.write){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if(stream.flags&1024){FS.llseek(stream,0,2)}var seeking=true;if(typeof position==="undefined"){position=stream.position;seeking=false}else if(!stream.seekable){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path)}catch(e){console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: "+e.message)}return bytesWritten}),allocate:(function(stream,offset,length){if(offset<0||length<=0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)}stream.stream_ops.allocate(stream,offset,length)}),mmap:(function(stream,buffer,offset,length,position,prot,flags){if((stream.flags&2097155)===1){throw new FS.ErrnoError(ERRNO_CODES.EACCES)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}return stream.stream_ops.mmap(stream,buffer,offset,length,position,prot,flags)}),msync:(function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)}),munmap:(function(stream){return 0}),ioctl:(function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(ERRNO_CODES.ENOTTY)}return stream.stream_ops.ioctl(stream,cmd,arg)}),readFile:(function(path,opts){opts=opts||{};opts.flags=opts.flags||"r";opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret}),writeFile:(function(path,data,opts){opts=opts||{};opts.flags=opts.flags||"w";opts.encoding=opts.encoding||"utf8";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var stream=FS.open(path,opts.flags,opts.mode);if(opts.encoding==="utf8"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,0,opts.canOwn)}else if(opts.encoding==="binary"){FS.write(stream,data,0,data.length,0,opts.canOwn)}FS.close(stream)}),cwd:(function(){return FS.currentPath}),chdir:(function(path){var lookup=FS.lookupPath(path,{follow:true});if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}var err=FS.nodePermissions(lookup.node,"x");if(err){throw new FS.ErrnoError(err)}FS.currentPath=lookup.path}),createDefaultDirectories:(function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")}),createDefaultDevices:(function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:(function(){return 0}),write:(function(stream,buffer,offset,length,pos){return length})});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device;if(typeof crypto!=="undefined"){var randomBuffer=new Uint8Array(1);random_device=(function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]})}else if(ENVIRONMENT_IS_NODE){random_device=(function(){return require("crypto").randomBytes(1)[0]})}else{random_device=(function(){return Math.random()*256|0})}FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")}),createStandardStreams:(function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin","r");HEAP32[_stdin>>2]=FS.getPtrForStream(stdin);assert(stdin.fd===0,"invalid handle for stdin ("+stdin.fd+")");var stdout=FS.open("/dev/stdout","w");HEAP32[_stdout>>2]=FS.getPtrForStream(stdout);assert(stdout.fd===1,"invalid handle for stdout ("+stdout.fd+")");var stderr=FS.open("/dev/stderr","w");HEAP32[_stderr>>2]=FS.getPtrForStream(stderr);assert(stderr.fd===2,"invalid handle for stderr ("+stderr.fd+")")}),ensureErrnoError:(function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=(function(errno){this.errno=errno;for(var key in ERRNO_CODES){if(ERRNO_CODES[key]===errno){this.code=key;break}}});this.setErrno(errno);this.message=ERRNO_MESSAGES[errno]};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[ERRNO_CODES.ENOENT].forEach((function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"}))}),staticInit:(function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices()}),init:(function(input,output,error){assert(!FS.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()}),quit:(function(){FS.init.initialized=false;for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}}),getMode:(function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode}),joinPath:(function(parts,forceRelative){var path=PATH.join.apply(null,parts);if(forceRelative&&path[0]=="/")path=path.substr(1);return path}),absolutePath:(function(relative,base){return PATH.resolve(base,relative)}),standardizePath:(function(path){return PATH.normalize(path)}),findObject:(function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{___setErrNo(ret.error);return null}}),analyzePath:(function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret}),createFolder:(function(parent,name,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.mkdir(path,mode)}),createPath:(function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current}),createFile:(function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)}),createDataFile:(function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,"w");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node}),createDevice:(function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:(function(stream){stream.seekable=false}),close:(function(stream){if(output&&output.buffer&&output.buffer.length){output(10)}}),read:(function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead}),write:(function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}}if(length){stream.node.timestamp=Date.now()}return i})});return FS.mkdev(path,mode,dev)}),createLink:(function(parent,name,target,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);return FS.symlink(target,path)}),forceLoadFile:(function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(Module["read"]){try{obj.contents=intArrayFromString(Module["read"](obj.url),true);obj.usedBytes=obj.contents.length}catch(e){success=false}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}if(!success)___setErrNo(ERRNO_CODES.EIO);return success}),createLazyFile:(function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=(function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}});var lazyArray=this;lazyArray.setDataGetter((function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]}));this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperty(lazyArray,"length",{get:(function(){if(!this.lengthKnown){this.cacheLength()}return this._length})});Object.defineProperty(lazyArray,"chunkSize",{get:(function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize})});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperty(node,"usedBytes",{get:(function(){return this.contents.length})});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach((function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(ERRNO_CODES.EIO)}return fn.apply(null,arguments)}}));stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(ERRNO_CODES.EIO)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);assert(size>=0);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size};node.stream_ops=stream_ops;return node}),createPreloadedFile:(function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}var handled=false;Module["preloadPlugins"].forEach((function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,(function(){if(onerror)onerror();removeRunDependency(dep)}));handled=true}}));if(!handled)finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){Browser.asyncLoad(url,(function(byteArray){processData(byteArray)}),onerror)}else{processData(url)}}),indexedDB:(function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB}),DB_NAME:(function(){return"EM_FS_"+window.location.pathname}),DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(function(paths,onload,onerror){onload=onload||(function(){});onerror=onerror||(function(){});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){console.log("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach((function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish()};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish()}}));transaction.onerror=onerror};openRequest.onerror=onerror}),loadFilesFromDB:(function(paths,onload,onerror){onload=onload||(function(){});onerror=onerror||(function(){});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach((function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish()}}));transaction.onerror=onerror};openRequest.onerror=onerror})};var PATH={splitPath:(function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)}),normalizeArray:(function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up--;up){parts.unshift("..")}}return parts}),normalize:(function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path}),dirname:(function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir}),basename:(function(path){if(path==="/")return"/";var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)}),extname:(function(path){return PATH.splitPath(path)[3]}),join:(function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))}),join2:(function(l,r){return PATH.normalize(l+"/"+r)}),resolve:(function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter((function(p){return!!p})),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."}),relative:(function(from,to){from=PATH.resolve(from).substr(1);to=PATH.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")})};function _emscripten_set_main_loop_timing(mode,value){Browser.mainLoop.timingMode=mode;Browser.mainLoop.timingValue=value;if(!Browser.mainLoop.func){return 1}if(mode==0){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler(){setTimeout(Browser.mainLoop.runner,value)};Browser.mainLoop.method="timeout"}else if(mode==1){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler(){Browser.requestAnimationFrame(Browser.mainLoop.runner)};Browser.mainLoop.method="rAF"}return 0}function _emscripten_set_main_loop(func,fps,simulateInfiniteLoop,arg,noSetTiming){Module["noExitRuntime"]=true;assert(!Browser.mainLoop.func,"emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");Browser.mainLoop.func=func;Browser.mainLoop.arg=arg;var thisMainLoopId=Browser.mainLoop.currentlyRunningMainloop;Browser.mainLoop.runner=function Browser_mainLoop_runner(){if(ABORT)return;if(Browser.mainLoop.queue.length>0){var start=Date.now();var blocker=Browser.mainLoop.queue.shift();blocker.func(blocker.arg);if(Browser.mainLoop.remainingBlockers){var remaining=Browser.mainLoop.remainingBlockers;var next=remaining%1==0?remaining-1:Math.floor(remaining);if(blocker.counted){Browser.mainLoop.remainingBlockers=next}else{next=next+.5;Browser.mainLoop.remainingBlockers=(8*remaining+next)/9}}console.log('main loop blocker "'+blocker.name+'" took '+(Date.now()-start)+" ms");Browser.mainLoop.updateStatus();setTimeout(Browser.mainLoop.runner,0);return}if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;Browser.mainLoop.currentFrameNumber=Browser.mainLoop.currentFrameNumber+1|0;if(Browser.mainLoop.timingMode==1&&Browser.mainLoop.timingValue>1&&Browser.mainLoop.currentFrameNumber%Browser.mainLoop.timingValue!=0){Browser.mainLoop.scheduler();return}if(Browser.mainLoop.method==="timeout"&&Module.ctx){Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");Browser.mainLoop.method=""}Browser.mainLoop.runIter((function(){if(typeof arg!=="undefined"){Runtime.dynCall("vi",func,[arg])}else{Runtime.dynCall("v",func)}}));if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;if(typeof SDL==="object"&&SDL.audio&&SDL.audio.queueNewAudioData)SDL.audio.queueNewAudioData();Browser.mainLoop.scheduler()};if(!noSetTiming){if(fps&&fps>0)_emscripten_set_main_loop_timing(0,1e3/fps);else _emscripten_set_main_loop_timing(1,1);Browser.mainLoop.scheduler()}if(simulateInfiniteLoop){throw"SimulateInfiniteLoop"}}var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:(function(){Browser.mainLoop.scheduler=null;Browser.mainLoop.currentlyRunningMainloop++}),resume:(function(){Browser.mainLoop.currentlyRunningMainloop++;var timingMode=Browser.mainLoop.timingMode;var timingValue=Browser.mainLoop.timingValue;var func=Browser.mainLoop.func;Browser.mainLoop.func=null;_emscripten_set_main_loop(func,0,false,Browser.mainLoop.arg,true);_emscripten_set_main_loop_timing(timingMode,timingValue);Browser.mainLoop.scheduler()}),updateStatus:(function(){if(Module["setStatus"]){var message=Module["statusMessage"]||"Please wait...";var remaining=Browser.mainLoop.remainingBlockers;var expected=Browser.mainLoop.expectedBlockers;if(remaining){if(remaining<expected){Module["setStatus"](message+" ("+(expected-remaining)+"/"+expected+")")}else{Module["setStatus"](message)}}else{Module["setStatus"]("")}}}),runIter:(function(func){if(ABORT)return;if(Module["preMainLoop"]){var preRet=Module["preMainLoop"]();if(preRet===false){return}}try{func()}catch(e){if(e instanceof ExitStatus){return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}if(Module["postMainLoop"])Module["postMainLoop"]()})},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:(function(){if(!Module["preloadPlugins"])Module["preloadPlugins"]=[];if(Browser.initted)return;Browser.initted=true;try{new Blob;Browser.hasBlobConstructor=true}catch(e){Browser.hasBlobConstructor=false;console.log("warning: no blob constructor, cannot create blobs with mimetypes")}Browser.BlobBuilder=typeof MozBlobBuilder!="undefined"?MozBlobBuilder:typeof WebKitBlobBuilder!="undefined"?WebKitBlobBuilder:!Browser.hasBlobConstructor?console.log("warning: no BlobBuilder"):null;Browser.URLObject=typeof window!="undefined"?window.URL?window.URL:window.webkitURL:undefined;if(!Module.noImageDecoding&&typeof Browser.URLObject==="undefined"){console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");Module.noImageDecoding=true}var imagePlugin={};imagePlugin["canHandle"]=function imagePlugin_canHandle(name){return!Module.noImageDecoding&&/\.(jpg|jpeg|png|bmp)$/i.test(name)};imagePlugin["handle"]=function imagePlugin_handle(byteArray,name,onload,onerror){var b=null;if(Browser.hasBlobConstructor){try{b=new Blob([byteArray],{type:Browser.getMimetype(name)});if(b.size!==byteArray.length){b=new Blob([(new Uint8Array(byteArray)).buffer],{type:Browser.getMimetype(name)})}}catch(e){Runtime.warnOnce("Blob constructor present but fails: "+e+"; falling back to blob builder")}}if(!b){var bb=new Browser.BlobBuilder;bb.append((new Uint8Array(byteArray)).buffer);b=bb.getBlob()}var url=Browser.URLObject.createObjectURL(b);var img=new Image;img.onload=function img_onload(){assert(img.complete,"Image "+name+" could not be decoded");var canvas=document.createElement("canvas");canvas.width=img.width;canvas.height=img.height;var ctx=canvas.getContext("2d");ctx.drawImage(img,0,0);Module["preloadedImages"][name]=canvas;Browser.URLObject.revokeObjectURL(url);if(onload)onload(byteArray)};img.onerror=function img_onerror(event){console.log("Image "+url+" could not be decoded");if(onerror)onerror()};img.src=url};Module["preloadPlugins"].push(imagePlugin);var audioPlugin={};audioPlugin["canHandle"]=function audioPlugin_canHandle(name){return!Module.noAudioDecoding&&name.substr(-4)in{".ogg":1,".wav":1,".mp3":1}};audioPlugin["handle"]=function audioPlugin_handle(byteArray,name,onload,onerror){var done=false;function finish(audio){if(done)return;done=true;Module["preloadedAudios"][name]=audio;if(onload)onload(byteArray)}function fail(){if(done)return;done=true;Module["preloadedAudios"][name]=new Audio;if(onerror)onerror()}if(Browser.hasBlobConstructor){try{var b=new Blob([byteArray],{type:Browser.getMimetype(name)})}catch(e){return fail()}var url=Browser.URLObject.createObjectURL(b);var audio=new Audio;audio.addEventListener("canplaythrough",(function(){finish(audio)}),false);audio.onerror=function audio_onerror(event){if(done)return;console.log("warning: browser could not fully decode audio "+name+", trying slower base64 approach");function encode64(data){var BASE="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var PAD="=";var ret="";var leftchar=0;var leftbits=0;for(var i=0;i<data.length;i++){leftchar=leftchar<<8|data[i];leftbits+=8;while(leftbits>=6){var curr=leftchar>>leftbits-6&63;leftbits-=6;ret+=BASE[curr]}}if(leftbits==2){ret+=BASE[(leftchar&3)<<4];ret+=PAD+PAD}else if(leftbits==4){ret+=BASE[(leftchar&15)<<2];ret+=PAD}return ret}audio.src="data:audio/x-"+name.substr(-3)+";base64,"+encode64(byteArray);finish(audio)};audio.src=url;Browser.safeSetTimeout((function(){finish(audio)}),1e4)}else{return fail()}};Module["preloadPlugins"].push(audioPlugin);var canvas=Module["canvas"];function pointerLockChange(){Browser.pointerLock=document["pointerLockElement"]===canvas||document["mozPointerLockElement"]===canvas||document["webkitPointerLockElement"]===canvas||document["msPointerLockElement"]===canvas}if(canvas){canvas.requestPointerLock=canvas["requestPointerLock"]||canvas["mozRequestPointerLock"]||canvas["webkitRequestPointerLock"]||canvas["msRequestPointerLock"]||(function(){});canvas.exitPointerLock=document["exitPointerLock"]||document["mozExitPointerLock"]||document["webkitExitPointerLock"]||document["msExitPointerLock"]||(function(){});canvas.exitPointerLock=canvas.exitPointerLock.bind(document);document.addEventListener("pointerlockchange",pointerLockChange,false);document.addEventListener("mozpointerlockchange",pointerLockChange,false);document.addEventListener("webkitpointerlockchange",pointerLockChange,false);document.addEventListener("mspointerlockchange",pointerLockChange,false);if(Module["elementPointerLock"]){canvas.addEventListener("click",(function(ev){if(!Browser.pointerLock&&canvas.requestPointerLock){canvas.requestPointerLock();ev.preventDefault()}}),false)}}}),createContext:(function(canvas,useWebGL,setInModule,webGLContextAttributes){if(useWebGL&&Module.ctx&&canvas==Module.canvas)return Module.ctx;var ctx;var contextHandle;if(useWebGL){var contextAttributes={antialias:false,alpha:false};if(webGLContextAttributes){for(var attribute in webGLContextAttributes){contextAttributes[attribute]=webGLContextAttributes[attribute]}}contextHandle=GL.createContext(canvas,contextAttributes);if(contextHandle){ctx=GL.getContext(contextHandle).GLctx}canvas.style.backgroundColor="black"}else{ctx=canvas.getContext("2d")}if(!ctx)return null;if(setInModule){if(!useWebGL)assert(typeof GLctx==="undefined","cannot set in module if GLctx is used, but we are a non-GL context that would replace it");Module.ctx=ctx;if(useWebGL)GL.makeContextCurrent(contextHandle);Module.useWebGL=useWebGL;Browser.moduleContextCreatedCallbacks.forEach((function(callback){callback()}));Browser.init()}return ctx}),destroyContext:(function(canvas,useWebGL,setInModule){}),fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:(function(lockPointer,resizeCanvas,vrDevice){Browser.lockPointer=lockPointer;Browser.resizeCanvas=resizeCanvas;Browser.vrDevice=vrDevice;if(typeof Browser.lockPointer==="undefined")Browser.lockPointer=true;if(typeof Browser.resizeCanvas==="undefined")Browser.resizeCanvas=false;if(typeof Browser.vrDevice==="undefined")Browser.vrDevice=null;var canvas=Module["canvas"];function fullScreenChange(){Browser.isFullScreen=false;var canvasContainer=canvas.parentNode;if((document["webkitFullScreenElement"]||document["webkitFullscreenElement"]||document["mozFullScreenElement"]||document["mozFullscreenElement"]||document["fullScreenElement"]||document["fullscreenElement"]||document["msFullScreenElement"]||document["msFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvasContainer){canvas.cancelFullScreen=document["cancelFullScreen"]||document["mozCancelFullScreen"]||document["webkitCancelFullScreen"]||document["msExitFullscreen"]||document["exitFullscreen"]||(function(){});canvas.cancelFullScreen=canvas.cancelFullScreen.bind(document);if(Browser.lockPointer)canvas.requestPointerLock();Browser.isFullScreen=true;if(Browser.resizeCanvas)Browser.setFullScreenCanvasSize()}else{canvasContainer.parentNode.insertBefore(canvas,canvasContainer);canvasContainer.parentNode.removeChild(canvasContainer);if(Browser.resizeCanvas)Browser.setWindowedCanvasSize()}if(Module["onFullScreen"])Module["onFullScreen"](Browser.isFullScreen);Browser.updateCanvasDimensions(canvas)}if(!Browser.fullScreenHandlersInstalled){Browser.fullScreenHandlersInstalled=true;document.addEventListener("fullscreenchange",fullScreenChange,false);document.addEventListener("mozfullscreenchange",fullScreenChange,false);document.addEventListener("webkitfullscreenchange",fullScreenChange,false);document.addEventListener("MSFullscreenChange",fullScreenChange,false)}var canvasContainer=document.createElement("div");canvas.parentNode.insertBefore(canvasContainer,canvas);canvasContainer.appendChild(canvas);canvasContainer.requestFullScreen=canvasContainer["requestFullScreen"]||canvasContainer["mozRequestFullScreen"]||canvasContainer["msRequestFullscreen"]||(canvasContainer["webkitRequestFullScreen"]?(function(){canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"])}):null);if(vrDevice){canvasContainer.requestFullScreen({vrDisplay:vrDevice})}else{canvasContainer.requestFullScreen()}}),nextRAF:0,fakeRequestAnimationFrame:(function(func){var now=Date.now();if(Browser.nextRAF===0){Browser.nextRAF=now+1e3/60}else{while(now+2>=Browser.nextRAF){Browser.nextRAF+=1e3/60}}var delay=Math.max(Browser.nextRAF-now,0);setTimeout(func,delay)}),requestAnimationFrame:function requestAnimationFrame(func){if(typeof window==="undefined"){Browser.fakeRequestAnimationFrame(func)}else{if(!window.requestAnimationFrame){window.requestAnimationFrame=window["requestAnimationFrame"]||window["mozRequestAnimationFrame"]||window["webkitRequestAnimationFrame"]||window["msRequestAnimationFrame"]||window["oRequestAnimationFrame"]||Browser.fakeRequestAnimationFrame}window.requestAnimationFrame(func)}},safeCallback:(function(func){return(function(){if(!ABORT)return func.apply(null,arguments)})}),allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=false}),resumeAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=true;if(Browser.queuedAsyncCallbacks.length>0){var callbacks=Browser.queuedAsyncCallbacks;Browser.queuedAsyncCallbacks=[];callbacks.forEach((function(func){func()}))}}),safeRequestAnimationFrame:(function(func){return Browser.requestAnimationFrame((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}))}),safeSetTimeout:(function(func,timeout){Module["noExitRuntime"]=true;return setTimeout((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}),timeout)}),safeSetInterval:(function(func,timeout){Module["noExitRuntime"]=true;return setInterval((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}}),timeout)}),getMimetype:(function(name){return{"jpg":"image/jpeg","jpeg":"image/jpeg","png":"image/png","bmp":"image/bmp","ogg":"audio/ogg","wav":"audio/wav","mp3":"audio/mpeg"}[name.substr(name.lastIndexOf(".")+1)]}),getUserMedia:(function(func){if(!window.getUserMedia){window.getUserMedia=navigator["getUserMedia"]||navigator["mozGetUserMedia"]}window.getUserMedia(func)}),getMovementX:(function(event){return event["movementX"]||event["mozMovementX"]||event["webkitMovementX"]||0}),getMovementY:(function(event){return event["movementY"]||event["mozMovementY"]||event["webkitMovementY"]||0}),getMouseWheelDelta:(function(event){var delta=0;switch(event.type){case"DOMMouseScroll":delta=event.detail;break;case"mousewheel":delta=event.wheelDelta;break;case"wheel":delta=event["deltaY"];break;default:throw"unrecognized mouse wheel event: "+event.type}return delta}),mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:(function(event){if(Browser.pointerLock){if(event.type!="mousemove"&&"mozMovementX"in event){Browser.mouseMovementX=Browser.mouseMovementY=0}else{Browser.mouseMovementX=Browser.getMovementX(event);Browser.mouseMovementY=Browser.getMovementY(event)}if(typeof SDL!="undefined"){Browser.mouseX=SDL.mouseX+Browser.mouseMovementX;Browser.mouseY=SDL.mouseY+Browser.mouseMovementY}else{Browser.mouseX+=Browser.mouseMovementX;Browser.mouseY+=Browser.mouseMovementY}}else{var rect=Module["canvas"].getBoundingClientRect();var cw=Module["canvas"].width;var ch=Module["canvas"].height;var scrollX=typeof window.scrollX!=="undefined"?window.scrollX:window.pageXOffset;var scrollY=typeof window.scrollY!=="undefined"?window.scrollY:window.pageYOffset;if(event.type==="touchstart"||event.type==="touchend"||event.type==="touchmove"){var touch=event.touch;if(touch===undefined){return}var adjustedX=touch.pageX-(scrollX+rect.left);var adjustedY=touch.pageY-(scrollY+rect.top);adjustedX=adjustedX*(cw/rect.width);adjustedY=adjustedY*(ch/rect.height);var coords={x:adjustedX,y:adjustedY};if(event.type==="touchstart"){Browser.lastTouches[touch.identifier]=coords;Browser.touches[touch.identifier]=coords}else if(event.type==="touchend"||event.type==="touchmove"){var last=Browser.touches[touch.identifier];if(!last)last=coords;Browser.lastTouches[touch.identifier]=last;Browser.touches[touch.identifier]=coords}return}var x=event.pageX-(scrollX+rect.left);var y=event.pageY-(scrollY+rect.top);x=x*(cw/rect.width);y=y*(ch/rect.height);Browser.mouseMovementX=x-Browser.mouseX;Browser.mouseMovementY=y-Browser.mouseY;Browser.mouseX=x;Browser.mouseY=y}}),xhrLoad:(function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response)}else{onerror()}};xhr.onerror=onerror;xhr.send(null)}),asyncLoad:(function(url,onload,onerror,noRunDep){Browser.xhrLoad(url,(function(arrayBuffer){assert(arrayBuffer,'Loading data file "'+url+'" failed (no arrayBuffer).');onload(new Uint8Array(arrayBuffer));if(!noRunDep)removeRunDependency("al "+url)}),(function(event){if(onerror){onerror()}else{throw'Loading data file "'+url+'" failed.'}}));if(!noRunDep)addRunDependency("al "+url)}),resizeListeners:[],updateResizeListeners:(function(){var canvas=Module["canvas"];Browser.resizeListeners.forEach((function(listener){listener(canvas.width,canvas.height)}))}),setCanvasSize:(function(width,height,noUpdates){var canvas=Module["canvas"];Browser.updateCanvasDimensions(canvas,width,height);if(!noUpdates)Browser.updateResizeListeners()}),windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:(function(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2];flags=flags|8388608;HEAP32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2]=flags}Browser.updateResizeListeners()}),setWindowedCanvasSize:(function(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2];flags=flags&~8388608;HEAP32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2]=flags}Browser.updateResizeListeners()}),updateCanvasDimensions:(function(canvas,wNative,hNative){if(wNative&&hNative){canvas.widthNative=wNative;canvas.heightNative=hNative}else{wNative=canvas.widthNative;hNative=canvas.heightNative}var w=wNative;var h=hNative;if(Module["forcedAspectRatio"]&&Module["forcedAspectRatio"]>0){if(w/h<Module["forcedAspectRatio"]){w=Math.round(h*Module["forcedAspectRatio"])}else{h=Math.round(w/Module["forcedAspectRatio"])}}if((document["webkitFullScreenElement"]||document["webkitFullscreenElement"]||document["mozFullScreenElement"]||document["mozFullscreenElement"]||document["fullScreenElement"]||document["fullscreenElement"]||document["msFullScreenElement"]||document["msFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvas.parentNode&&typeof screen!="undefined"){var factor=Math.min(screen.width/w,screen.height/h);w=Math.round(w*factor);h=Math.round(h*factor)}if(Browser.resizeCanvas){if(canvas.width!=w)canvas.width=w;if(canvas.height!=h)canvas.height=h;if(typeof canvas.style!="undefined"){canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}else{if(canvas.width!=wNative)canvas.width=wNative;if(canvas.height!=hNative)canvas.height=hNative;if(typeof canvas.style!="undefined"){if(w!=wNative||h!=hNative){canvas.style.setProperty("width",w+"px","important");canvas.style.setProperty("height",h+"px","important")}else{canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}}}),wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:(function(){var handle=Browser.nextWgetRequestHandle;Browser.nextWgetRequestHandle++;return handle})};var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle)}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count}}return count}function get_first_emval(){for(var i=1;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module["count_emval_handles"]=count_emval_handles;Module["get_first_emval"]=get_first_emval}function __emval_register(value){switch(value){case undefined:{return 1};case null:{return 2};case true:{return 3};case false:{return 4};default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":(function(handle){var rv=emval_handle_array[handle].value;__emval_decref(handle);return rv}),"toWireType":(function(destructors,value){return __emval_register(value)}),"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:null})}function ___cxa_allocate_exception(size){return _malloc(size)}var _sin=Math_sin;function _sysconf(name){switch(name){case 30:return PAGE_SIZE;case 85:return totalMemory/PAGE_SIZE;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator==="object")return navigator["hardwareConcurrency"]||1;return 1}}___setErrNo(ERRNO_CODES.EINVAL);return-1}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i])}return array}function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=requireFunction(invokerSignature,invoker);whenDependentTypesAreResolved([],[rawClassType],(function(classType){classType=classType[0];var humanName="constructor "+classType.name;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[]}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError("Cannot register multiple constructors with identical number of parameters ("+(argCount-1)+") for class '"+classType.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!")}classType.registeredClass.constructor_body[argCount-1]=function unboundTypeHandler(){throwUnboundTypeError("Cannot construct "+classType.name+" due to unbound types",rawArgTypes)};whenDependentTypesAreResolved([],rawArgTypes,(function(argTypes){classType.registeredClass.constructor_body[argCount-1]=function constructor_body(){if(arguments.length!==argCount-1){throwBindingError(humanName+" called with "+arguments.length+" arguments, expected "+(argCount-1))}var destructors=[];var args=new Array(argCount);args[0]=rawConstructor;for(var i=1;i<argCount;++i){args[i]=argTypes[i]["toWireType"](destructors,arguments[i-1])}var ptr=invoker.apply(null,args);runDestructors(destructors);return argTypes[0]["fromWireType"](ptr)};return[]}));return[]}))}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return(function(pointer){return this["fromWireType"](HEAPF32[pointer>>2])});case 3:return(function(pointer){return this["fromWireType"](HEAPF64[pointer>>3])});default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":(function(value){return value}),"toWireType":(function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}return value}),"argPackAdvance":8,"readValueFromPointer":floatReadValueFromPointer(name,shift),destructorFunction:null})}var _BDtoIHigh=true;function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError("new_ called with constructor type "+typeof constructor+" which is not a function")}var dummy=createNamedFunction(constructor.name||"unknownFunctionName",(function(){}));dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var argsList="";var argsListWired="";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?", ":"")+"arg"+i;argsListWired+=(i!==0?", ":"")+"arg"+i+"Wired"}var invokerFnBody="return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n"+"if (arguments.length !== "+(argCount-2)+") {\n"+"throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount-2)+" args!');\n"+"}\n";var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}if(needsDestructorStack){invokerFnBody+="var destructors = [];\n"}var dtorStack=needsDestructorStack?"destructors":"null";var args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n"}for(var i=0;i<argCount-2;++i){invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";args1.push("argType"+i);args2.push(argTypes[i+2])}if(isClassMethodFunc){argsListWired="thisWired"+(argsListWired.length>0?", ":"")+argsListWired}var returns=argTypes[0].name!=="void";invokerFnBody+=(returns?"var rv = ":"")+"invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";if(needsDestructorStack){invokerFnBody+="runDestructors(destructors);\n"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?"thisWired":"arg"+(i-2)+"Wired";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";args1.push(paramName+"_dtor");args2.push(argTypes[i].destructorFunction)}}}if(returns){invokerFnBody+="var ret = retType.fromWireType(rv);\n"+"return ret;\n"}else{}invokerFnBody+="}\n";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function __embind_register_class_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,fn){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],(function(classType){classType=classType[0];var humanName=classType.name+"."+methodName;function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+humanName+" due to unbound types",rawArgTypes)}var proto=classType.registeredClass.constructor;if(undefined===proto[methodName]){unboundTypesHandler.argCount=argCount-1;proto[methodName]=unboundTypesHandler}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-1]=unboundTypesHandler}whenDependentTypesAreResolved([],rawArgTypes,(function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));var func=craftInvokerFunction(humanName,invokerArgsArray,null,rawInvoker,fn);if(undefined===proto[methodName].overloadTable){proto[methodName]=func}else{proto[methodName].overloadTable[argCount-1]=func}return[]}));return[]}))}var _sinf=Math_sin;function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module["_memcpy"]=_memcpy;var _log=Math_log;var _cos=Math_cos;function _sbrk(bytes){var self=_sbrk;if(!self.called){DYNAMICTOP=alignMemoryPage(DYNAMICTOP);self.called=true;assert(Runtime.dynamicAlloc);self.alloc=Runtime.dynamicAlloc;Runtime.dynamicAlloc=(function(){abort("cannot dynamically allocate, sbrk now has control")})}var ret=DYNAMICTOP;if(bytes!=0){var success=self.alloc(bytes);if(!success)return-1>>>0}return ret}Module["_memmove"]=_memmove;var _atanf=Math_atan;function ___errno_location(){return ___errno_state}var _BItoD=true;function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(heap["buffer"],data,size)}name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":decodeMemoryView,"argPackAdvance":8,"readValueFromPointer":decodeMemoryView},{ignoreDuplicateRegistrations:true})}function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],(function(classType){classType=classType[0];var humanName=classType.name+"."+methodName;if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName)}function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+humanName+" due to unbound types",rawArgTypes)}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler}whenDependentTypesAreResolved([],rawArgTypes,(function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);if(undefined===proto[methodName].overloadTable){proto[methodName]=memberFunction}else{proto[methodName].overloadTable[argCount-2]=memberFunction}return[]}));return[]}))}embind_init_charCodes();BindingError=Module["BindingError"]=extendError(Error,"BindingError");InternalError=Module["InternalError"]=extendError(Error,"InternalError");init_ClassHandle();init_RegisteredPointer();init_embind();UnboundTypeError=Module["UnboundTypeError"]=extendError(Error,"UnboundTypeError");Module["requestFullScreen"]=function Module_requestFullScreen(lockPointer,resizeCanvas,vrDevice){Browser.requestFullScreen(lockPointer,resizeCanvas,vrDevice)};Module["requestAnimationFrame"]=function Module_requestAnimationFrame(func){Browser.requestAnimationFrame(func)};Module["setCanvasSize"]=function Module_setCanvasSize(width,height,noUpdates){Browser.setCanvasSize(width,height,noUpdates)};Module["pauseMainLoop"]=function Module_pauseMainLoop(){Browser.mainLoop.pause()};Module["resumeMainLoop"]=function Module_resumeMainLoop(){Browser.mainLoop.resume()};Module["getUserMedia"]=function Module_getUserMedia(){Browser.getUserMedia()};Module["createContext"]=function Module_createContext(canvas,useWebGL,setInModule,webGLContextAttributes){return Browser.createContext(canvas,useWebGL,setInModule,webGLContextAttributes)};FS.staticInit();__ATINIT__.unshift((function(){if(!Module["noFSInit"]&&!FS.init.initialized)FS.init()}));__ATMAIN__.push((function(){FS.ignorePermissions=false}));__ATEXIT__.push((function(){FS.quit()}));Module["FS_createFolder"]=FS.createFolder;Module["FS_createPath"]=FS.createPath;Module["FS_createDataFile"]=FS.createDataFile;Module["FS_createPreloadedFile"]=FS.createPreloadedFile;Module["FS_createLazyFile"]=FS.createLazyFile;Module["FS_createLink"]=FS.createLink;Module["FS_createDevice"]=FS.createDevice;___errno_state=Runtime.staticAlloc(4);HEAP32[___errno_state>>2]=0;__ATINIT__.unshift((function(){TTY.init()}));__ATEXIT__.push((function(){TTY.shutdown()}));if(ENVIRONMENT_IS_NODE){var fs=require("fs");var NODEJS_PATH=require("path");NODEFS.staticInit()}init_emval();STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);staticSealed=true;STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=DYNAMICTOP=Runtime.alignMemory(STACK_MAX);assert(DYNAMIC_BASE<TOTAL_MEMORY,"TOTAL_MEMORY not big enough for stack");function invoke_iiii(index,a1,a2,a3){try{return Module["dynCall_iiii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiidi(index,a1,a2,a3,a4,a5){try{return Module["dynCall_iiiidi"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_i(index){try{return Module["dynCall_i"](index)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vi(index,a1){try{Module["dynCall_vi"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vii(index,a1,a2){try{Module["dynCall_vii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_ii(index,a1){try{return Module["dynCall_ii"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viii(index,a1,a2,a3){try{Module["dynCall_viii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_v(index){try{Module["dynCall_v"](index)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiii(index,a1,a2,a3,a4){try{return Module["dynCall_iiiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){try{Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiii(index,a1,a2,a3,a4,a5){try{Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module["dynCall_viiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}Module.asmGlobalArg={"Math":Math,"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"NaN":NaN,"Infinity":Infinity};Module.asmLibraryArg={"abort":abort,"assert":assert,"invoke_iiii":invoke_iiii,"invoke_iiiidi":invoke_iiiidi,"invoke_i":invoke_i,"invoke_vi":invoke_vi,"invoke_vii":invoke_vii,"invoke_ii":invoke_ii,"invoke_viii":invoke_viii,"invoke_v":invoke_v,"invoke_iiiii":invoke_iiiii,"invoke_viiiiii":invoke_viiiiii,"invoke_viiiii":invoke_viiiii,"invoke_viiii":invoke_viiii,"floatReadValueFromPointer":floatReadValueFromPointer,"simpleReadValueFromPointer":simpleReadValueFromPointer,"_log":_log,"throwInternalError":throwInternalError,"get_first_emval":get_first_emval,"getLiveInheritedInstances":getLiveInheritedInstances,"___assert_fail":___assert_fail,"__ZSt18uncaught_exceptionv":__ZSt18uncaught_exceptionv,"ClassHandle":ClassHandle,"getShiftFromSize":getShiftFromSize,"_emscripten_set_main_loop_timing":_emscripten_set_main_loop_timing,"_sbrk":_sbrk,"_sinf":_sinf,"runDestructor":runDestructor,"_sysconf":_sysconf,"throwInstanceAlreadyDeleted":throwInstanceAlreadyDeleted,"__embind_register_std_string":__embind_register_std_string,"init_RegisteredPointer":init_RegisteredPointer,"_cos":_cos,"__embind_register_class_function":__embind_register_class_function,"flushPendingDeletes":flushPendingDeletes,"makeClassHandle":makeClassHandle,"whenDependentTypesAreResolved":whenDependentTypesAreResolved,"__embind_register_class_constructor":__embind_register_class_constructor,"init_ClassHandle":init_ClassHandle,"ClassHandle_clone":ClassHandle_clone,"RegisteredClass":RegisteredClass,"___cxa_find_matching_catch":___cxa_find_matching_catch,"embind_init_charCodes":embind_init_charCodes,"___setErrNo":___setErrNo,"__embind_register_class_class_function":__embind_register_class_class_function,"__embind_register_bool":__embind_register_bool,"___resumeException":___resumeException,"createNamedFunction":createNamedFunction,"__embind_register_emval":__embind_register_emval,"_atanf":_atanf,"__emval_decref":__emval_decref,"init_embind":init_embind,"constNoSmartPtrRawPointerToWireType":constNoSmartPtrRawPointerToWireType,"heap32VectorToArray":heap32VectorToArray,"ClassHandle_delete":ClassHandle_delete,"RegisteredPointer_destructor":RegisteredPointer_destructor,"ensureOverloadTable":ensureOverloadTable,"_time":_time,"new_":new_,"downcastPointer":downcastPointer,"replacePublicSymbol":replacePublicSymbol,"__embind_register_class":__embind_register_class,"ClassHandle_deleteLater":ClassHandle_deleteLater,"RegisteredPointer_deleteObject":RegisteredPointer_deleteObject,"ClassHandle_isDeleted":ClassHandle_isDeleted,"__embind_register_integer":__embind_register_integer,"___cxa_allocate_exception":___cxa_allocate_exception,"_floor":_floor,"_fabsf":_fabsf,"_embind_repr":_embind_repr,"_emscripten_memcpy_big":_emscripten_memcpy_big,"throwUnboundTypeError":throwUnboundTypeError,"craftInvokerFunction":craftInvokerFunction,"runDestructors":runDestructors,"_floorf":_floorf,"makeLegalFunctionName":makeLegalFunctionName,"_sqrtf":_sqrtf,"upcastPointer":upcastPointer,"init_emval":init_emval,"shallowCopyInternalPointer":shallowCopyInternalPointer,"nonConstNoSmartPtrRawPointerToWireType":nonConstNoSmartPtrRawPointerToWireType,"_abort":_abort,"throwBindingError":throwBindingError,"exposePublicSymbol":exposePublicSymbol,"RegisteredPointer_fromWireType":RegisteredPointer_fromWireType,"_sin":_sin,"_cosf":_cosf,"__embind_register_memory_view":__embind_register_memory_view,"getInheritedInstance":getInheritedInstance,"setDelayFunction":setDelayFunction,"extendError":extendError,"__embind_register_void":__embind_register_void,"_fflush":_fflush,"RegisteredPointer_getPointee":RegisteredPointer_getPointee,"__emval_register":__emval_register,"__embind_register_std_wstring":__embind_register_std_wstring,"ClassHandle_isAliasOf":ClassHandle_isAliasOf,"RegisteredPointer":RegisteredPointer,"readLatin1String":readLatin1String,"getBasestPointer":getBasestPointer,"getInheritedInstanceCount":getInheritedInstanceCount,"__embind_register_float":__embind_register_float,"integerReadValueFromPointer":integerReadValueFromPointer,"_emscripten_set_main_loop":_emscripten_set_main_loop,"___errno_location":___errno_location,"genericPointerToWireType":genericPointerToWireType,"registerType":registerType,"___cxa_throw":___cxa_throw,"count_emval_handles":count_emval_handles,"requireFunction":requireFunction,"_sqrt":_sqrt,"STACKTOP":STACKTOP,"STACK_MAX":STACK_MAX,"tempDoublePtr":tempDoublePtr,"ABORT":ABORT};// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer) {
"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=0;var n=0;var o=0;var p=0;var q=global.NaN,r=global.Infinity;var s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0,A=0.0;var B=0;var C=0;var D=0;var E=0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=global.Math.floor;var M=global.Math.abs;var N=global.Math.sqrt;var O=global.Math.pow;var P=global.Math.cos;var Q=global.Math.sin;var R=global.Math.tan;var S=global.Math.acos;var T=global.Math.asin;var U=global.Math.atan;var V=global.Math.atan2;var W=global.Math.exp;var X=global.Math.log;var Y=global.Math.ceil;var Z=global.Math.imul;var _=global.Math.min;var $=global.Math.clz32;var aa=env.abort;var ba=env.assert;var ca=env.invoke_iiii;var da=env.invoke_iiiidi;var ea=env.invoke_i;var fa=env.invoke_vi;var ga=env.invoke_vii;var ha=env.invoke_ii;var ia=env.invoke_viii;var ja=env.invoke_v;var ka=env.invoke_iiiii;var la=env.invoke_viiiiii;var ma=env.invoke_viiiii;var na=env.invoke_viiii;var oa=env.floatReadValueFromPointer;var pa=env.simpleReadValueFromPointer;var qa=env._log;var ra=env.throwInternalError;var sa=env.get_first_emval;var ta=env.getLiveInheritedInstances;var ua=env.___assert_fail;var va=env.__ZSt18uncaught_exceptionv;var wa=env.ClassHandle;var xa=env.getShiftFromSize;var ya=env._emscripten_set_main_loop_timing;var za=env._sbrk;var Aa=env._sinf;var Ba=env.runDestructor;var Ca=env._sysconf;var Da=env.throwInstanceAlreadyDeleted;var Ea=env.__embind_register_std_string;var Fa=env.init_RegisteredPointer;var Ga=env._cos;var Ha=env.__embind_register_class_function;var Ia=env.flushPendingDeletes;var Ja=env.makeClassHandle;var Ka=env.whenDependentTypesAreResolved;var La=env.__embind_register_class_constructor;var Ma=env.init_ClassHandle;var Na=env.ClassHandle_clone;var Oa=env.RegisteredClass;var Pa=env.___cxa_find_matching_catch;var Qa=env.embind_init_charCodes;var Ra=env.___setErrNo;var Sa=env.__embind_register_class_class_function;var Ta=env.__embind_register_bool;var Ua=env.___resumeException;var Va=env.createNamedFunction;var Wa=env.__embind_register_emval;var Xa=env._atanf;var Ya=env.__emval_decref;var Za=env.init_embind;var _a=env.constNoSmartPtrRawPointerToWireType;var $a=env.heap32VectorToArray;var ab=env.ClassHandle_delete;var bb=env.RegisteredPointer_destructor;var cb=env.ensureOverloadTable;var db=env._time;var eb=env.new_;var fb=env.downcastPointer;var gb=env.replacePublicSymbol;var hb=env.__embind_register_class;var ib=env.ClassHandle_deleteLater;var jb=env.RegisteredPointer_deleteObject;var kb=env.ClassHandle_isDeleted;var lb=env.__embind_register_integer;var mb=env.___cxa_allocate_exception;var nb=env._floor;var ob=env._fabsf;var pb=env._embind_repr;var qb=env._emscripten_memcpy_big;var rb=env.throwUnboundTypeError;var sb=env.craftInvokerFunction;var tb=env.runDestructors;var ub=env._floorf;var vb=env.makeLegalFunctionName;var wb=env._sqrtf;var xb=env.upcastPointer;var yb=env.init_emval;var zb=env.shallowCopyInternalPointer;var Ab=env.nonConstNoSmartPtrRawPointerToWireType;var Bb=env._abort;var Cb=env.throwBindingError;var Db=env.exposePublicSymbol;var Eb=env.RegisteredPointer_fromWireType;var Fb=env._sin;var Gb=env._cosf;var Hb=env.__embind_register_memory_view;var Ib=env.getInheritedInstance;var Jb=env.setDelayFunction;var Kb=env.extendError;var Lb=env.__embind_register_void;var Mb=env._fflush;var Nb=env.RegisteredPointer_getPointee;var Ob=env.__emval_register;var Pb=env.__embind_register_std_wstring;var Qb=env.ClassHandle_isAliasOf;var Rb=env.RegisteredPointer;var Sb=env.readLatin1String;var Tb=env.getBasestPointer;var Ub=env.getInheritedInstanceCount;var Vb=env.__embind_register_float;var Wb=env.integerReadValueFromPointer;var Xb=env._emscripten_set_main_loop;var Yb=env.___errno_location;var Zb=env.genericPointerToWireType;var _b=env.registerType;var $b=env.___cxa_throw;var ac=env.count_emval_handles;var bc=env.requireFunction;var cc=env._sqrt;var dc=0.0;
// EMSCRIPTEN_START_FUNCS
function qc(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+15&-16;return b|0}function rc(){return i|0}function sc(a){a=a|0;i=a}function tc(a,b){a=a|0;b=b|0;i=a;j=b}function uc(a,b){a=a|0;b=b|0;if(!m){m=a;n=b}}function vc(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0]}function wc(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0];a[k+4>>0]=a[b+4>>0];a[k+5>>0]=a[b+5>>0];a[k+6>>0]=a[b+6>>0];a[k+7>>0]=a[b+7>>0]}function xc(a){a=a|0;B=a}function yc(){return B|0}function zc(a){a=a|0;hb(8,16,32,0,48,3,56,0,56,0,64,104,18);La(8,5,112,136,1,1);a=Md(8)|0;c[a>>2]=1;c[a+4>>2]=0;Ha(8,144,3,176,192,2,a|0,0);a=Md(8)|0;c[a>>2]=2;c[a+4>>2]=0;Ha(8,200,3,176,192,2,a|0,0);a=Md(8)|0;c[a>>2]=3;c[a+4>>2]=0;Ha(8,232,3,176,192,2,a|0,0);a=Md(8)|0;c[a>>2]=3;c[a+4>>2]=0;Ha(8,272,4,296,312,4,a|0,0);a=Md(8)|0;c[a>>2]=4;c[a+4>>2]=0;Ha(8,320,4,328,344,2,a|0,0);Sa(8,352,1,376,384,4,1);return}function Ac(a,b){a=a|0;b=b|0;Sc(c[a>>2]|0,b);return}function Bc(a,b){a=a|0;b=b|0;Tc(c[a>>2]|0,b);return}function Cc(a,b){a=a|0;b=b|0;Uc(c[a>>2]|0,b);return}function Dc(a,b,d){a=a|0;b=b|0;d=d|0;Xc(c[a>>2]|0,b,d)|0;return}function Ec(a,b,d){a=a|0;b=b|0;d=d|0;return Vc(c[a>>2]|0,b,d)|0}function Fc(){return 0}function Gc(a){a=a|0;return 8}function Hc(a){a=a|0;var b=0;if(!a)return;b=c[a>>2]|0;if(b){Rc(b);Od(b)}Od(a);return}function Ic(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=+e;f=f|0;var h=0,j=0,k=0,l=0,m=0;h=i;i=i+16|0;m=h+12|0;l=h;k=h+4|0;j=h+8|0;c[m>>2]=b;c[l>>2]=d;g[k>>2]=e;c[j>>2]=f;a=mc[a&3](m,l,k,j)|0;i=h;return a|0}function Jc(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0;h=i;i=i+32|0;j=h;f=Md(4)|0;a=c[a>>2]|0;b=c[b>>2]|0;k=c[d>>2]|0;d=c[e>>2]|0;c[j+8>>2]=1;g[j+12>>2]=.699999988079071;g[j+16>>2]=1.5;c[j+24>>2]=6;c[j+20>>2]=k;c[j+4>>2]=d;c[j>>2]=d;d=Md(88)|0;Qc(d,a,j,b);c[f>>2]=d;i=h;return f|0}function Kc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=c[a>>2]|0;f=c[a+4>>2]|0;a=b+(f>>1)|0;if(!(f&1)){f=e;ic[f&3](a,d);return}else{f=c[(c[a>>2]|0)+e>>2]|0;ic[f&3](a,d);return}}function Lc(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=c[a>>2]|0;g=c[a+4>>2]|0;a=b+(g>>1)|0;if(!(g&1)){g=f;kc[g&3](a,d,e);return}else{g=c[(c[a>>2]|0)+f>>2]|0;kc[g&3](a,d,e);return}}function Mc(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=c[a>>2]|0;g=c[a+4>>2]|0;a=b+(g>>1)|0;if(g&1)f=c[(c[a>>2]|0)+f>>2]|0;return ec[f&7](a,d,e)|0}function Nc(a){a=a|0;return gc[a&1]()|0}function Oc(){return 10}function Pc(){zc(0);return}function Qc(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;c[a>>2]=0;f=a+12|0;c[a+32>>2]=0;c[a+36>>2]=0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[a+28>>2]=a+32;c[a+48>>2]=0;c[a+52>>2]=0;c[a+44>>2]=a+48;f=a+60|0;c[f>>2]=c[d>>2];c[f+4>>2]=c[d+4>>2];c[f+8>>2]=c[d+8>>2];c[f+12>>2]=c[d+12>>2];c[f+16>>2]=c[d+16>>2];c[f+20>>2]=c[d+20>>2];c[f+24>>2]=c[d+24>>2];if((c[f>>2]|0)>>>0>(c[a+64>>2]|0)>>>0){f=mb(8)|0;He(f,560);c[f>>2]=2736;$b(f|0,2776,7)}if((b|0)==22050|(b|0)==44100|(b|0)==48e3){c[a+4>>2]=b;De(db(0)|0);c[a+8>>2]=Nd(40)|0;f=Md(48)|0;cd(f,d,b,e);c[a>>2]=f;return}else{f=mb(8)|0;He(f,656);c[f>>2]=2736;$b(f|0,2776,7)}}function Rc(a){a=a|0;var b=0;b=c[a+8>>2]|0;if(b)Pd(b);b=c[a>>2]|0;if(b){dd(b);Od(b)}Yc(a+44|0,c[a+48>>2]|0);Zc(a+28|0,c[a+32>>2]|0);return}function Sc(a,b){a=a|0;b=b|0;c[a+16>>2]=b;return}function Tc(a,b){a=a|0;b=b|0;c[a+20>>2]=b;return}function Uc(a,b){a=a|0;b=b|0;c[a+24>>2]=b;return}function Vc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0.0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;L=i;i=i+32|0;G=L+16|0;H=L;if(!e){b=5;i=L;return b|0}J=b+16|0;n=c[J>>2]|0;if(!n){b=4;i=L;return b|0}l=c[b+24>>2]|0;if(!l){b=4;i=L;return b|0}K=b+20|0;m=c[K>>2]|0;if(!m){b=4;i=L;return b|0}I=b+12|0;if(!(c[I>>2]|0))k=0;else{h=0;do{c[m+(h<<2)>>2]=0;c[n+(h<<2)>>2]=0;g[l+(h<<2)>>2]=0.0;h=h+1|0;f=c[I>>2]|0}while(h>>>0<f>>>0);k=f}f=0;j=0.0;do{j=j+ +M(+(+g[d+(f<<2)>>2]));f=f+1|0}while((f|0)!=(e|0));E=j/+(e>>>0)<+g[b+80>>2];f=E&1;if(E){if(k){h=0;do{c[n+(h<<2)>>2]=0;c[m+(h<<2)>>2]=0;h=h+1|0}while(h>>>0<(c[I>>2]|0)>>>0)}}else ed(c[b>>2]|0,d,e,c[b+8>>2]|0,k,n,m,l);B=b+28|0;k=c[B>>2]|0;C=b+40|0;c[C>>2]=k;D=b+40|0;E=b+32|0;h=k;if((h|0)!=(E|0)){o=b+8|0;p=b+36|0;q=b+32|0;d=h;while(1){m=c[o>>2]|0;h=c[I>>2]|0;n=c[d+16>>2]|0;a:do if(!h)F=18;else{e=0;while(1){if((c[m+(e<<2)>>2]|0)==(n|0))break;e=e+1|0;if(e>>>0>=h>>>0){F=18;break a}}h=c[k+4>>2]|0;if(!h)while(1){h=c[k+8>>2]|0;if((c[h>>2]|0)==(k|0))break;else k=h}else while(1){k=c[h>>2]|0;if(!k)break;else h=k}c[D>>2]=h}while(0);if((F|0)==18){F=0;k=c[d+4>>2]|0;m=(k|0)==0;if(m){l=d;while(1){h=c[l+8>>2]|0;if((c[h>>2]|0)==(l|0))break;else l=h}}else{h=k;while(1){l=c[h>>2]|0;if(!l)break;else h=l}}c[D>>2]=h;if(m){h=d;while(1){k=c[h+8>>2]|0;if((c[k>>2]|0)==(h|0))break;else h=k}}else while(1){h=c[k>>2]|0;if(!h)break;else k=h}if((c[B>>2]|0)==(d|0))c[B>>2]=k;c[p>>2]=(c[p>>2]|0)+-1;_c(c[q>>2]|0,d);k=c[d+20>>2]|0;h=k;if(k){l=d+24|0;e=c[l>>2]|0;if((e|0)!=(k|0))c[l>>2]=e+(~((e+-4-h|0)>>>2)<<2);Od(k)}Od(d);h=c[D>>2]|0}if((h|0)==(E|0))break;else{k=h;d=h}}}y=b+44|0;h=c[y>>2]|0;z=b+56|0;c[z>>2]=h;d=b+56|0;A=b+48|0;m=h;if((m|0)!=(A|0)){o=b+8|0;p=b+52|0;q=b+48|0;l=m;while(1){m=c[o>>2]|0;k=c[I>>2]|0;n=c[l+16>>2]|0;b:do if(!k)F=45;else{e=0;while(1){if((c[m+(e<<2)>>2]|0)==(n|0))break;e=e+1|0;if(e>>>0>=k>>>0){F=45;break b}}k=c[h+4>>2]|0;if(!k)while(1){k=c[h+8>>2]|0;if((c[k>>2]|0)==(h|0))break;else h=k}else while(1){m=c[k>>2]|0;if(!m)break;else k=m}c[d>>2]=k}while(0);if((F|0)==45){F=0;k=c[l+4>>2]|0;n=(k|0)==0;if(n){h=l;while(1){m=c[h+8>>2]|0;if((c[m>>2]|0)==(h|0))break;else h=m}}else{m=k;while(1){h=c[m>>2]|0;if(!h)break;else m=h}}c[d>>2]=m;if(n){m=l;while(1){k=c[m+8>>2]|0;if((c[k>>2]|0)==(m|0))break;else m=k}}else while(1){m=c[k>>2]|0;if(!m)break;else k=m}if((c[y>>2]|0)==(l|0))c[y>>2]=k;c[p>>2]=(c[p>>2]|0)+-1;_c(c[q>>2]|0,l);Od(l);k=c[d>>2]|0}if((k|0)==(A|0))break;else{h=k;l=k}}}if(!(c[I>>2]|0)){b=f;i=L;return b|0}o=b+8|0;p=H+4|0;q=H+8|0;r=H+12|0;s=H+4|0;t=A;u=b+48|0;v=b+52|0;w=b+64|0;x=0;do{m=c[E>>2]|0;e=(c[o>>2]|0)+(x<<2)|0;n=c[e>>2]|0;c:do if(!m)F=84;else{k=m;while(1){h=c[k+16>>2]|0;if(n>>>0>=h>>>0){if(h>>>0>=n>>>0){k=E;break}k=k+4|0}k=c[k>>2]|0;if(!k){F=84;break c}}d:do{while(1){if((c[m+16>>2]|0)>>>0>=n>>>0){k=m;break}m=c[m+4>>2]|0;if(!m)break d}m=c[k>>2]|0}while((m|0)!=0);if(!((k|0)!=(E|0)?n>>>0>=(c[k+16>>2]|0)>>>0:0))k=E;c[C>>2]=k;h=c[A>>2]|0;if(h){n=c[e>>2]|0;m=A;e:do{while(1){if((c[h+16>>2]|0)>>>0>=n>>>0){m=h;break}h=c[h+4>>2]|0;if(!h)break e}h=c[m>>2]|0}while((h|0)!=0);if(!((m|0)!=(A|0)?n>>>0>=(c[m+16>>2]|0)>>>0:0))F=82}else F=82;if((F|0)==82){F=0;m=A}c[z>>2]=m}while(0);if((F|0)==84){F=0;a[(c[(c[b>>2]|0)+4>>2]|0)+24>>0]=1;c[H>>2]=n;c[p>>2]=0;c[q>>2]=0;c[r>>2]=0;$c(G,B,H);m=c[s>>2]|0;k=m;if(m){h=c[q>>2]|0;if((h|0)!=(m|0))c[q>>2]=h+(~((h+-4-k|0)>>>2)<<2);Od(m)}e=c[(c[o>>2]|0)+(x<<2)>>2]|0;m=Md(24)|0;c[m+16>>2]=e;c[m+20>>2]=0;k=c[A>>2]|0;do if(k){n=k;while(1){k=c[n+16>>2]|0;if(e>>>0<k>>>0){k=c[n>>2]|0;if(!k){h=n;k=n;F=91;break}}else{if(k>>>0>=e>>>0){k=n;F=96;break}h=n+4|0;k=c[h>>2]|0;if(!k){k=n;F=95;break}}n=k}if((F|0)==91){F=0;c[G>>2]=k;break}else if((F|0)==95){F=0;c[G>>2]=k;break}else if((F|0)==96){F=0;c[G>>2]=k;h=G;break}}else{c[G>>2]=A;h=A;k=t}while(0);if(!(c[h>>2]|0)){c[m>>2]=0;c[m+4>>2]=0;c[m+8>>2]=k;c[h>>2]=m;k=c[c[y>>2]>>2]|0;if(k){c[y>>2]=k;m=c[h>>2]|0}ad(c[u>>2]|0,m);c[v>>2]=(c[v>>2]|0)+1}else Od(m);k=c[E>>2]|0;if(k){h=c[(c[o>>2]|0)+(x<<2)>>2]|0;m=E;f:do{while(1){if((c[k+16>>2]|0)>>>0>=h>>>0){m=k;break}k=c[k+4>>2]|0;if(!k)break f}k=c[m>>2]|0}while((k|0)!=0);if(!((m|0)!=(E|0)?h>>>0>=(c[m+16>>2]|0)>>>0:0))F=111}else F=111;if((F|0)==111){F=0;m=E}c[C>>2]=m;n=m+20|0;e=c[w>>2]|0;l=m+28|0;d=c[n>>2]|0;k=d;if((c[l>>2]|0)-k>>2>>>0<e>>>0){h=m+24|0;m=(c[h>>2]|0)-k|0;if(!e)k=0;else k=Md(e<<2)|0;Re(k|0,d|0,m|0)|0;c[n>>2]=k;c[h>>2]=k+(m>>2<<2);c[l>>2]=k+(e<<2);if(d)Od(d)}k=c[A>>2]|0;if(k){h=c[(c[o>>2]|0)+(x<<2)>>2]|0;m=A;g:do{while(1){if((c[k+16>>2]|0)>>>0>=h>>>0){m=k;break}k=c[k+4>>2]|0;if(!k)break g}k=c[m>>2]|0}while((k|0)!=0);if(!((m|0)!=(A|0)?h>>>0>=(c[m+16>>2]|0)>>>0:0))F=125}else F=125;if((F|0)==125){F=0;m=A}c[z>>2]=m;c[m+20>>2]=0;k=c[D>>2]|0}Wc(b,m+20|0,k+20|0,(c[J>>2]|0)+(x<<2)|0,(c[K>>2]|0)+(x<<2)|0);x=x+1|0}while(x>>>0<(c[I>>2]|0)>>>0);i=L;return f|0}function Wc(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0;j=d+4|0;g=c[j>>2]|0;h=c[d>>2]|0;i=g;if((i-h>>2|0)==(c[a+64>>2]|0)){k=h+4|0;g=i-k|0;Se(h|0,k|0,g|0)|0;g=h+(g>>2<<2)|0;h=c[j>>2]|0;if((h|0)!=(g|0)){g=h+(~((h+-4-g|0)>>>2)<<2)|0;c[j>>2]=g}}if((g|0)==(c[d+8>>2]|0)){bd(d,e);g=c[j>>2]|0}else{c[g>>2]=c[e>>2];g=g+4|0;c[j>>2]=g}d=c[d>>2]|0;if((g|0)==(d|0)){h=0;g=0}else{i=g-d>>2;h=0;g=0;j=0;do{k=(c[d+(j<<2)>>2]|0)==1&1;h=k+h|0;g=(k^1)+g|0;j=j+1|0}while(j>>>0<i>>>0)}c[e>>2]=h>>>0>g>>>0?1:g>>>0<=h>>>0&1;g=c[b>>2]|0;if((g|0)==0?(c[a+60>>2]|0)>>>0<=h>>>0:0){k=1;c[f>>2]=k;c[b>>2]=k;return}k=g;c[f>>2]=k;c[b>>2]=k;return}function Xc(a,b,d){a=a|0;b=b|0;d=d|0;if(d>>>0>10){a=3;return a|0}c[a+12>>2]=d;Re(c[a+8>>2]|0,b|0,d<<2|0)|0;a=0;return a|0}function Yc(a,b){a=a|0;b=b|0;if(!b)return;else{Yc(a,c[b>>2]|0);Yc(a,c[b+4>>2]|0);Od(b);return}}function Zc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;if(!b)return;Zc(a,c[b>>2]|0);Zc(a,c[b+4>>2]|0);a=c[b+20>>2]|0;d=a;if(a){e=b+24|0;f=c[e>>2]|0;if((f|0)!=(a|0))c[e>>2]=f+(~((f+-4-d|0)>>>2)<<2);Od(a)}Od(b);return}function _c(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;f=c[d>>2]|0;do if(f){e=c[d+4>>2]|0;if(!e){g=d;e=d;i=7;break}else while(1){f=c[e>>2]|0;if(!f){i=5;break}else e=f}}else{e=d;i=5}while(0);if((i|0)==5){f=c[e+4>>2]|0;if(!f){l=e+8|0;g=e;f=0;m=0;k=e}else{g=e;i=7}}if((i|0)==7){l=g+8|0;c[f+8>>2]=c[l>>2];m=1;k=e}e=c[l>>2]|0;h=c[e>>2]|0;if((h|0)==(g|0)){c[e>>2]=f;if((g|0)==(b|0)){b=f;h=0}else h=c[e+4>>2]|0}else c[e+4>>2]=f;i=g+12|0;j=(a[i>>0]|0)!=0;if((g|0)!=(d|0)){n=d+8|0;e=c[n>>2]|0;c[l>>2]=e;if((c[c[n>>2]>>2]|0)==(d|0))c[e>>2]=g;else c[e+4>>2]=g;e=c[d>>2]|0;c[k>>2]=e;c[e+8>>2]=g;e=c[d+4>>2]|0;c[g+4>>2]=e;if(e)c[e+8>>2]=g;a[i>>0]=a[d+12>>0]|0;b=(b|0)==(d|0)?g:b}if(!(j&(b|0)!=0))return;if(m){a[f+12>>0]=1;return}else k=h;while(1){i=c[k+8>>2]|0;e=k+12|0;f=(a[e>>0]|0)!=0;if((c[i>>2]|0)==(k|0)){if(f)g=k;else{a[e>>0]=1;a[i+12>>0]=0;f=c[i>>2]|0;h=f+4|0;e=c[h>>2]|0;c[i>>2]=e;if(e)c[e+8>>2]=i;e=i+8|0;c[f+8>>2]=c[e>>2];g=c[e>>2]|0;if((c[g>>2]|0)==(i|0))c[g>>2]=f;else c[g+4>>2]=f;c[h>>2]=i;c[e>>2]=f;g=c[k+4>>2]|0;b=(b|0)==(g|0)?k:b;g=c[g>>2]|0}e=c[g>>2]|0;f=(e|0)==0;if(!f?(a[e+12>>0]|0)==0:0){b=g;i=68;break}n=c[g+4>>2]|0;if((n|0)!=0?(a[n+12>>0]|0)==0:0){i=67;break}a[g+12>>0]=0;f=c[g+8>>2]|0;e=f+12|0;if((f|0)==(b|0)|(a[e>>0]|0)==0){i=64;break}e=c[f+8>>2]|0;e=(c[e>>2]|0)==(f|0)?e+4|0:e}else{if(f)h=k;else{a[e>>0]=1;a[i+12>>0]=0;n=i+4|0;f=c[n>>2]|0;e=c[f>>2]|0;c[n>>2]=e;if(e)c[e+8>>2]=i;e=i+8|0;c[f+8>>2]=c[e>>2];g=c[e>>2]|0;if((c[g>>2]|0)==(i|0))c[g>>2]=f;else c[g+4>>2]=f;c[f>>2]=i;c[e>>2]=f;h=c[k>>2]|0;b=(b|0)==(h|0)?k:b;h=c[h+4>>2]|0}e=c[h>>2]|0;if((e|0)!=0?(a[e+12>>0]|0)==0:0){f=h;g=h;i=38;break}g=c[h+4>>2]|0;if((g|0)!=0?(a[g+12>>0]|0)==0:0){f=h;b=g;g=h;i=39;break}a[h+12>>0]=0;e=c[h+8>>2]|0;if((e|0)==(b|0)){e=b;i=36;break}if(!(a[e+12>>0]|0)){i=36;break}n=c[e+8>>2]|0;e=(c[n>>2]|0)==(e|0)?n+4|0:n}k=c[e>>2]|0}if((i|0)==36){a[e+12>>0]=1;return}else if((i|0)==38){b=c[g+4>>2]|0;if(!b){h=g;i=40}else i=39}else if((i|0)==64){a[e>>0]=1;return}else if((i|0)==67)if(f)i=69;else{b=g;i=68}if((i|0)==39)if(!(a[b+12>>0]|0)){e=g;i=46}else{h=g;i=40}else if((i|0)==68)if(!(a[e+12>>0]|0))i=75;else{g=b;i=69}if((i|0)==40){a[e+12>>0]=1;a[h+12>>0]=0;g=e+4|0;b=c[g>>2]|0;c[f>>2]=b;if(b)c[b+8>>2]=h;b=h+8|0;c[e+8>>2]=c[b>>2];f=c[b>>2]|0;if((c[f>>2]|0)==(h|0))c[f>>2]=e;else c[f+4>>2]=e;c[g>>2]=h;c[b>>2]=e;b=h;i=46}else if((i|0)==69){n=g+4|0;f=c[n>>2]|0;a[f+12>>0]=1;a[g+12>>0]=0;e=c[f>>2]|0;c[n>>2]=e;if(e)c[e+8>>2]=g;e=g+8|0;c[f+8>>2]=c[e>>2];b=c[e>>2]|0;if((c[b>>2]|0)==(g|0))c[b>>2]=f;else c[b+4>>2]=f;c[f>>2]=g;c[e>>2]=f;e=g;b=f;i=75}if((i|0)==46){g=c[e+8>>2]|0;n=g+12|0;a[e+12>>0]=a[n>>0]|0;a[n>>0]=1;a[b+12>>0]=1;n=g+4|0;f=c[n>>2]|0;e=c[f>>2]|0;c[n>>2]=e;if(e)c[e+8>>2]=g;e=g+8|0;c[f+8>>2]=c[e>>2];b=c[e>>2]|0;if((c[b>>2]|0)==(g|0))c[b>>2]=f;else c[b+4>>2]=f;c[f>>2]=g;c[e>>2]=f;return}else if((i|0)==75){h=c[b+8>>2]|0;f=h+12|0;a[b+12>>0]=a[f>>0]|0;a[f>>0]=1;a[e+12>>0]=1;f=c[h>>2]|0;g=f+4|0;e=c[g>>2]|0;c[h>>2]=e;if(e)c[e+8>>2]=h;e=h+8|0;c[f+8>>2]=c[e>>2];b=c[e>>2]|0;if((c[b>>2]|0)==(h|0))c[b>>2]=f;else c[b+4>>2]=f;c[g>>2]=h;c[e>>2]=f;return}}function $c(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;n=i;i=i+16|0;j=n;l=Md(32)|0;h=c[e>>2]|0;c[l+16>>2]=h;k=l+20|0;f=e+4|0;m=l+24|0;c[k>>2]=c[f>>2];g=e+8|0;c[m>>2]=c[g>>2];e=e+12|0;c[l+28>>2]=c[e>>2];c[e>>2]=0;c[g>>2]=0;c[f>>2]=0;f=d+4|0;e=c[f>>2]|0;do if(e){f=e;while(1){e=c[f+16>>2]|0;if(h>>>0<e>>>0){e=c[f>>2]|0;if(!e){e=f;h=4;break}}else{if(e>>>0>=h>>>0){h=9;break}g=f+4|0;e=c[g>>2]|0;if(!e){e=g;h=8;break}}f=e}if((h|0)==4){c[j>>2]=f;g=e;break}else if((h|0)==8){c[j>>2]=f;g=e;break}else if((h|0)==9){c[j>>2]=f;g=j;break}}else{c[j>>2]=f;g=f}while(0);e=c[g>>2]|0;if(!e){c[l>>2]=0;c[l+4>>2]=0;c[l+8>>2]=f;c[g>>2]=l;e=c[c[d>>2]>>2]|0;if(!e)e=l;else{c[d>>2]=e;e=c[g>>2]|0}ad(c[d+4>>2]|0,e);f=d+8|0;c[f>>2]=(c[f>>2]|0)+1;f=1;e=l}else f=0;c[b>>2]=e;a[b+4>>0]=f;if(f<<24>>24){i=n;return}e=c[k>>2]|0;f=e;if(e){g=c[m>>2]|0;if((g|0)!=(e|0))c[m>>2]=g+(~((g+-4-f|0)>>>2)<<2);Od(e)}Od(l);i=n;return}function ad(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;i=(d|0)==(b|0);a[d+12>>0]=i&1;if(i)return;while(1){h=c[d+8>>2]|0;f=h+12|0;if(a[f>>0]|0){d=37;break}k=h+8|0;e=d;d=c[k>>2]|0;g=c[d>>2]|0;if((g|0)==(h|0)){g=c[d+4>>2]|0;if(!g){i=k;f=k;g=d;b=d;d=7;break}g=g+12|0;if(a[g>>0]|0){i=k;f=k;g=d;b=d;d=7;break}a[f>>0]=1;a[d+12>>0]=(d|0)==(b|0)&1;a[g>>0]=1}else{if(!g){j=k;i=h;h=k;b=d;g=d;d=24;break}g=g+12|0;if(a[g>>0]|0){j=k;i=h;h=k;b=d;g=d;d=24;break}a[f>>0]=1;a[d+12>>0]=(d|0)==(b|0)&1;a[g>>0]=1}if((d|0)==(b|0)){d=37;break}}if((d|0)==7){if((c[h>>2]|0)==(e|0))d=h;else{b=h+4|0;d=c[b>>2]|0;e=c[d>>2]|0;c[b>>2]=e;if(!e)e=g;else{c[e+8>>2]=h;e=c[i>>2]|0}g=d+8|0;c[g>>2]=e;e=c[f>>2]|0;if((c[e>>2]|0)==(h|0))c[e>>2]=d;else c[e+4>>2]=d;c[d>>2]=h;c[i>>2]=d;b=c[g>>2]|0}a[d+12>>0]=1;a[b+12>>0]=0;f=c[b>>2]|0;g=f+4|0;d=c[g>>2]|0;c[b>>2]=d;if(d)c[d+8>>2]=b;d=b+8|0;c[f+8>>2]=c[d>>2];e=c[d>>2]|0;if((c[e>>2]|0)==(b|0))c[e>>2]=f;else c[e+4>>2]=f;c[g>>2]=b;c[d>>2]=f;return}else if((d|0)==24){if((c[i>>2]|0)==(e|0)){d=c[i>>2]|0;f=d+4|0;g=c[f>>2]|0;c[i>>2]=g;if(!g)g=b;else{c[g+8>>2]=i;g=c[j>>2]|0}e=d+8|0;c[e>>2]=g;g=c[h>>2]|0;if((c[g>>2]|0)==(i|0))c[g>>2]=d;else c[g+4>>2]=d;c[f>>2]=i;c[j>>2]=d;g=c[e>>2]|0}else d=i;a[d+12>>0]=1;a[g+12>>0]=0;i=g+4|0;f=c[i>>2]|0;d=c[f>>2]|0;c[i>>2]=d;if(d)c[d+8>>2]=g;d=g+8|0;c[f+8>>2]=c[d>>2];e=c[d>>2]|0;if((c[e>>2]|0)==(g|0))c[e>>2]=f;else c[e+4>>2]=f;c[f>>2]=g;c[d>>2]=f;return}else if((d|0)==37)return}function bd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;i=a+4|0;j=c[a>>2]|0;k=j;e=((c[i>>2]|0)-k>>2)+1|0;if(e>>>0>1073741823)Ld(a);l=a+8|0;f=j;d=(c[l>>2]|0)-f|0;if(d>>2>>>0<536870911){d=d>>1;d=d>>>0<e>>>0?e:d;f=(c[i>>2]|0)-f|0;e=f>>2;if(!d){h=0;g=0;d=f}else m=6}else{f=(c[i>>2]|0)-f|0;d=1073741823;e=f>>2;m=6}if((m|0)==6){h=d;g=Md(d<<2)|0;d=f}c[g+(e<<2)>>2]=c[b>>2];Re(g|0,j|0,d|0)|0;c[a>>2]=g;c[i>>2]=g+(e+1<<2);c[l>>2]=g+(h<<2);if(!k)return;Od(k);return}function cd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,i=0,j=0,k=0,l=0;c[a>>2]=0;f=a+4|0;c[f>>2]=0;c[a+8>>2]=e;c[a+12>>2]=36;c[a+16>>2]=20;c[a+20>>2]=127;c[a+24>>2]=d;i=a+28|0;h=a+36|0;c[i>>2]=0;c[i+4>>2]=0;c[i+8>>2]=0;c[i+12>>2]=0;c[i+16>>2]=0;j=Md(40)|0;c[j+24>>2]=32768;c[j+28>>2]=8192;k=Nd(131072)|0;c[j+4>>2]=k;c[j+20>>2]=Nd(32768)|0;c[j+16>>2]=k+131072;l=k;c[j+8>>2]=l;c[j+12>>2]=l;Oe(k|0,0,32768)|0;c[j>>2]=688;c[j+32>>2]=8192;c[j+36>>2]=e;c[a+40>>2]=j;rd(20,127,36,h,i,a+32|0);h=c[h>>2]|0;c[a+44>>2]=Nd(h>>>0>1073741823?-1:h<<2)|0;e=Md(24)|0;od(e,d,8192,c[i>>2]|0,h,2);c[a>>2]=e;d=Md(28)|0;kd(d,c[b+8>>2]|0,+g[b+16>>2],c[b+24>>2]|0,+g[b+12>>2]);c[f>>2]=d;return}function dd(a){a=a|0;var b=0;b=c[a+28>>2]|0;if(b)Pd(b);b=c[a+32>>2]|0;if(b)Pd(b);b=c[a+44>>2]|0;if(b)Pd(b);b=c[a>>2]|0;if(b){pd(b);Od(b)}b=c[a+4>>2]|0;if(b){ld(b);Od(b)}b=c[a+40>>2]|0;if(!b)return;hc[c[(c[b>>2]|0)+4>>2]&31](b);return}function ed(a,b,d,e,f,h,i,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;i=i|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0;k=a+40|0;o=c[k>>2]|0;kc[c[(c[o>>2]|0)+12>>2]&3](o,b,d);if(f){d=0;do{c[h+(d<<2)>>2]=0;g[j+(d<<2)>>2]=0.0;d=d+1|0}while((d|0)!=(f|0))}o=c[k>>2]|0;m=c[o+32>>2]|0;p=o+8|0;b=c[p>>2]|0;k=b;n=(c[o+12>>2]|0)-k|0;d=n>>2;d=(n|0)>-4?d:0-d|0;if((n|0)<0)d=(c[o+24>>2]|0)-d|0;if(d>>>0<m>>>0)return;n=c[a>>2]|0;l=c[o+36>>2]|0;d=(c[o+16>>2]|0)-k|0;k=d>>2;if(k){if(m>>>0>k>>>0){q=o+20|0;Re(c[q>>2]|0,b|0,d|0)|0;Re((c[q>>2]|0)+(k<<2)|0,c[o+4>>2]|0,m-k<<2|0)|0;b=c[q>>2]|0}}else b=c[o+4>>2]|0;if(l>>>0>k>>>0)d=(c[o+4>>2]|0)+(l-k<<2)|0;else d=(c[p>>2]|0)+(l<<2)|0;c[p>>2]=d;o=a+44|0;qd(n,b,o);q=a+36|0;sd(c[o>>2]|0,c[q>>2]|0);md(c[a+4>>2]|0,c[o>>2]|0,c[a+32>>2]|0,c[q>>2]|0,e,f,h,i,j);return}function fd(a){a=a|0;var b=0;c[a>>2]=728;b=c[a+4>>2]|0;if(b)Pd(b);b=c[a+20>>2]|0;if(!b)return;Pd(b);return}function gd(a){a=a|0;var b=0;c[a>>2]=728;b=c[a+4>>2]|0;if(b)Pd(b);b=c[a+20>>2]|0;if(!b){Od(a);return}Pd(b);Od(a);return}function hd(a){a=a|0;var b=0;b=c[a+4>>2]|0;c[a+8>>2]=b;c[a+12>>2]=b;Oe(b|0,0,c[a+24>>2]|0)|0;return}function id(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=a+12|0;f=c[e>>2]|0;g=(c[a+16>>2]|0)-f|0;h=g>>2;if(h>>>0>d>>>0){Re(f|0,b|0,d<<2|0)|0;b=(c[e>>2]|0)+(d<<2)|0;c[e>>2]=b;return}else{Re(f|0,b|0,g|0)|0;g=c[a+4>>2]|0;c[e>>2]=g;a=d-h|0;Re(g|0,b|0,a<<2|0)|0;b=(c[e>>2]|0)+(a<<2)|0;c[e>>2]=b;return}}function jd(a){a=a|0;var b=0;c[a>>2]=728;b=c[a+4>>2]|0;if(b)Pd(b);b=c[a+20>>2]|0;if(!b){Od(a);return}Pd(b);Od(a);return}function kd(b,d,e,f,h){b=b|0;d=d|0;e=+e;f=f|0;h=+h;c[b>>2]=d;g[b+4>>2]=e;c[b+8>>2]=f;g[b+12>>2]=h;c[b+16>>2]=0;c[b+20>>2]=0;a[b+24>>0]=1;return}function ld(b){b=b|0;if(a[b+24>>0]|0)return;b=c[b+16>>2]|0;if(!b)return;Pd(b);return}function md(b,e,f,h,i,j,k,l,m){b=b|0;e=e|0;f=f|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0.0,E=0.0;A=c[b>>2]|0;n=A+1|0;A=A+2|0;B=Nd(A)|0;C=b+24|0;if(!(a[C>>0]|0)){l=c[b+16>>2]|0;v=+(h>>>0);if(!h){u=0.0;s=0.0;r=0.0;q=0.0;p=0.0}else{t=0;u=0.0;s=0.0;r=0.0;q=0.0;p=0.0;do{E=+g[e+(t<<2)>>2];u=u+E;s=s+E*E;D=+g[l+(t<<2)>>2];q=q+D;p=p+D*D;r=r+E*D;t=t+1|0}while((t|0)!=(h|0))}p=+M(+((v*r-q*u)/(+N(+(v*s-u*u))*+N(+(v*p-q*q)))))}else p=1.0;y=j>>>0>1;if(!y){if(j){z=0;x=8}}else{z=j+-1|0;z=Nd(z>>>0>1073741823?-1:z<<2)|0;x=8}if((x|0)==8){x=b+12|0;w=B+n|0;if(!A){l=0;t=0;do{if(y){n=0;l=0;do{if((n|0)!=(t|0)){c[z+(l<<2)>>2]=c[i+(n<<2)>>2];l=l+1|0}n=n+1|0}while((n|0)!=(j|0))}n=c[i+(t<<2)>>2]|0;a[B>>0]=(nd(b,e,f,h,n,z,l)|0)&1;g[m>>2]=.5400000214576721;if(c[b>>2]|0){o=0;do{o=o+1|0;a[B+o>>0]=(nd(b,e,f,h,(o*12|0)+n|0,z,l)|0)&1}while(o>>>0<(c[b>>2]|0)>>>0)}a[w>>0]=p>+g[x>>2]&1;g[m+(t<<2)>>2]=1.0;c[k+(t<<2)>>2]=1;t=t+1|0}while((t|0)!=(j|0))}else{l=0;t=0;do{Oe(B|0,1,A|0)|0;if(y){n=0;l=0;do{if((n|0)!=(t|0)){c[z+(l<<2)>>2]=c[i+(n<<2)>>2];l=l+1|0}n=n+1|0}while((n|0)!=(j|0))}n=c[i+(t<<2)>>2]|0;a[B>>0]=(nd(b,e,f,h,n,z,l)|0)&1;g[m>>2]=.5400000214576721;if(c[b>>2]|0){o=0;do{o=o+1|0;a[B+o>>0]=(nd(b,e,f,h,(o*12|0)+n|0,z,l)|0)&1}while(o>>>0<(c[b>>2]|0)>>>0)}a[w>>0]=p>+g[x>>2]&1;n=0;o=1;do{o=(d[B+n>>0]&(o&1)|0)!=0;n=n+1|0}while((n|0)!=(A|0));if(o){g[m+(t<<2)>>2]=1.0;c[k+(t<<2)>>2]=1}t=t+1|0}while((t|0)!=(j|0))}if(!((z|0)==0|y^1))Pd(z)}Pd(B);if(!(a[C>>0]|0)){m=c[b+16>>2]|0;k=h<<2;Re(m|0,e|0,k|0)|0;return}else{m=Nd(h>>>0>1073741823?-1:h<<2)|0;c[b+16>>2]=m;a[C>>0]=0;k=h<<2;Re(m|0,e|0,k|0)|0;return}}function nd(a,b,d,e,f,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0.0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0,t=0;t=i;i=i+16|0;s=t+4|0;m=t;q=+g[d>>2];r=+g[d+(e+-1<<2)>>2];k=+(f>>>0);n=td(d,e,k+-.6000000238418579)|0;l=td(d,e,k+.6000000238418579)|0;g[s>>2]=0.0;g[m>>2]=0.0;vd(b,e,n,l,s,m);m=a+8|0;l=c[m>>2]|0;n=f-l|0;k=+(n>>>0);do if(k>q+1.0){if(j){o=0;p=0;do{p=p|(c[h+(o<<2)>>2]|0)==(n|0);o=o+1|0}while((o|0)!=(j|0));if(p){q=0.0;break}}l=td(d,e,k+-.6000000238418579)|0;q=+ud(b,e,l,td(d,e,k+.6000000238418579)|0);l=c[m>>2]|0}else q=0.0;while(0);n=l+f|0;k=+(n>>>0);do if(k<r+-1.0){if(j){l=0;m=0;do{m=m|(c[h+(l<<2)>>2]|0)==(n|0);l=l+1|0}while((l|0)!=(j|0));if(m){k=0.0;break}}h=td(d,e,k+-.6000000238418579)|0;k=+ud(b,e,h,td(d,e,k+.6000000238418579)|0)}else k=0.0;while(0);i=t;return +g[s>>2]/((q+k)*.5+9.999999747378752e-006)>+g[a+4>>2]|0}function od(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;c[a+4>>2]=b;c[a+8>>2]=d;c[a+12>>2]=e;c[a+16>>2]=f;c[a+20>>2]=g;e=Md(48)|0;wd(e,d,g,b);c[a>>2]=e;return}function pd(a){a=a|0;c[a+12>>2]=0;a=c[a>>2]|0;if(!a)return;yd(a);Od(a);return}function qd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0,j=0.0,k=0,l=0,m=0.0,n=0.0,o=0,p=0;p=i;i=i+16|0;l=p+4|0;o=p;c[l>>2]=0;c[o>>2]=0;zd(c[a>>2]|0,b,l,o);b=c[a+16>>2]|0;if(!b)b=-1;else{Oe(c[d>>2]|0,0,(b>>>0>1?b<<2:4)|0)|0;b=b+-1|0}e=c[a+12>>2]|0;n=+g[e>>2];m=+g[e+(b<<2)>>2];k=c[a+8>>2]|0;if(!k)b=c[l>>2]|0;else{j=+L(+(1.0/(+X(+(+g[e+4>>2]/n))/.6931471824645996)+.5));h=c[o>>2]|0;b=c[l>>2]|0;e=c[d>>2]|0;a=0;do{f=+g[h+(a<<2)>>2];if(!(!(f>=n)|!(f<=m))){d=~~+L(+(j*+X(+(f/n))/.6931471824645996+.5))>>>0;d=e+(d<<2)|0;g[d>>2]=+g[b+(a<<2)>>2]+ +g[d>>2]}a=a+1|0}while(a>>>0<k>>>0)}if(b)Pd(b);b=c[o>>2]|0;if(!b){i=p;return}Pd(b);i=p;return}function rd(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var i=0.0,j=0,k=0.0,l=0.0;k=12.0/+(d>>>0);j=(~~+L(+(+((b-a|0)>>>0)/k))>>>0)+1|0;c[e>>2]=j;e=j>>>0>1073741823?-1:j<<2;c[f>>2]=Nd(e)|0;e=Nd(e)|0;c[h>>2]=e;if(!j)return;i=+(a>>>0);d=c[f>>2]|0;b=0;do{l=i+k*+(b>>>0);g[e+(b<<2)>>2]=l;g[d+(b<<2)>>2]=+Be((l+-69.0)/12.0)*440.0;b=b+1|0}while(b>>>0<j>>>0);return}function sd(a,b){a=a|0;b=b|0;var c=0,d=0.0,e=0.0,f=0.0;e=+g[a>>2];if(b>>>0>1){c=1;d=e;do{f=+g[a+(c<<2)>>2];d=f>d?f:d;c=c+1|0}while((c|0)!=(b|0))}else d=e;if(!b)return;g[a>>2]=e/d;if((b|0)==1)return;else c=1;do{g[a+(c<<2)>>2]=+g[a+(c<<2)>>2]/d;c=c+1|0}while((c|0)!=(b|0));return}function td(a,b,c){a=a|0;b=b|0;c=+c;var d=0,e=0.0,f=0.0,h=0;if(!b){b=0;return b|0}else{d=0;e=0.0;h=0}do{f=+M(+(+g[a+(h<<2)>>2]-c));if(h){if(f<e){d=h;e=f}}else e=f;h=h+1|0}while((h|0)!=(b|0));return d|0}function ud(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0.0,f=0.0;e=+g[a+(c<<2)>>2];b=c+1|0;d=d+1|0;if(b>>>0>=d>>>0)return +e;do{f=+g[a+(b<<2)>>2];e=f>e?f:e;b=b+1|0}while((b|0)!=(d|0));return +e}function vd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var h=0.0,i=0,j=0,k=0;g[e>>2]=0.0;g[f>>2]=0.0;if((d-c|0)>>>0<2)return;b=c+1|0;if(b>>>0<d>>>0)i=b;else return;while(1){h=+g[a+(i<<2)>>2];if((h>+g[e>>2]?(k=a+(c<<2)|0,h>+g[k>>2]):0)?(j=a+(c+2<<2)|0,h>+g[j>>2]):0){g[e>>2]=h;g[f>>2]=(+g[k>>2]+ +g[j>>2])*.5}b=i+1|0;if((b|0)==(d|0))break;else{c=i;i=b}}return}function wd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0;f=i;i=i+32|0;k=f+12|0;j=f;c[a>>2]=b;c[a+4>>2]=d;h=a+8|0;c[h>>2]=e;m=Z(d,b)|0;c[a+12>>2]=m;d=a+16|0;c[d>>2]=m>>>1;l=m+2|0;l=l>>>0>1073741823?-1:l<<2;c[a+28>>2]=Nd(l)|0;c[a+32>>2]=Nd(l)|0;c[a+36>>2]=Nd((m*5|0)>>>3<<2)|0;m=b>>>0>1073741823?-1:b<<2;l=a+20|0;c[l>>2]=Nd(m)|0;e=a+24|0;c[e>>2]=Nd(m)|0;Je(k,816,7);xd(0,k,b,+((c[h>>2]|0)>>>0),l);Ke(k);Je(j,824,11);xd(0,j,b,+((c[h>>2]|0)>>>0),e);Ke(j);g[a+40>>2]=+((c[h>>2]|0)>>>0)/(+((c[d>>2]|0)>>>0)*2.0);g[a+44>>2]=.15915493667125702;i=f;return}function xd(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=+e;f=f|0;var h=0.0;if(!(Me(b,816)|0)){if(!d)return;e=+(d>>>0)+-1.0;a=c[f>>2]|0;b=0;do{g[a+(b<<2)>>2]=(1.0-+P(+(+(b>>>0)*6.2831854820251465/e)))*.5;b=b+1|0}while((b|0)!=(d|0));return}if(Me(b,824)|0){d=mb(8)|0;He(d,840);c[d>>2]=2736;$b(d|0,2776,7)}if(!d)return;h=+(d>>>0);e=e*-3.1415927410125732/h;h=h+-1.0;a=c[f>>2]|0;b=0;do{g[a+(b<<2)>>2]=e*+Q(+(+(b>>>0)*6.2831854820251465/h));b=b+1|0}while((b|0)!=(d|0));return}function yd(a){a=a|0;var b=0;b=c[a+20>>2]|0;if(b)Pd(b);b=c[a+24>>2]|0;if(b)Pd(b);b=c[a+28>>2]|0;if(b)Pd(b);b=c[a+32>>2]|0;if(b)Pd(b);b=c[a+36>>2]|0;if(!b)return;Pd(b);return}function zd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0.0;r=i;i=i+272|0;o=r;q=a+28|0;m=a+12|0;h=c[m>>2]|0;f=(h<<2)+8|0;if((f|0)>0){p=f>>2;Oe(c[q>>2]|0,0,(p+((f|0)<4?p^1073741823:1073741822)<<2)+8|0)|0;f=c[m>>2]|0}else f=h;p=a+32|0;f=(f<<2)+8|0;if((f|0)>0){l=f>>2;Oe(c[p>>2]|0,0,(l+((f|0)<4?l^1073741823:1073741822)<<2)+8|0)|0}n=c[a>>2]|0;if(!n)f=c[q>>2]|0;else{k=c[a+20>>2]|0;f=c[q>>2]|0;h=c[a+24>>2]|0;j=c[p>>2]|0;l=0;do{s=b+(l<<2)|0;g[f+(l<<2)>>2]=+g[k+(l<<2)>>2]*+g[s>>2];g[j+(l<<2)>>2]=+g[h+(l<<2)>>2]*+g[s>>2];l=l+1|0}while(l>>>0<n>>>0)}c[o>>2]=0;n=a+36|0;Ed(c[m>>2]|0,1,f,o,c[n>>2]|0);Ed(c[m>>2]|0,1,c[p>>2]|0,o,c[n>>2]|0);n=c[q>>2]|0;s=n+4|0;b=c[m>>2]|0;c[n+(b<<2)>>2]=c[s>>2];g[s>>2]=0.0;m=b+1|0;g[n+(m<<2)>>2]=0.0;n=c[p>>2]|0;s=n+4|0;c[n+(b<<2)>>2]=c[s>>2];g[s>>2]=0.0;g[n+(m<<2)>>2]=0.0;m=c[a+16>>2]|0;n=m>>>0>1073741823?-1:m<<2;c[d>>2]=Nd(n)|0;n=Nd(n)|0;c[e>>2]=n;if(!m){i=r;return}l=a+40|0;b=a+44|0;k=c[q>>2]|0;j=c[p>>2]|0;f=c[d>>2]|0;h=0;do{a=h<<1;d=k+(a<<2)|0;t=+g[d>>2];q=a|1;s=k+(q<<2)|0;u=+g[s>>2];g[n+(h<<2)>>2]=+(h>>>0)*+g[l>>2]+ +g[b>>2]*(+g[j+(a<<2)>>2]*u-t*+g[j+(q<<2)>>2])/(t*t+u*u);u=+g[d>>2];t=+g[s>>2];g[f+(h<<2)>>2]=+N(+(u*u+t*t));h=h+1|0}while(h>>>0<m>>>0);i=r;return}function Ad(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0,i=0.0,j=0,k=0.0,l=0,m=0;c[b>>2]=a;c[b+4>>2]=1;if((a|0)<=2)return;h=a>>1;i=+(h|0);f=+U(1.0)/i;g[d>>2]=1.0;g[d+4>>2]=0.0;i=+P(+(i*f));g[d+(h<<2)>>2]=i;g[d+(h+1<<2)>>2]=i;if((h|0)>2)e=2;else return;do{k=f*+(e|0);i=+P(+k);k=+Q(+k);g[d+(e<<2)>>2]=i;g[d+((e|1)<<2)>>2]=k;j=a-e|0;g[d+(j<<2)>>2]=k;g[d+(j+1<<2)>>2]=i;e=e+2|0}while((e|0)<(h|0));e=h+-2|0;if((e|0)>1)do{m=e<<1;l=c[d+((m|1)<<2)>>2]|0;j=e+h|0;c[d+(j<<2)>>2]=c[d+(m<<2)>>2];c[d+(j+1<<2)>>2]=l;e=e+-2|0}while((e|0)>1);Bd(a,b+8|0,d);return}function Bd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;c[b>>2]=0;if((a|0)>8){f=1;while(1){a=a>>1;if((f|0)>0){e=0;do{c[b+(e+f<<2)>>2]=(c[b+(e<<2)>>2]|0)+a;e=e+1|0}while((e|0)!=(f|0))}g=f<<1;e=f<<4;if((e|0)<(a|0))f=g;else{j=g;break}}}else{e=8;j=1}i=j<<1;if((e|0)!=(a|0)){if((j|0)>1)f=1;else return;do{a=c[b+(f<<2)>>2]|0;e=f<<1;g=0;do{n=a+(g<<1)|0;h=(c[b+(g<<2)>>2]|0)+e|0;r=d+(n<<2)|0;l=c[r>>2]|0;o=d+(n+1<<2)|0;m=c[o>>2]|0;k=d+(h<<2)|0;p=d+(h+1<<2)|0;q=c[p>>2]|0;c[r>>2]=c[k>>2];c[o>>2]=q;c[k>>2]=l;c[p>>2]=m;n=n+i|0;h=h+i|0;p=d+(n<<2)|0;m=c[p>>2]|0;n=d+(n+1<<2)|0;k=c[n>>2]|0;l=d+(h<<2)|0;h=d+(h+1<<2)|0;o=c[h>>2]|0;c[p>>2]=c[l>>2];c[n>>2]=o;c[l>>2]=m;c[h>>2]=k;g=g+1|0}while((g|0)!=(f|0));f=f+1|0}while((f|0)!=(j|0));return}if((j|0)<=0)return;a=j<<2;f=0;do{g=c[b+(f<<2)>>2]|0;e=f<<1;if((f|0)>0){h=0;do{n=g+(h<<1)|0;r=(c[b+(h<<2)>>2]|0)+e|0;l=d+(n<<2)|0;p=c[l>>2]|0;m=d+(n+1<<2)|0;o=c[m>>2]|0;q=d+(r<<2)|0;k=d+(r+1<<2)|0;s=c[k>>2]|0;c[l>>2]=c[q>>2];c[m>>2]=s;c[q>>2]=p;c[k>>2]=o;n=n+i|0;r=r+a|0;k=d+(n<<2)|0;o=c[k>>2]|0;q=d+(n+1<<2)|0;p=c[q>>2]|0;m=d+(r<<2)|0;s=d+(r+1<<2)|0;l=c[s>>2]|0;c[k>>2]=c[m>>2];c[q>>2]=l;c[m>>2]=o;c[s>>2]=p;n=n+i|0;r=r-i|0;s=d+(n<<2)|0;p=c[s>>2]|0;m=d+(n+1<<2)|0;o=c[m>>2]|0;q=d+(r<<2)|0;l=d+(r+1<<2)|0;k=c[l>>2]|0;c[s>>2]=c[q>>2];c[m>>2]=k;c[q>>2]=p;c[l>>2]=o;n=n+i|0;r=r+a|0;l=d+(n<<2)|0;o=c[l>>2]|0;n=d+(n+1<<2)|0;q=c[n>>2]|0;p=d+(r<<2)|0;r=d+(r+1<<2)|0;m=c[r>>2]|0;c[l>>2]=c[p>>2];c[n>>2]=m;c[p>>2]=o;c[r>>2]=q;h=h+1|0}while((h|0)!=(f|0))}o=e+i+g|0;s=o+i|0;m=d+(o<<2)|0;p=c[m>>2]|0;o=d+(o+1<<2)|0;r=c[o>>2]|0;q=d+(s<<2)|0;s=d+(s+1<<2)|0;n=c[s>>2]|0;c[m>>2]=c[q>>2];c[o>>2]=n;c[q>>2]=p;c[s>>2]=r;f=f+1|0}while((f|0)!=(j|0));return}function Cd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,h=0.0,i=0.0,j=0.0,k=0.0,l=0,m=0,n=0.0,o=0.0,p=0,q=0.0,r=0.0,s=0,t=0,u=0.0,v=0.0;if((a|0)>15){Fd(a,b,c);if((a|0)<128)e=16;else{e=128;d=16;while(1){Gd(a,d,b,c);d=e<<3;if((d|0)>(a|0))break;else{f=e;e=d;d=f}}}}else e=2;d=e<<1;if((d|0)<(a|0)){if((e|0)>0)d=0;else return;do{a=d+e|0;m=a+e|0;f=m+e|0;t=b+(d<<2)|0;h=+g[t>>2];l=b+(a<<2)|0;k=+g[l>>2];r=h+k;s=b+((d|1)<<2)|0;v=+g[s>>2];a=b+(a+1<<2)|0;i=+g[a>>2];o=v+i;k=h-k;i=v-i;p=b+(m<<2)|0;v=+g[p>>2];c=b+(f<<2)|0;h=+g[c>>2];q=v+h;m=b+(m+1<<2)|0;u=+g[m>>2];f=b+(f+1<<2)|0;j=+g[f>>2];n=u+j;h=v-h;j=u-j;g[t>>2]=r+q;g[s>>2]=o+n;g[p>>2]=r-q;g[m>>2]=o-n;g[l>>2]=k-j;g[a>>2]=i+h;g[c>>2]=k+j;g[f>>2]=i-h;d=d+2|0}while((d|0)<(e|0));return}else{if((d|0)==(a|0)&(e|0)>0)d=0;else return;do{t=d+e|0;f=b+(d<<2)|0;u=+g[f>>2];s=b+(t<<2)|0;o=+g[s>>2];l=b+((d|1)<<2)|0;n=+g[l>>2];t=b+(t+1<<2)|0;v=n-+g[t>>2];g[f>>2]=u+o;g[l>>2]=+g[t>>2]+n;g[s>>2]=u-o;g[t>>2]=v;d=d+2|0}while((d|0)<(e|0));return}}function Dd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0,f=0,h=0,i=0.0,j=0.0,k=0.0,l=0.0,m=0,n=0,o=0.0,p=0.0,q=0,r=0.0,s=0.0,t=0,u=0,v=0,w=0.0,x=0.0,y=0,z=0.0,A=0.0,B=0,C=0,D=0,E=0.0,F=0.0,G=0,H=0.0,I=0.0,J=0,K=0,L=0.0,M=0.0;if((a|0)>16){Fd(a,b,c);if((a|0)>128){f=128;d=16;while(1){Gd(a,d,b,c);d=f<<3;if((d|0)<(a|0)){h=f;f=d;d=h}else break}}else f=16}else f=2;h=f<<2;if((h|0)<(a|0)){e=+g[c+8>>2];if((f|0)>0)d=0;else return;do{J=d+f|0;h=J+f|0;B=h+f|0;n=B+f|0;D=n+f|0;a=D+f|0;v=a+f|0;u=b+(d<<2)|0;x=+g[u>>2];K=b+(J<<2)|0;M=+g[K>>2];F=x+M;t=b+((d|1)<<2)|0;L=+g[t>>2];J=b+(J+1<<2)|0;p=+g[J>>2];I=-L-p;M=x-M;L=p-L;m=b+(h<<2)|0;p=+g[m>>2];C=b+(B<<2)|0;x=+g[C>>2];l=p+x;h=b+(h+1<<2)|0;s=+g[h>>2];B=b+(B+1<<2)|0;A=+g[B>>2];j=s+A;x=p-x;A=s-A;s=F+l;p=I-j;l=F-l;j=I+j;I=M-A;F=L-x;A=M+A;x=L+x;q=b+(n<<2)|0;L=+g[q>>2];G=b+(D<<2)|0;M=+g[G>>2];w=L+M;n=b+(n+1<<2)|0;o=+g[n>>2];D=b+(D+1<<2)|0;H=+g[D>>2];E=o+H;M=L-M;H=o-H;c=b+(a<<2)|0;o=+g[c>>2];y=b+(v<<2)|0;L=+g[y>>2];i=o+L;a=b+(a+1<<2)|0;r=+g[a>>2];v=b+(v+1<<2)|0;z=+g[v>>2];k=r+z;L=o-L;z=r-z;r=w+i;o=E+k;i=w-i;k=E-k;E=M-z;w=H+L;z=M+z;L=H-L;H=e*(E-w);E=e*(w+E);w=e*(z-L);z=e*(L+z);g[K>>2]=I+H;g[J>>2]=F-E;g[G>>2]=I-H;g[D>>2]=F+E;g[C>>2]=A-z;g[B>>2]=x-w;g[y>>2]=A+z;g[v>>2]=x+w;g[u>>2]=s+r;g[t>>2]=p-o;g[q>>2]=s-r;g[n>>2]=p+o;g[m>>2]=l-k;g[h>>2]=j-i;g[c>>2]=l+k;g[a>>2]=j+i;d=d+2|0}while((d|0)<(f|0));return}d=(f|0)>0;if((h|0)==(a|0)){if(d)d=0;else return;do{D=d+f|0;y=D+f|0;K=y+f|0;J=b+(d<<2)|0;L=+g[J>>2];B=b+(D<<2)|0;E=+g[B>>2];M=L+E;u=b+((d|1)<<2)|0;H=+g[u>>2];D=b+(D+1<<2)|0;r=+g[D>>2];z=-H-r;E=L-E;H=r-H;v=b+(y<<2)|0;r=+g[v>>2];G=b+(K<<2)|0;L=+g[G>>2];x=r+L;y=b+(y+1<<2)|0;w=+g[y>>2];K=b+(K+1<<2)|0;F=+g[K>>2];A=w+F;L=r-L;F=w-F;g[J>>2]=M+x;g[u>>2]=z-A;g[v>>2]=M-x;g[y>>2]=z+A;g[B>>2]=E-F;g[D>>2]=H-L;g[G>>2]=E+F;g[K>>2]=H+L;d=d+2|0}while((d|0)<(f|0));return}else{if(d)d=0;else return;do{K=d+f|0;B=b+(d<<2)|0;F=+g[B>>2];G=b+(K<<2)|0;H=+g[G>>2];D=b+((d|1)<<2)|0;E=+g[D>>2];K=b+(K+1<<2)|0;L=+g[K>>2]-E;g[B>>2]=F+H;g[D>>2]=-E-+g[K>>2];g[G>>2]=F-H;g[K>>2]=L;d=d+2|0}while((d|0)<(f|0));return}}function Ed(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,i=0,j=0.0,k=0,l=0,m=0,n=0.0,o=0,p=0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0;h=c[e>>2]|0;if((h<<2|0)<(a|0)){h=a>>2;Ad(h,e,f)}i=e+4|0;k=c[i>>2]|0;if((k<<2|0)<(a|0)){k=a>>2;c[i>>2]=k;if((k|0)>1?(l=a>>3,n=+(l|0),j=+U(1.0)/n,n=+P(+(n*j)),g[f+(h<<2)>>2]=n,g[f+(h+l<<2)>>2]=n*.5,(l|0)>1):0){i=h+k|0;m=1;do{n=j*+(m|0);g[f+(m+h<<2)>>2]=+P(+n)*.5;g[f+(i-m<<2)>>2]=+Q(+n)*.5;m=m+1|0}while((m|0)!=(l|0))}}if((b|0)>-1){if((a|0)>4){Bd(a,e+8|0,d);Cd(a,d,f);m=a>>1;b=(k<<1|0)/(m|0)|0;if((m|0)>2){i=k+h|0;k=2;l=0;do{e=a-k|0;l=l+b|0;t=.5-+g[f+(i-l<<2)>>2];v=+g[f+(l+h<<2)>>2];r=d+(k<<2)|0;s=+g[r>>2];o=d+(e<<2)|0;u=s-+g[o>>2];p=d+((k|1)<<2)|0;q=+g[p>>2];e=d+(e+1<<2)|0;n=q+ +g[e>>2];j=t*u-v*n;n=v*u+t*n;g[r>>2]=s-j;g[p>>2]=q-n;g[o>>2]=+g[o>>2]+j;g[e>>2]=+g[e>>2]-n;k=k+2|0}while((k|0)<(m|0))}}else if((a|0)==4)Cd(4,d,f);t=+g[d>>2];r=d+4|0;v=+g[r>>2];g[d>>2]=t+v;g[r>>2]=t-v;return}v=+g[d>>2];i=d+4|0;j=(v-+g[i>>2])*.5;g[i>>2]=j;g[d>>2]=v-j;if((a|0)<=4){if((a|0)!=4)return;Cd(4,d,f);return}g[i>>2]=-j;l=a>>1;b=(k<<1|0)/(l|0)|0;if((l|0)>2){k=k+h|0;i=2;m=0;do{r=a-i|0;m=m+b|0;j=.5-+g[f+(k-m<<2)>>2];q=+g[f+(m+h<<2)>>2];w=d+(i<<2)|0;u=+g[w>>2];p=d+(r<<2)|0;v=u-+g[p>>2];o=d+((i|1)<<2)|0;s=+g[o>>2];r=d+(r+1<<2)|0;n=s+ +g[r>>2];t=j*v+q*n;v=j*n-q*v;g[w>>2]=u-t;g[o>>2]=v-s;g[p>>2]=+g[p>>2]+t;g[r>>2]=v-+g[r>>2];i=i+2|0}while((i|0)<(l|0))}w=d+(l+1<<2)|0;g[w>>2]=-+g[w>>2];Bd(a,e+8|0,d);Dd(a,d,f);return}function Fd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0,f=0,h=0.0,i=0.0,j=0.0,k=0.0,l=0,m=0,n=0,o=0.0,p=0.0,q=0,r=0.0,s=0.0,t=0,u=0,v=0.0,w=0.0,x=0,y=0.0,z=0.0,A=0,B=0,C=0,D=0.0,E=0.0,F=0,G=0.0,H=0.0,I=0,J=0,K=0.0,L=0.0,M=0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0;d=+g[c+8>>2];w=+g[b>>2];J=b+8|0;L=+g[J>>2];E=w+L;t=b+4|0;p=+g[t>>2];I=b+12|0;K=+g[I>>2];H=p+K;L=w-L;K=p-K;m=b+16|0;p=+g[m>>2];B=b+24|0;w=+g[B>>2];k=p+w;l=b+20|0;s=+g[l>>2];A=b+28|0;z=+g[A>>2];i=s+z;w=p-w;z=s-z;s=E+k;p=H+i;k=E-k;i=H-i;H=L-z;E=K+w;z=L+z;w=K-w;q=b+32|0;K=+g[q>>2];F=b+40|0;L=+g[F>>2];v=K+L;n=b+36|0;o=+g[n>>2];C=b+44|0;G=+g[C>>2];D=o+G;L=K-L;G=o-G;f=b+48|0;o=+g[f>>2];x=b+56|0;K=+g[x>>2];h=o+K;e=b+52|0;r=+g[e>>2];u=b+60|0;y=+g[u>>2];j=r+y;K=o-K;y=r-y;r=v+h;o=D+j;h=v-h;j=D-j;D=L-y;v=G+K;y=L+y;K=G-K;G=d*(D-v);D=d*(v+D);v=d*(y-K);y=d*(K+y);g[J>>2]=H+G;g[I>>2]=E+D;g[F>>2]=H-G;g[C>>2]=E-D;g[B>>2]=z-y;g[A>>2]=w+v;g[x>>2]=z+y;g[u>>2]=w-v;g[b>>2]=s+r;g[t>>2]=p+o;g[q>>2]=s-r;g[n>>2]=p-o;g[m>>2]=k-j;g[l>>2]=i+h;g[f>>2]=k+j;g[e>>2]=i-h;if((a|0)<=16)return;s=+g[c+16>>2];k=+g[c+20>>2];t=b+64|0;j=+g[t>>2];M=b+72|0;O=+g[M>>2];N=j+O;J=b+68|0;z=+g[J>>2];f=b+76|0;v=+g[f>>2];h=z+v;O=j-O;v=z-v;A=b+80|0;z=+g[A>>2];e=b+88|0;j=+g[e>>2];H=z+j;B=b+84|0;D=+g[B>>2];l=b+92|0;r=+g[l>>2];K=D+r;j=z-j;r=D-r;D=N+H;z=h+K;H=N-H;K=h-K;h=O-r;N=v+j;r=O+r;j=v-j;u=b+96|0;v=+g[u>>2];C=b+104|0;O=+g[C>>2];w=v+O;x=b+100|0;y=+g[x>>2];m=b+108|0;i=+g[m>>2];p=y+i;O=v-O;i=y-i;F=b+112|0;y=+g[F>>2];q=b+120|0;v=+g[q>>2];G=y+v;I=b+116|0;E=+g[I>>2];n=b+124|0;o=+g[n>>2];L=E+o;v=y-v;o=E-o;E=w+G;y=p+L;G=w-G;L=p-L;p=O-o;w=i+v;o=O+o;i=v-i;v=k*p-s*w;p=k*w+s*p;w=k*i+s*o;o=s*i-k*o;i=s*h-k*N;h=s*N+k*h;g[M>>2]=i+v;g[f>>2]=h+p;g[C>>2]=p-h;g[m>>2]=i-v;v=k*r-s*j;r=k*j+s*r;g[e>>2]=v-w;g[l>>2]=r+o;g[q>>2]=o-r;g[n>>2]=v+w;g[t>>2]=D+E;g[J>>2]=z+y;g[u>>2]=y-z;g[x>>2]=D-E;E=H-L;D=K+G;g[A>>2]=d*(E-D);g[B>>2]=d*(D+E);K=G-K;L=H+L;g[F>>2]=d*(K-L);g[I>>2]=d*(K+L);if((a|0)>32){e=32;f=4}else return;do{J=f;f=f+4|0;$=+g[c+(f<<2)>>2];Z=+g[c+(J+5<<2)>>2];w=+g[c+(J+6<<2)>>2];z=+g[c+(J+7<<2)>>2];r=z*2.0;S=$-Z*r;Q=$*r-Z;y=1.0-z*r;r=w*r;j=r*2.0;U=S-Z*j;R=$*j-Q;H=w-z*j;L=w*j-z;i=$-j*Q;j=j*S-Z;J=b+(e<<2)|0;h=+g[J>>2];aa=b+((e|2)<<2)|0;_=+g[aa>>2];V=h+_;u=b+((e|1)<<2)|0;O=+g[u>>2];X=b+((e|3)<<2)|0;Y=+g[X>>2];W=O+Y;_=h-_;Y=O-Y;B=b+((e|4)<<2)|0;O=+g[B>>2];l=b+((e|6)<<2)|0;h=+g[l>>2];E=O+h;F=b+((e|5)<<2)|0;o=+g[F>>2];q=b+((e|7)<<2)|0;p=+g[q>>2];G=o+p;h=O-h;p=o-p;o=V+E;O=W+G;E=V-E;G=W-G;W=_-p;V=Y+h;p=_+p;h=Y-h;x=b+((e|8)<<2)|0;Y=+g[x>>2];C=b+((e|10)<<2)|0;_=+g[C>>2];k=Y+_;A=b+((e|9)<<2)|0;D=+g[A>>2];m=b+((e|11)<<2)|0;P=+g[m>>2];T=D+P;_=Y-_;P=D-P;I=b+((e|12)<<2)|0;D=+g[I>>2];n=b+((e|14)<<2)|0;Y=+g[n>>2];K=D+Y;M=b+((e|13)<<2)|0;v=+g[M>>2];t=b+((e|15)<<2)|0;s=+g[t>>2];N=v+s;Y=D-Y;s=v-s;v=k+K;D=T+N;K=k-K;N=T-N;T=_-s;k=P+Y;s=_+s;Y=P-Y;P=d*(T-k);T=d*(k+T);k=d*(s-Y);s=d*(Y+s);Y=W+P;_=V+T;g[aa>>2]=$*Y-Z*_;g[X>>2]=$*_+Z*Y;P=W-P;T=V-T;g[C>>2]=U*P-R*T;g[m>>2]=U*T+R*P;P=p-s;R=h+k;g[l>>2]=S*P-Q*R;g[q>>2]=S*R+Q*P;s=p+s;k=h-k;g[n>>2]=i*s-j*k;g[t>>2]=i*k+j*s;g[J>>2]=o+v;g[u>>2]=O+D;v=o-v;D=O-D;g[x>>2]=y*v-r*D;g[A>>2]=r*v+y*D;D=E-N;y=G+K;g[B>>2]=w*D-z*y;g[F>>2]=w*y+z*D;N=E+N;K=G-K;g[I>>2]=H*N-L*K;g[M>>2]=H*K+L*N;e=e+16|0}while((e|0)<(a|0));return}function Gd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0.0,h=0.0,i=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0,w=0,x=0,y=0.0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0.0,M=0.0,N=0,O=0,P=0.0,Q=0.0,R=0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0,da=0.0,ea=0.0,fa=0;x=b<<3;y=+g[d+8>>2];z=(b|0)>0;if(z){e=0;do{N=e+b|0;i=N+b|0;H=i+b|0;B=H+b|0;J=B+b|0;w=J+b|0;F=w+b|0;E=c+(e<<2)|0;n=+g[E>>2];O=c+(N<<2)|0;Q=+g[O>>2];m=n+Q;D=c+((e|1)<<2)|0;l=+g[D>>2];N=c+(N+1<<2)|0;P=+g[N>>2];M=l+P;Q=n-Q;P=l-P;A=c+(i<<2)|0;l=+g[A>>2];I=c+(H<<2)|0;n=+g[I>>2];r=l+n;i=c+(i+1<<2)|0;j=+g[i>>2];H=c+(H+1<<2)|0;h=+g[H>>2];t=j+h;n=l-n;h=j-h;j=m+r;l=M+t;r=m-r;t=M-t;M=Q-h;m=P+n;h=Q+h;n=P-n;C=c+(B<<2)|0;P=+g[C>>2];K=c+(J<<2)|0;Q=+g[K>>2];k=P+Q;B=c+(B+1<<2)|0;q=+g[B>>2];J=c+(J+1<<2)|0;L=+g[J>>2];f=q+L;Q=P-Q;L=q-L;v=c+(w<<2)|0;q=+g[v>>2];G=c+(F<<2)|0;P=+g[G>>2];u=q+P;w=c+(w+1<<2)|0;p=+g[w>>2];F=c+(F+1<<2)|0;o=+g[F>>2];s=p+o;P=q-P;o=p-o;p=k+u;q=f+s;u=k-u;s=f-s;f=Q-o;k=L+P;o=Q+o;P=L-P;L=y*(f-k);f=y*(k+f);k=y*(o-P);o=y*(P+o);g[O>>2]=M+L;g[N>>2]=m+f;g[K>>2]=M-L;g[J>>2]=m-f;g[I>>2]=h-o;g[H>>2]=n+k;g[G>>2]=h+o;g[F>>2]=n-k;g[E>>2]=j+p;g[D>>2]=l+q;g[C>>2]=j-p;g[B>>2]=l-q;g[A>>2]=r-s;g[i>>2]=t+u;g[v>>2]=r+s;g[w>>2]=t-u;e=e+2|0}while((e|0)<(b|0))}if((x|0)>=(a|0))return;f=+g[d+16>>2];h=+g[d+20>>2];e=b*9|0;if((x|0)<(e|0)){i=x;do{J=i+b|0;H=J+b|0;I=H+b|0;F=I+b|0;v=F+b|0;O=v+b|0;A=O+b|0;B=c+(i<<2)|0;k=+g[B>>2];R=c+(J<<2)|0;T=+g[R>>2];S=k+T;D=c+((i|1)<<2)|0;s=+g[D>>2];J=c+(J+1<<2)|0;l=+g[J>>2];o=s+l;T=k-T;l=s-l;G=c+(H<<2)|0;s=+g[G>>2];w=c+(I<<2)|0;k=+g[w>>2];L=s+k;H=c+(H+1<<2)|0;t=+g[H>>2];I=c+(I+1<<2)|0;p=+g[I>>2];M=t+p;k=s-k;p=t-p;t=S+L;s=o+M;L=S-L;M=o-M;o=T-p;S=l+k;p=T+p;k=l-k;E=c+(F<<2)|0;l=+g[E>>2];C=c+(v<<2)|0;T=+g[C>>2];q=l+T;F=c+(F+1<<2)|0;r=+g[F>>2];v=c+(v+1<<2)|0;n=+g[v>>2];m=r+n;T=l-T;n=r-n;K=c+(O<<2)|0;r=+g[K>>2];N=c+(A<<2)|0;l=+g[N>>2];u=r+l;O=c+(O+1<<2)|0;P=+g[O>>2];A=c+(A+1<<2)|0;j=+g[A>>2];Q=P+j;l=r-l;j=P-j;P=q+u;r=m+Q;u=q-u;Q=m-Q;m=T-j;q=n+l;j=T+j;n=l-n;l=h*m-f*q;m=h*q+f*m;q=h*n+f*j;j=f*n-h*j;n=f*o-h*S;o=f*S+h*o;g[R>>2]=n+l;g[J>>2]=o+m;g[C>>2]=m-o;g[v>>2]=n-l;l=h*p-f*k;p=h*k+f*p;g[w>>2]=l-q;g[I>>2]=p+j;g[N>>2]=j-p;g[A>>2]=l+q;g[B>>2]=t+P;g[D>>2]=s+r;g[E>>2]=r-s;g[F>>2]=t-P;P=L-Q;t=M+u;g[G>>2]=y*(P-t);g[H>>2]=y*(t+P);M=u-M;Q=L+Q;g[K>>2]=y*(M-Q);g[O>>2]=y*(M+Q);i=i+2|0}while((i|0)<(e|0))}e=b<<4;if((e|0)<(a|0))w=4;else return;do{i=w;w=w+4|0;f=+g[d+(w<<2)>>2];h=+g[d+(i+5<<2)>>2];j=+g[d+(i+6<<2)>>2];k=+g[d+(i+7<<2)>>2];o=k*2.0;l=f-h*o;m=f*o-h;n=1.0-k*o;o=j*o;u=o*2.0;p=l-h*u;q=f*u-m;r=j-k*u;s=j*u-k;t=f-u*m;u=u*l-h;i=e+b|0;if(z){v=e;do{ca=v+b|0;K=ca+b|0;N=K+b|0;G=N+b|0;C=G+b|0;R=C+b|0;B=R+b|0;D=c+(v<<2)|0;Y=+g[D>>2];fa=c+(ca<<2)|0;ea=+g[fa>>2];aa=Y+ea;E=c+((v|1)<<2)|0;U=+g[E>>2];ca=c+(ca+1<<2)|0;da=+g[ca>>2];ba=U+da;ea=Y-ea;da=U-da;H=c+(K<<2)|0;U=+g[H>>2];I=c+(N<<2)|0;Y=+g[I>>2];M=U+Y;K=c+(K+1<<2)|0;V=+g[K>>2];N=c+(N+1<<2)|0;Z=+g[N>>2];Q=V+Z;Y=U-Y;Z=V-Z;V=aa+M;U=ba+Q;M=aa-M;Q=ba-Q;ba=ea-Z;aa=da+Y;Z=ea+Z;Y=da-Y;F=c+(G<<2)|0;da=+g[F>>2];J=c+(C<<2)|0;ea=+g[J>>2];X=da+ea;G=c+(G+1<<2)|0;L=+g[G>>2];C=c+(C+1<<2)|0;_=+g[C>>2];$=L+_;ea=da-ea;_=L-_;O=c+(R<<2)|0;L=+g[O>>2];A=c+(B<<2)|0;da=+g[A>>2];S=L+da;R=c+(R+1<<2)|0;P=+g[R>>2];B=c+(B+1<<2)|0;W=+g[B>>2];T=P+W;da=L-da;W=P-W;P=X+S;L=$+T;S=X-S;T=$-T;$=ea-W;X=_+da;W=ea+W;da=_-da;_=y*($-X);$=y*(X+$);X=y*(W-da);W=y*(da+W);da=ba+_;ea=aa+$;g[fa>>2]=f*da-h*ea;g[ca>>2]=f*ea+h*da;_=ba-_;$=aa-$;g[J>>2]=p*_-q*$;g[C>>2]=p*$+q*_;_=Z-W;$=Y+X;g[I>>2]=l*_-m*$;g[N>>2]=l*$+m*_;W=Z+W;X=Y-X;g[A>>2]=t*W-u*X;g[B>>2]=t*X+u*W;g[D>>2]=V+P;g[E>>2]=U+L;P=V-P;L=U-L;g[F>>2]=n*P-o*L;g[G>>2]=o*P+n*L;L=M-T;P=Q+S;g[H>>2]=j*L-k*P;g[K>>2]=j*P+k*L;T=M+T;S=Q-S;g[O>>2]=r*T-s*S;g[R>>2]=r*S+s*T;v=v+2|0}while((v|0)<(i|0))}e=e+x|0}while((e|0)<(a|0));return}function Hd(a){a=a|0;return Kd(c[a+4>>2]|0)|0}function Id(a){a=a|0;Lb(3136,864);Ta(3168,872,1,1,0);lb(3184,880,1,-128,127);lb(3216,888,1,-128,127);lb(3200,904,1,0,255);lb(3232,920,2,-32768,32767);lb(3248,928,2,0,65535);lb(3264,944,4,-2147483648,2147483647);lb(3280,952,4,0,-1);lb(3296,968,4,-2147483648,2147483647);lb(3312,976,4,0,-1);Vb(3328,992,4);Vb(3344,1e3,8);Ea(1008,1032);Ea(1048,1072);Pb(1112,4,1136);Wa(1152,1160);Hb(1176,0,1184);Hb(1216,0,1224);Hb(1264,1,1272);Hb(1312,2,1320);Hb(1352,3,1360);Hb(1400,4,1408);Hb(1440,5,1448);Hb(1488,4,1496);Hb(1528,5,1536);Hb(1216,0,1576);Hb(1264,1,1608);Hb(1312,2,1648);Hb(1352,3,1688);Hb(1400,4,1728);Hb(1440,5,1768);Hb(1808,6,1816);Hb(1848,7,1856);Hb(1888,7,1896);return}function Jd(){Id(0);return}function Kd(a){a=a|0;var b=0,c=0;b=(Qe(a|0)|0)+1|0;c=Fe(b)|0;if(!c){a=0;return a|0}Re(c|0,a|0,b|0)|0;a=c;return a|0}function Ld(a){a=a|0;ua(3616,3640,303,3720)}function Md(a){a=a|0;var b=0;b=(a|0)==0?1:a;a=Fe(b)|0;a:do if(!a){while(1){a=Td()|0;if(!a)break;lc[a&0]();a=Fe(b)|0;if(a)break a}b=mb(4)|0;c[b>>2]=2592;$b(b|0,2624,5)}while(0);return a|0}function Nd(a){a=a|0;return Md(a)|0}function Od(a){a=a|0;Ge(a);return}function Pd(a){a=a|0;Od(a);return}function Qd(a){a=a|0;return}function Rd(a){a=a|0;Od(a);return}function Sd(a){a=a|0;return 3744}function Td(){var a=0;a=c[660]|0;c[660]=a+0;return a|0}function Ud(a){a=a|0;return}function Vd(a){a=a|0;c[a>>2]=2680;ye(a+4|0);return}function Wd(a){a=a|0;Vd(a);Od(a);return}function Xd(a){a=a|0;return c[a+4>>2]|0}function Yd(a){a=a|0;Vd(a);Od(a);return}function Zd(a){a=a|0;return}function _d(a){a=a|0;return}function $d(a){a=a|0;return}function ae(a){a=a|0;return}function be(a){a=a|0;Od(a);return}function ce(a){a=a|0;Od(a);return}function de(a){a=a|0;Od(a);return}function ee(a){a=a|0;Od(a);return}function fe(a){a=a|0;Od(a);return}function ge(a,b,c){a=a|0;b=b|0;c=c|0;return (a|0)==(b|0)|0}function he(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=i;i=i+64|0;g=h;if((a|0)!=(b|0))if((b|0)!=0?(f=oe(b,2856,2912,0)|0,(f|0)!=0):0){b=g;e=b+56|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(e|0));c[g>>2]=f;c[g+8>>2]=a;c[g+12>>2]=-1;c[g+48>>2]=1;pc[c[(c[f>>2]|0)+28>>2]&7](f,g,c[d>>2]|0,1);if((c[g+24>>2]|0)==1){c[d>>2]=c[g+16>>2];b=1}else b=0}else b=0;else b=1;i=h;return b|0}function ie(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0;b=d+16|0;g=c[b>>2]|0;do if(g){if((g|0)!=(e|0)){f=d+36|0;c[f>>2]=(c[f>>2]|0)+1;c[d+24>>2]=2;a[d+54>>0]=1;break}b=d+24|0;if((c[b>>2]|0)==2)c[b>>2]=f}else{c[b>>2]=e;c[d+24>>2]=f;c[d+36>>2]=1}while(0);return}function je(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;if((a|0)==(c[b+8>>2]|0))ie(0,b,d,e);return}function ke(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;if((a|0)==(c[b+8>>2]|0))ie(0,b,d,e);else{a=c[a+8>>2]|0;pc[c[(c[a>>2]|0)+28>>2]&7](a,b,d,e)}return}function le(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;g=c[a+4>>2]|0;f=g>>8;if(g&1)f=c[(c[d>>2]|0)+f>>2]|0;a=c[a>>2]|0;pc[c[(c[a>>2]|0)+28>>2]&7](a,b,d+f|0,(g&2|0)!=0?e:2);return}function me(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;a:do if((b|0)!=(c[d+8>>2]|0)){h=c[b+12>>2]|0;g=b+16+(h<<3)|0;le(b+16|0,d,e,f);if((h|0)>1){h=d+54|0;b=b+24|0;do{le(b,d,e,f);if(a[h>>0]|0)break a;b=b+8|0}while(b>>>0<g>>>0)}}else ie(0,d,e,f);while(0);return}function ne(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;k=i;i=i+64|0;j=k;c[d>>2]=c[c[d>>2]>>2];if(!((a|0)==(b|0)|(b|0)==3152))if(((b|0)!=0?(e=oe(b,2856,3024,0)|0,(e|0)!=0):0)?(c[e+8>>2]&~c[a+8>>2]|0)==0:0){b=c[a+12>>2]|0;a=e+12|0;if(!((b|0)==3136?1:(b|0)==(c[a>>2]|0)))if((((b|0)!=0?(g=oe(b,2856,2912,0)|0,(g|0)!=0):0)?(f=c[a>>2]|0,(f|0)!=0):0)?(h=oe(f,2856,2912,0)|0,(h|0)!=0):0){a=j;b=a+56|0;do{c[a>>2]=0;a=a+4|0}while((a|0)<(b|0));c[j>>2]=h;c[j+8>>2]=g;c[j+12>>2]=-1;c[j+48>>2]=1;pc[c[(c[h>>2]|0)+28>>2]&7](h,j,c[d>>2]|0,1);if((c[j+24>>2]|0)==1){c[d>>2]=c[j+16>>2];a=1}else a=0}else a=0;else a=1}else a=0;else a=1;i=k;return a|0}function oe(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+64|0;q=r;p=c[d>>2]|0;o=d+(c[p+-8>>2]|0)|0;p=c[p+-4>>2]|0;c[q>>2]=f;c[q+4>>2]=d;c[q+8>>2]=e;c[q+12>>2]=g;h=q+16|0;j=q+20|0;k=q+24|0;l=q+28|0;m=q+32|0;n=q+40|0;g=(p|0)==(f|0);d=h;e=d+36|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(e|0));b[h+36>>1]=0;a[h+38>>0]=0;do if(g){c[q+48>>2]=1;nc[c[(c[f>>2]|0)+20>>2]&3](f,q,o,o,1,0);g=(c[k>>2]|0)==1?o:0}else{oc[c[(c[p>>2]|0)+24>>2]&3](p,q,o,1,0);g=c[q+36>>2]|0;if(!g){g=(c[n>>2]|0)==1&(c[l>>2]|0)==1&(c[m>>2]|0)==1?c[j>>2]|0:0;break}else if((g|0)!=1){g=0;break}if((c[k>>2]|0)!=1?!((c[n>>2]|0)==0&(c[l>>2]|0)==1&(c[m>>2]|0)==1):0){g=0;break}g=c[h>>2]|0}while(0);i=r;return g|0}function pe(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;a[d+53>>0]=1;do if((c[d+4>>2]|0)==(f|0)){a[d+52>>0]=1;f=d+16|0;b=c[f>>2]|0;if(!b){c[f>>2]=e;c[d+24>>2]=g;c[d+36>>2]=1;if(!((g|0)==1?(c[d+48>>2]|0)==1:0))break;a[d+54>>0]=1;break}if((b|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;a[d+54>>0]=1;break}b=d+24|0;f=c[b>>2]|0;if((f|0)==2){c[b>>2]=g;f=g}if((f|0)==1?(c[d+48>>2]|0)==1:0)a[d+54>>0]=1}while(0);return}function qe(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;a:do if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)==(e|0)?(h=d+28|0,(c[h>>2]|0)!=1):0)c[h>>2]=f}else{if((b|0)!=(c[d>>2]|0)){r=c[b+12>>2]|0;k=b+16+(r<<3)|0;se(b+16|0,d,e,f,g);h=b+24|0;if((r|0)<=1)break;i=c[b+8>>2]|0;if((i&2|0)==0?(l=d+36|0,(c[l>>2]|0)!=1):0){if(!(i&1)){i=d+54|0;while(1){if(a[i>>0]|0)break a;if((c[l>>2]|0)==1)break a;se(h,d,e,f,g);h=h+8|0;if(h>>>0>=k>>>0)break a}}i=d+24|0;j=d+54|0;while(1){if(a[j>>0]|0)break a;if((c[l>>2]|0)==1?(c[i>>2]|0)==1:0)break a;se(h,d,e,f,g);h=h+8|0;if(h>>>0>=k>>>0)break a}}i=d+54|0;while(1){if(a[i>>0]|0)break a;se(h,d,e,f,g);h=h+8|0;if(h>>>0>=k>>>0)break a}}if((c[d+16>>2]|0)!=(e|0)?(q=d+20|0,(c[q>>2]|0)!=(e|0)):0){c[d+32>>2]=f;n=d+44|0;if((c[n>>2]|0)==4)break;i=c[b+12>>2]|0;j=b+16+(i<<3)|0;l=d+52|0;f=d+53|0;o=d+54|0;m=b+8|0;p=d+24|0;b:do if((i|0)>0){i=0;h=0;k=b+16|0;while(1){a[l>>0]=0;a[f>>0]=0;re(k,d,e,e,1,g);if(a[o>>0]|0){r=20;break b}do if(a[f>>0]|0){if(!(a[l>>0]|0))if(!(c[m>>2]&1)){h=1;r=20;break b}else{h=1;break}if((c[p>>2]|0)==1)break b;if(!(c[m>>2]&2))break b;else{i=1;h=1}}while(0);k=k+8|0;if(k>>>0>=j>>>0){r=20;break}}}else{i=0;h=0;r=20}while(0);do if((r|0)==20){if((!i?(c[q>>2]=e,e=d+40|0,c[e>>2]=(c[e>>2]|0)+1,(c[d+36>>2]|0)==1):0)?(c[p>>2]|0)==2:0){a[o>>0]=1;if(h)break}else r=24;if((r|0)==24?h:0)break;c[n>>2]=4;break a}while(0);c[n>>2]=3;break}if((f|0)==1)c[d+32>>2]=1}while(0);return}function re(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;i=c[a+4>>2]|0;h=i>>8;if(i&1)h=c[(c[e>>2]|0)+h>>2]|0;a=c[a>>2]|0;nc[c[(c[a>>2]|0)+20>>2]&3](a,b,d,e+h|0,(i&2|0)!=0?f:2,g);return}function se(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=c[a+4>>2]|0;g=h>>8;if(h&1)g=c[(c[d>>2]|0)+g>>2]|0;a=c[a>>2]|0;oc[c[(c[a>>2]|0)+24>>2]&3](a,b,d+g|0,(h&2|0)!=0?e:2,f);return}function te(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0;a:do if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)==(e|0)?(h=d+28|0,(c[h>>2]|0)!=1):0)c[h>>2]=f}else{if((b|0)!=(c[d>>2]|0)){i=c[b+8>>2]|0;oc[c[(c[i>>2]|0)+24>>2]&3](i,d,e,f,g);break}if((c[d+16>>2]|0)!=(e|0)?(i=d+20|0,(c[i>>2]|0)!=(e|0)):0){c[d+32>>2]=f;f=d+44|0;if((c[f>>2]|0)==4)break;h=d+52|0;a[h>>0]=0;k=d+53|0;a[k>>0]=0;b=c[b+8>>2]|0;nc[c[(c[b>>2]|0)+20>>2]&3](b,d,e,e,1,g);if(a[k>>0]|0){if(!(a[h>>0]|0)){h=1;j=13}}else{h=0;j=13}do if((j|0)==13){c[i>>2]=e;i=d+40|0;c[i>>2]=(c[i>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54>>0]=1;if(h)break}else j=16;if((j|0)==16?h:0)break;c[f>>2]=4;break a}while(0);c[f>>2]=3;break}if((f|0)==1)c[d+32>>2]=1}while(0);return}function ue(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;do if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)==(e|0)?(i=d+28|0,(c[i>>2]|0)!=1):0)c[i>>2]=f}else if((b|0)==(c[d>>2]|0)){if((c[d+16>>2]|0)!=(e|0)?(h=d+20|0,(c[h>>2]|0)!=(e|0)):0){c[d+32>>2]=f;c[h>>2]=e;g=d+40|0;c[g>>2]=(c[g>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0)a[d+54>>0]=1;c[d+44>>2]=4;break}if((f|0)==1)c[d+32>>2]=1}while(0);return}function ve(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;if((b|0)==(c[d+8>>2]|0))pe(0,d,e,f,g);else{m=d+52|0;n=a[m>>0]|0;o=d+53|0;p=a[o>>0]|0;l=c[b+12>>2]|0;i=b+16+(l<<3)|0;a[m>>0]=0;a[o>>0]=0;re(b+16|0,d,e,f,g,h);a:do if((l|0)>1){j=d+24|0;k=b+8|0;l=d+54|0;b=b+24|0;do{if(a[l>>0]|0)break a;if(!(a[m>>0]|0)){if((a[o>>0]|0)!=0?(c[k>>2]&1|0)==0:0)break a}else{if((c[j>>2]|0)==1)break a;if(!(c[k>>2]&2))break a}a[m>>0]=0;a[o>>0]=0;re(b,d,e,f,g,h);b=b+8|0}while(b>>>0<i>>>0)}while(0);a[m>>0]=n;a[o>>0]=p}return}function we(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;if((a|0)==(c[b+8>>2]|0))pe(0,b,d,e,f);else{a=c[a+8>>2]|0;nc[c[(c[a>>2]|0)+20>>2]&3](a,b,d,e,f,g)}return}function xe(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;if((a|0)==(c[b+8>>2]|0))pe(0,b,d,e,f);return}function ye(a){a=a|0;var b=0,d=0;d=(c[a>>2]|0)+-4|0;b=c[d>>2]|0;c[d>>2]=b+-1;if((b+-1|0)<0)Od((c[a>>2]|0)+-12|0);return}function ze(a){a=a|0;ua(3760,3792,1164,3720)}function Ae(a){a=a|0;ua(3872,3792,1175,3904)}function Be(a){a=+a;var b=0,d=0,e=0,f=0,j=0.0,l=0.0;f=i;i=i+16|0;e=f;h[k>>3]=a;b=c[k+4>>2]|0;d=b&2147483647;do if(d>>>0>1083174911){if(((b|0)>-1|(b|0)==-1&(c[k>>2]|0)>>>0>4294967295)&d>>>0>1083179007){a=a*89884656743115795.0e291;i=f;return +a}if(d>>>0>2146435071){a=-1.0/a;i=f;return +a}if((b|0)<0)if(!(a<=-1075.0)){if(!(a+-4503599627370496.0+4503599627370496.0!=a))break;g[e>>2]=-1.401298464324817e-045/a;break}else{g[e>>2]=-1.401298464324817e-045/a;a=0.0;i=f;return +a}}else if(d>>>0<1016070144){a=a+1.0;i=f;return +a}while(0);l=a+26388279066624.0;h[k>>3]=l;e=(c[k>>2]|0)+128|0;d=e<<1&510;j=+h[3928+(d<<3)>>3];a=a-(l+-26388279066624.0)-+h[3928+((d|1)<<3)>>3];a=+Ce(j+j*a*(a*(a*(a*(a*1.3333559164630223e-003+.009618129842126066)+.0555041086648214)+.2402265069591)+.6931471805599453),(e&-256|0)/256|0);i=f;return +a}function Ce(a,b){a=+a;b=b|0;var d=0;if((b|0)>1023){a=a*89884656743115795.0e291;d=b+-1023|0;if((d|0)>1023){d=b+-2046|0;d=(d|0)>1023?1023:d;a=a*89884656743115795.0e291}}else if((b|0)<-1022){a=a*2.2250738585072014e-308;d=b+1022|0;if((d|0)<-1022){d=b+2044|0;d=(d|0)<-1022?-1022:d;a=a*2.2250738585072014e-308}}else d=b;d=Pe(d+1023|0,0,52)|0;b=B;c[k>>2]=d;c[k+4>>2]=b;return +(a*+h[k>>3])}function De(a){a=a|0;var b=0;b=8024;c[b>>2]=a+-1;c[b+4>>2]=0;return}function Ee(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;if(!d){g=0;return g|0}else{f=d;e=b}while(1){b=a[e>>0]|0;d=a[c>>0]|0;if(b<<24>>24!=d<<24>>24)break;f=f+-1|0;if(!f){d=0;g=5;break}else{e=e+1|0;c=c+1|0}}if((g|0)==5)return d|0;g=(b&255)-(d&255)|0;return g|0}function Fe(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;do if(a>>>0<245){o=a>>>0<11?16:a+11&-8;a=o>>>3;k=c[2008]|0;f=k>>>a;if(f&3){d=(f&1^1)+a|0;f=d<<1;e=8072+(f<<2)|0;f=8072+(f+2<<2)|0;g=c[f>>2]|0;h=g+8|0;i=c[h>>2]|0;do if((e|0)!=(i|0)){if(i>>>0<(c[2012]|0)>>>0)Bb();b=i+12|0;if((c[b>>2]|0)==(g|0)){c[b>>2]=e;c[f>>2]=i;break}else Bb()}else c[2008]=k&~(1<<d);while(0);L=d<<3;c[g+4>>2]=L|3;L=g+(L|4)|0;c[L>>2]=c[L>>2]|1;L=h;return L|0}i=c[2010]|0;if(o>>>0>i>>>0){if(f){e=2<<a;e=f<<a&(e|0-e);e=(e&0-e)+-1|0;j=e>>>12&16;e=e>>>j;h=e>>>5&8;e=e>>>h;g=e>>>2&4;e=e>>>g;d=e>>>1&2;e=e>>>d;f=e>>>1&1;f=(h|j|g|d|f)+(e>>>f)|0;e=f<<1;d=8072+(e<<2)|0;e=8072+(e+2<<2)|0;g=c[e>>2]|0;j=g+8|0;h=c[j>>2]|0;do if((d|0)!=(h|0)){if(h>>>0<(c[2012]|0)>>>0)Bb();b=h+12|0;if((c[b>>2]|0)==(g|0)){c[b>>2]=d;c[e>>2]=h;l=c[2010]|0;break}else Bb()}else{c[2008]=k&~(1<<f);l=i}while(0);L=f<<3;i=L-o|0;c[g+4>>2]=o|3;a=g+o|0;c[g+(o|4)>>2]=i|1;c[g+L>>2]=i;if(l){h=c[2013]|0;d=l>>>3;b=d<<1;e=8072+(b<<2)|0;f=c[2008]|0;d=1<<d;if(f&d){f=8072+(b+2<<2)|0;b=c[f>>2]|0;if(b>>>0<(c[2012]|0)>>>0)Bb();else{m=f;n=b}}else{c[2008]=f|d;m=8072+(b+2<<2)|0;n=e}c[m>>2]=h;c[n+12>>2]=h;c[h+8>>2]=n;c[h+12>>2]=e}c[2010]=i;c[2013]=a;L=j;return L|0}a=c[2009]|0;if(a){d=(a&0-a)+-1|0;K=d>>>12&16;d=d>>>K;H=d>>>5&8;d=d>>>H;L=d>>>2&4;d=d>>>L;f=d>>>1&2;d=d>>>f;e=d>>>1&1;e=c[8336+((H|K|L|f|e)+(d>>>e)<<2)>>2]|0;d=(c[e+4>>2]&-8)-o|0;f=e;while(1){b=c[f+16>>2]|0;if(!b){b=c[f+20>>2]|0;if(!b){k=d;break}}f=(c[b+4>>2]&-8)-o|0;L=f>>>0<d>>>0;d=L?f:d;f=b;e=L?b:e}a=c[2012]|0;if(e>>>0<a>>>0)Bb();i=e+o|0;if(e>>>0>=i>>>0)Bb();j=c[e+24>>2]|0;d=c[e+12>>2]|0;do if((d|0)==(e|0)){f=e+20|0;b=c[f>>2]|0;if(!b){f=e+16|0;b=c[f>>2]|0;if(!b){g=0;break}}while(1){d=b+20|0;h=c[d>>2]|0;if(h){b=h;f=d;continue}d=b+16|0;h=c[d>>2]|0;if(!h)break;else{b=h;f=d}}if(f>>>0<a>>>0)Bb();else{c[f>>2]=0;g=b;break}}else{h=c[e+8>>2]|0;if(h>>>0<a>>>0)Bb();b=h+12|0;if((c[b>>2]|0)!=(e|0))Bb();f=d+8|0;if((c[f>>2]|0)==(e|0)){c[b>>2]=d;c[f>>2]=h;g=d;break}else Bb()}while(0);do if(j){b=c[e+28>>2]|0;f=8336+(b<<2)|0;if((e|0)==(c[f>>2]|0)){c[f>>2]=g;if(!g){c[2009]=c[2009]&~(1<<b);break}}else{if(j>>>0<(c[2012]|0)>>>0)Bb();b=j+16|0;if((c[b>>2]|0)==(e|0))c[b>>2]=g;else c[j+20>>2]=g;if(!g)break}f=c[2012]|0;if(g>>>0<f>>>0)Bb();c[g+24>>2]=j;b=c[e+16>>2]|0;do if(b)if(b>>>0<f>>>0)Bb();else{c[g+16>>2]=b;c[b+24>>2]=g;break}while(0);b=c[e+20>>2]|0;if(b)if(b>>>0<(c[2012]|0)>>>0)Bb();else{c[g+20>>2]=b;c[b+24>>2]=g;break}}while(0);if(k>>>0<16){L=k+o|0;c[e+4>>2]=L|3;L=e+(L+4)|0;c[L>>2]=c[L>>2]|1}else{c[e+4>>2]=o|3;c[e+(o|4)>>2]=k|1;c[e+(k+o)>>2]=k;b=c[2010]|0;if(b){g=c[2013]|0;d=b>>>3;b=d<<1;h=8072+(b<<2)|0;f=c[2008]|0;d=1<<d;if(f&d){b=8072+(b+2<<2)|0;f=c[b>>2]|0;if(f>>>0<(c[2012]|0)>>>0)Bb();else{p=b;q=f}}else{c[2008]=f|d;p=8072+(b+2<<2)|0;q=h}c[p>>2]=g;c[q+12>>2]=g;c[g+8>>2]=q;c[g+12>>2]=h}c[2010]=k;c[2013]=i}L=e+8|0;return L|0}else q=o}else q=o}else if(a>>>0<=4294967231){a=a+11|0;m=a&-8;l=c[2009]|0;if(l){f=0-m|0;a=a>>>8;if(a)if(m>>>0>16777215)k=31;else{q=(a+1048320|0)>>>16&8;v=a<<q;p=(v+520192|0)>>>16&4;v=v<<p;k=(v+245760|0)>>>16&2;k=14-(p|q|k)+(v<<k>>>15)|0;k=m>>>(k+7|0)&1|k<<1}else k=0;a=c[8336+(k<<2)>>2]|0;a:do if(!a){d=0;a=0;v=86}else{h=f;d=0;g=m<<((k|0)==31?0:25-(k>>>1)|0);i=a;a=0;while(1){j=c[i+4>>2]&-8;f=j-m|0;if(f>>>0<h>>>0)if((j|0)==(m|0)){j=i;a=i;v=90;break a}else a=i;else f=h;v=c[i+20>>2]|0;i=c[i+16+(g>>>31<<2)>>2]|0;d=(v|0)==0|(v|0)==(i|0)?d:v;if(!i){v=86;break}else{h=f;g=g<<1}}}while(0);if((v|0)==86){if((d|0)==0&(a|0)==0){a=2<<k;a=l&(a|0-a);if(!a){q=m;break}a=(a&0-a)+-1|0;n=a>>>12&16;a=a>>>n;l=a>>>5&8;a=a>>>l;p=a>>>2&4;a=a>>>p;q=a>>>1&2;a=a>>>q;d=a>>>1&1;d=c[8336+((l|n|p|q|d)+(a>>>d)<<2)>>2]|0;a=0}if(!d){g=f;i=a}else{j=d;v=90}}if((v|0)==90)while(1){v=0;q=(c[j+4>>2]&-8)-m|0;d=q>>>0<f>>>0;f=d?q:f;a=d?j:a;d=c[j+16>>2]|0;if(d){j=d;v=90;continue}j=c[j+20>>2]|0;if(!j){g=f;i=a;break}else v=90}if((i|0)!=0?g>>>0<((c[2010]|0)-m|0)>>>0:0){a=c[2012]|0;if(i>>>0<a>>>0)Bb();h=i+m|0;if(i>>>0>=h>>>0)Bb();j=c[i+24>>2]|0;d=c[i+12>>2]|0;do if((d|0)==(i|0)){f=i+20|0;b=c[f>>2]|0;if(!b){f=i+16|0;b=c[f>>2]|0;if(!b){o=0;break}}while(1){d=b+20|0;e=c[d>>2]|0;if(e){b=e;f=d;continue}d=b+16|0;e=c[d>>2]|0;if(!e)break;else{b=e;f=d}}if(f>>>0<a>>>0)Bb();else{c[f>>2]=0;o=b;break}}else{e=c[i+8>>2]|0;if(e>>>0<a>>>0)Bb();b=e+12|0;if((c[b>>2]|0)!=(i|0))Bb();f=d+8|0;if((c[f>>2]|0)==(i|0)){c[b>>2]=d;c[f>>2]=e;o=d;break}else Bb()}while(0);do if(j){b=c[i+28>>2]|0;f=8336+(b<<2)|0;if((i|0)==(c[f>>2]|0)){c[f>>2]=o;if(!o){c[2009]=c[2009]&~(1<<b);break}}else{if(j>>>0<(c[2012]|0)>>>0)Bb();b=j+16|0;if((c[b>>2]|0)==(i|0))c[b>>2]=o;else c[j+20>>2]=o;if(!o)break}f=c[2012]|0;if(o>>>0<f>>>0)Bb();c[o+24>>2]=j;b=c[i+16>>2]|0;do if(b)if(b>>>0<f>>>0)Bb();else{c[o+16>>2]=b;c[b+24>>2]=o;break}while(0);b=c[i+20>>2]|0;if(b)if(b>>>0<(c[2012]|0)>>>0)Bb();else{c[o+20>>2]=b;c[b+24>>2]=o;break}}while(0);b:do if(g>>>0>=16){c[i+4>>2]=m|3;c[i+(m|4)>>2]=g|1;c[i+(g+m)>>2]=g;b=g>>>3;if(g>>>0<256){f=b<<1;e=8072+(f<<2)|0;d=c[2008]|0;b=1<<b;if(d&b){b=8072+(f+2<<2)|0;f=c[b>>2]|0;if(f>>>0<(c[2012]|0)>>>0)Bb();else{s=b;t=f}}else{c[2008]=d|b;s=8072+(f+2<<2)|0;t=e}c[s>>2]=h;c[t+12>>2]=h;c[i+(m+8)>>2]=t;c[i+(m+12)>>2]=e;break}b=g>>>8;if(b)if(g>>>0>16777215)e=31;else{K=(b+1048320|0)>>>16&8;L=b<<K;H=(L+520192|0)>>>16&4;L=L<<H;e=(L+245760|0)>>>16&2;e=14-(H|K|e)+(L<<e>>>15)|0;e=g>>>(e+7|0)&1|e<<1}else e=0;b=8336+(e<<2)|0;c[i+(m+28)>>2]=e;c[i+(m+20)>>2]=0;c[i+(m+16)>>2]=0;f=c[2009]|0;d=1<<e;if(!(f&d)){c[2009]=f|d;c[b>>2]=h;c[i+(m+24)>>2]=b;c[i+(m+12)>>2]=h;c[i+(m+8)>>2]=h;break}b=c[b>>2]|0;c:do if((c[b+4>>2]&-8|0)!=(g|0)){e=g<<((e|0)==31?0:25-(e>>>1)|0);while(1){d=b+16+(e>>>31<<2)|0;f=c[d>>2]|0;if(!f)break;if((c[f+4>>2]&-8|0)==(g|0)){y=f;break c}else{e=e<<1;b=f}}if(d>>>0<(c[2012]|0)>>>0)Bb();else{c[d>>2]=h;c[i+(m+24)>>2]=b;c[i+(m+12)>>2]=h;c[i+(m+8)>>2]=h;break b}}else y=b;while(0);b=y+8|0;d=c[b>>2]|0;L=c[2012]|0;if(d>>>0>=L>>>0&y>>>0>=L>>>0){c[d+12>>2]=h;c[b>>2]=h;c[i+(m+8)>>2]=d;c[i+(m+12)>>2]=y;c[i+(m+24)>>2]=0;break}else Bb()}else{L=g+m|0;c[i+4>>2]=L|3;L=i+(L+4)|0;c[L>>2]=c[L>>2]|1}while(0);L=i+8|0;return L|0}else q=m}else q=m}else q=-1;while(0);a=c[2010]|0;if(a>>>0>=q>>>0){b=a-q|0;d=c[2013]|0;if(b>>>0>15){c[2013]=d+q;c[2010]=b;c[d+(q+4)>>2]=b|1;c[d+a>>2]=b;c[d+4>>2]=q|3}else{c[2010]=0;c[2013]=0;c[d+4>>2]=a|3;L=d+(a+4)|0;c[L>>2]=c[L>>2]|1}L=d+8|0;return L|0}a=c[2011]|0;if(a>>>0>q>>>0){K=a-q|0;c[2011]=K;L=c[2014]|0;c[2014]=L+q;c[L+(q+4)>>2]=K|1;c[L+4>>2]=q|3;L=L+8|0;return L|0}do if(!(c[2126]|0)){a=Ca(30)|0;if(!(a+-1&a)){c[2128]=a;c[2127]=a;c[2129]=-1;c[2130]=-1;c[2131]=0;c[2119]=0;c[2126]=(db(0)|0)&-16^1431655768;break}else Bb()}while(0);i=q+48|0;g=c[2128]|0;k=q+47|0;h=g+k|0;g=0-g|0;l=h&g;if(l>>>0<=q>>>0){L=0;return L|0}a=c[2118]|0;if((a|0)!=0?(t=c[2116]|0,y=t+l|0,y>>>0<=t>>>0|y>>>0>a>>>0):0){L=0;return L|0}d:do if(!(c[2119]&4)){a=c[2014]|0;e:do if(a){d=8480;while(1){f=c[d>>2]|0;if(f>>>0<=a>>>0?(r=d+4|0,(f+(c[r>>2]|0)|0)>>>0>a>>>0):0){j=d;a=r;break}d=c[d+8>>2]|0;if(!d){v=174;break e}}f=h-(c[2011]|0)&g;if(f>>>0<2147483647){d=za(f|0)|0;y=(d|0)==((c[j>>2]|0)+(c[a>>2]|0)|0);a=y?f:0;if(y){if((d|0)!=(-1|0)){w=d;p=a;v=194;break d}}else v=184}else a=0}else v=174;while(0);do if((v|0)==174){j=za(0)|0;if((j|0)!=(-1|0)){a=j;f=c[2127]|0;d=f+-1|0;if(!(d&a))f=l;else f=l-a+(d+a&0-f)|0;a=c[2116]|0;d=a+f|0;if(f>>>0>q>>>0&f>>>0<2147483647){y=c[2118]|0;if((y|0)!=0?d>>>0<=a>>>0|d>>>0>y>>>0:0){a=0;break}d=za(f|0)|0;y=(d|0)==(j|0);a=y?f:0;if(y){w=j;p=a;v=194;break d}else v=184}else a=0}else a=0}while(0);f:do if((v|0)==184){j=0-f|0;do if(i>>>0>f>>>0&(f>>>0<2147483647&(d|0)!=(-1|0))?(u=c[2128]|0,u=k-f+u&0-u,u>>>0<2147483647):0)if((za(u|0)|0)==(-1|0)){za(j|0)|0;break f}else{f=u+f|0;break}while(0);if((d|0)!=(-1|0)){w=d;p=f;v=194;break d}}while(0);c[2119]=c[2119]|4;v=191}else{a=0;v=191}while(0);if((((v|0)==191?l>>>0<2147483647:0)?(w=za(l|0)|0,x=za(0)|0,w>>>0<x>>>0&((w|0)!=(-1|0)&(x|0)!=(-1|0))):0)?(z=x-w|0,A=z>>>0>(q+40|0)>>>0,A):0){p=A?z:a;v=194}if((v|0)==194){a=(c[2116]|0)+p|0;c[2116]=a;if(a>>>0>(c[2117]|0)>>>0)c[2117]=a;g=c[2014]|0;g:do if(g){j=8480;do{a=c[j>>2]|0;f=j+4|0;d=c[f>>2]|0;if((w|0)==(a+d|0)){B=a;C=f;D=d;E=j;v=204;break}j=c[j+8>>2]|0}while((j|0)!=0);if(((v|0)==204?(c[E+12>>2]&8|0)==0:0)?g>>>0<w>>>0&g>>>0>=B>>>0:0){c[C>>2]=D+p;L=(c[2011]|0)+p|0;K=g+8|0;K=(K&7|0)==0?0:0-K&7;H=L-K|0;c[2014]=g+K;c[2011]=H;c[g+(K+4)>>2]=H|1;c[g+(L+4)>>2]=40;c[2015]=c[2130];break}a=c[2012]|0;if(w>>>0<a>>>0){c[2012]=w;a=w}f=w+p|0;h=8480;while(1){if((c[h>>2]|0)==(f|0)){d=h;f=h;v=212;break}h=c[h+8>>2]|0;if(!h){d=8480;break}}if((v|0)==212)if(!(c[f+12>>2]&8)){c[d>>2]=w;n=f+4|0;c[n>>2]=(c[n>>2]|0)+p;n=w+8|0;n=(n&7|0)==0?0:0-n&7;k=w+(p+8)|0;k=(k&7|0)==0?0:0-k&7;b=w+(k+p)|0;m=n+q|0;o=w+m|0;l=b-(w+n)-q|0;c[w+(n+4)>>2]=q|3;h:do if((b|0)!=(g|0)){if((b|0)==(c[2013]|0)){L=(c[2010]|0)+l|0;c[2010]=L;c[2013]=o;c[w+(m+4)>>2]=L|1;c[w+(L+m)>>2]=L;break}g=p+4|0;f=c[w+(g+k)>>2]|0;if((f&3|0)==1){i=f&-8;h=f>>>3;i:do if(f>>>0>=256){j=c[w+((k|24)+p)>>2]|0;d=c[w+(p+12+k)>>2]|0;do if((d|0)==(b|0)){e=k|16;d=w+(g+e)|0;f=c[d>>2]|0;if(!f){d=w+(e+p)|0;f=c[d>>2]|0;if(!f){J=0;break}}while(1){e=f+20|0;h=c[e>>2]|0;if(h){f=h;d=e;continue}e=f+16|0;h=c[e>>2]|0;if(!h)break;else{f=h;d=e}}if(d>>>0<a>>>0)Bb();else{c[d>>2]=0;J=f;break}}else{e=c[w+((k|8)+p)>>2]|0;if(e>>>0<a>>>0)Bb();a=e+12|0;if((c[a>>2]|0)!=(b|0))Bb();f=d+8|0;if((c[f>>2]|0)==(b|0)){c[a>>2]=d;c[f>>2]=e;J=d;break}else Bb()}while(0);if(!j)break;a=c[w+(p+28+k)>>2]|0;f=8336+(a<<2)|0;do if((b|0)!=(c[f>>2]|0)){if(j>>>0<(c[2012]|0)>>>0)Bb();a=j+16|0;if((c[a>>2]|0)==(b|0))c[a>>2]=J;else c[j+20>>2]=J;if(!J)break i}else{c[f>>2]=J;if(J)break;c[2009]=c[2009]&~(1<<a);break i}while(0);f=c[2012]|0;if(J>>>0<f>>>0)Bb();c[J+24>>2]=j;b=k|16;a=c[w+(b+p)>>2]|0;do if(a)if(a>>>0<f>>>0)Bb();else{c[J+16>>2]=a;c[a+24>>2]=J;break}while(0);b=c[w+(g+b)>>2]|0;if(!b)break;if(b>>>0<(c[2012]|0)>>>0)Bb();else{c[J+20>>2]=b;c[b+24>>2]=J;break}}else{d=c[w+((k|8)+p)>>2]|0;e=c[w+(p+12+k)>>2]|0;f=8072+(h<<1<<2)|0;do if((d|0)!=(f|0)){if(d>>>0<a>>>0)Bb();if((c[d+12>>2]|0)==(b|0))break;Bb()}while(0);if((e|0)==(d|0)){c[2008]=c[2008]&~(1<<h);break}do if((e|0)==(f|0))F=e+8|0;else{if(e>>>0<a>>>0)Bb();a=e+8|0;if((c[a>>2]|0)==(b|0)){F=a;break}Bb()}while(0);c[d+12>>2]=e;c[F>>2]=d}while(0);b=w+((i|k)+p)|0;a=i+l|0}else a=l;b=b+4|0;c[b>>2]=c[b>>2]&-2;c[w+(m+4)>>2]=a|1;c[w+(a+m)>>2]=a;b=a>>>3;if(a>>>0<256){f=b<<1;e=8072+(f<<2)|0;d=c[2008]|0;b=1<<b;do if(!(d&b)){c[2008]=d|b;K=8072+(f+2<<2)|0;L=e}else{b=8072+(f+2<<2)|0;f=c[b>>2]|0;if(f>>>0>=(c[2012]|0)>>>0){K=b;L=f;break}Bb()}while(0);c[K>>2]=o;c[L+12>>2]=o;c[w+(m+8)>>2]=L;c[w+(m+12)>>2]=e;break}b=a>>>8;do if(!b)e=0;else{if(a>>>0>16777215){e=31;break}K=(b+1048320|0)>>>16&8;L=b<<K;H=(L+520192|0)>>>16&4;L=L<<H;e=(L+245760|0)>>>16&2;e=14-(H|K|e)+(L<<e>>>15)|0;e=a>>>(e+7|0)&1|e<<1}while(0);b=8336+(e<<2)|0;c[w+(m+28)>>2]=e;c[w+(m+20)>>2]=0;c[w+(m+16)>>2]=0;f=c[2009]|0;d=1<<e;if(!(f&d)){c[2009]=f|d;c[b>>2]=o;c[w+(m+24)>>2]=b;c[w+(m+12)>>2]=o;c[w+(m+8)>>2]=o;break}b=c[b>>2]|0;j:do if((c[b+4>>2]&-8|0)!=(a|0)){e=a<<((e|0)==31?0:25-(e>>>1)|0);while(1){d=b+16+(e>>>31<<2)|0;f=c[d>>2]|0;if(!f)break;if((c[f+4>>2]&-8|0)==(a|0)){M=f;break j}else{e=e<<1;b=f}}if(d>>>0<(c[2012]|0)>>>0)Bb();else{c[d>>2]=o;c[w+(m+24)>>2]=b;c[w+(m+12)>>2]=o;c[w+(m+8)>>2]=o;break h}}else M=b;while(0);b=M+8|0;d=c[b>>2]|0;L=c[2012]|0;if(d>>>0>=L>>>0&M>>>0>=L>>>0){c[d+12>>2]=o;c[b>>2]=o;c[w+(m+8)>>2]=d;c[w+(m+12)>>2]=M;c[w+(m+24)>>2]=0;break}else Bb()}else{L=(c[2011]|0)+l|0;c[2011]=L;c[2014]=o;c[w+(m+4)>>2]=L|1}while(0);L=w+(n|8)|0;return L|0}else d=8480;while(1){f=c[d>>2]|0;if(f>>>0<=g>>>0?(b=c[d+4>>2]|0,e=f+b|0,e>>>0>g>>>0):0)break;d=c[d+8>>2]|0}a=f+(b+-39)|0;f=f+(b+-47+((a&7|0)==0?0:0-a&7))|0;a=g+16|0;f=f>>>0<a>>>0?g:f;b=f+8|0;d=w+8|0;d=(d&7|0)==0?0:0-d&7;L=p+-40-d|0;c[2014]=w+d;c[2011]=L;c[w+(d+4)>>2]=L|1;c[w+(p+-36)>>2]=40;c[2015]=c[2130];d=f+4|0;c[d>>2]=27;c[b>>2]=c[2120];c[b+4>>2]=c[2121];c[b+8>>2]=c[2122];c[b+12>>2]=c[2123];c[2120]=w;c[2121]=p;c[2123]=0;c[2122]=b;b=f+28|0;c[b>>2]=7;if((f+32|0)>>>0<e>>>0)do{L=b;b=b+4|0;c[b>>2]=7}while((L+8|0)>>>0<e>>>0);if((f|0)!=(g|0)){h=f-g|0;c[d>>2]=c[d>>2]&-2;c[g+4>>2]=h|1;c[f>>2]=h;b=h>>>3;if(h>>>0<256){f=b<<1;e=8072+(f<<2)|0;d=c[2008]|0;b=1<<b;if(d&b){b=8072+(f+2<<2)|0;d=c[b>>2]|0;if(d>>>0<(c[2012]|0)>>>0)Bb();else{G=b;H=d}}else{c[2008]=d|b;G=8072+(f+2<<2)|0;H=e}c[G>>2]=g;c[H+12>>2]=g;c[g+8>>2]=H;c[g+12>>2]=e;break}b=h>>>8;if(b)if(h>>>0>16777215)e=31;else{K=(b+1048320|0)>>>16&8;L=b<<K;H=(L+520192|0)>>>16&4;L=L<<H;e=(L+245760|0)>>>16&2;e=14-(H|K|e)+(L<<e>>>15)|0;e=h>>>(e+7|0)&1|e<<1}else e=0;f=8336+(e<<2)|0;c[g+28>>2]=e;c[g+20>>2]=0;c[a>>2]=0;b=c[2009]|0;d=1<<e;if(!(b&d)){c[2009]=b|d;c[f>>2]=g;c[g+24>>2]=f;c[g+12>>2]=g;c[g+8>>2]=g;break}b=c[f>>2]|0;k:do if((c[b+4>>2]&-8|0)!=(h|0)){f=h<<((e|0)==31?0:25-(e>>>1)|0);while(1){d=b+16+(f>>>31<<2)|0;e=c[d>>2]|0;if(!e)break;if((c[e+4>>2]&-8|0)==(h|0)){I=e;break k}else{f=f<<1;b=e}}if(d>>>0<(c[2012]|0)>>>0)Bb();else{c[d>>2]=g;c[g+24>>2]=b;c[g+12>>2]=g;c[g+8>>2]=g;break g}}else I=b;while(0);b=I+8|0;d=c[b>>2]|0;L=c[2012]|0;if(d>>>0>=L>>>0&I>>>0>=L>>>0){c[d+12>>2]=g;c[b>>2]=g;c[g+8>>2]=d;c[g+12>>2]=I;c[g+24>>2]=0;break}else Bb()}}else{L=c[2012]|0;if((L|0)==0|w>>>0<L>>>0)c[2012]=w;c[2120]=w;c[2121]=p;c[2123]=0;c[2017]=c[2126];c[2016]=-1;b=0;do{L=b<<1;K=8072+(L<<2)|0;c[8072+(L+3<<2)>>2]=K;c[8072+(L+2<<2)>>2]=K;b=b+1|0}while((b|0)!=32);L=w+8|0;L=(L&7|0)==0?0:0-L&7;K=p+-40-L|0;c[2014]=w+L;c[2011]=K;c[w+(L+4)>>2]=K|1;c[w+(p+-36)>>2]=40;c[2015]=c[2130]}while(0);b=c[2011]|0;if(b>>>0>q>>>0){K=b-q|0;c[2011]=K;L=c[2014]|0;c[2014]=L+q;c[L+(q+4)>>2]=K|1;c[L+4>>2]=q|3;L=L+8|0;return L|0}}c[(Yb()|0)>>2]=12;L=0;return L|0}function Ge(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;if(!a)return;b=a+-8|0;i=c[2012]|0;if(b>>>0<i>>>0)Bb();f=c[a+-4>>2]|0;d=f&3;if((d|0)==1)Bb();o=f&-8;q=a+(o+-8)|0;do if(!(f&1)){b=c[b>>2]|0;if(!d)return;j=-8-b|0;l=a+j|0;m=b+o|0;if(l>>>0<i>>>0)Bb();if((l|0)==(c[2013]|0)){b=a+(o+-4)|0;f=c[b>>2]|0;if((f&3|0)!=3){u=l;g=m;break}c[2010]=m;c[b>>2]=f&-2;c[a+(j+4)>>2]=m|1;c[q>>2]=m;return}e=b>>>3;if(b>>>0<256){d=c[a+(j+8)>>2]|0;f=c[a+(j+12)>>2]|0;b=8072+(e<<1<<2)|0;if((d|0)!=(b|0)){if(d>>>0<i>>>0)Bb();if((c[d+12>>2]|0)!=(l|0))Bb()}if((f|0)==(d|0)){c[2008]=c[2008]&~(1<<e);u=l;g=m;break}if((f|0)!=(b|0)){if(f>>>0<i>>>0)Bb();b=f+8|0;if((c[b>>2]|0)==(l|0))h=b;else Bb()}else h=f+8|0;c[d+12>>2]=f;c[h>>2]=d;u=l;g=m;break}h=c[a+(j+24)>>2]|0;d=c[a+(j+12)>>2]|0;do if((d|0)==(l|0)){f=a+(j+20)|0;b=c[f>>2]|0;if(!b){f=a+(j+16)|0;b=c[f>>2]|0;if(!b){k=0;break}}while(1){d=b+20|0;e=c[d>>2]|0;if(e){b=e;f=d;continue}d=b+16|0;e=c[d>>2]|0;if(!e)break;else{b=e;f=d}}if(f>>>0<i>>>0)Bb();else{c[f>>2]=0;k=b;break}}else{e=c[a+(j+8)>>2]|0;if(e>>>0<i>>>0)Bb();b=e+12|0;if((c[b>>2]|0)!=(l|0))Bb();f=d+8|0;if((c[f>>2]|0)==(l|0)){c[b>>2]=d;c[f>>2]=e;k=d;break}else Bb()}while(0);if(h){b=c[a+(j+28)>>2]|0;f=8336+(b<<2)|0;if((l|0)==(c[f>>2]|0)){c[f>>2]=k;if(!k){c[2009]=c[2009]&~(1<<b);u=l;g=m;break}}else{if(h>>>0<(c[2012]|0)>>>0)Bb();b=h+16|0;if((c[b>>2]|0)==(l|0))c[b>>2]=k;else c[h+20>>2]=k;if(!k){u=l;g=m;break}}f=c[2012]|0;if(k>>>0<f>>>0)Bb();c[k+24>>2]=h;b=c[a+(j+16)>>2]|0;do if(b)if(b>>>0<f>>>0)Bb();else{c[k+16>>2]=b;c[b+24>>2]=k;break}while(0);b=c[a+(j+20)>>2]|0;if(b)if(b>>>0<(c[2012]|0)>>>0)Bb();else{c[k+20>>2]=b;c[b+24>>2]=k;u=l;g=m;break}else{u=l;g=m}}else{u=l;g=m}}else{u=b;g=o}while(0);if(u>>>0>=q>>>0)Bb();b=a+(o+-4)|0;f=c[b>>2]|0;if(!(f&1))Bb();if(!(f&2)){if((q|0)==(c[2014]|0)){t=(c[2011]|0)+g|0;c[2011]=t;c[2014]=u;c[u+4>>2]=t|1;if((u|0)!=(c[2013]|0))return;c[2013]=0;c[2010]=0;return}if((q|0)==(c[2013]|0)){t=(c[2010]|0)+g|0;c[2010]=t;c[2013]=u;c[u+4>>2]=t|1;c[u+t>>2]=t;return}g=(f&-8)+g|0;e=f>>>3;do if(f>>>0>=256){h=c[a+(o+16)>>2]|0;b=c[a+(o|4)>>2]|0;do if((b|0)==(q|0)){f=a+(o+12)|0;b=c[f>>2]|0;if(!b){f=a+(o+8)|0;b=c[f>>2]|0;if(!b){p=0;break}}while(1){d=b+20|0;e=c[d>>2]|0;if(e){b=e;f=d;continue}d=b+16|0;e=c[d>>2]|0;if(!e)break;else{b=e;f=d}}if(f>>>0<(c[2012]|0)>>>0)Bb();else{c[f>>2]=0;p=b;break}}else{f=c[a+o>>2]|0;if(f>>>0<(c[2012]|0)>>>0)Bb();d=f+12|0;if((c[d>>2]|0)!=(q|0))Bb();e=b+8|0;if((c[e>>2]|0)==(q|0)){c[d>>2]=b;c[e>>2]=f;p=b;break}else Bb()}while(0);if(h){b=c[a+(o+20)>>2]|0;f=8336+(b<<2)|0;if((q|0)==(c[f>>2]|0)){c[f>>2]=p;if(!p){c[2009]=c[2009]&~(1<<b);break}}else{if(h>>>0<(c[2012]|0)>>>0)Bb();b=h+16|0;if((c[b>>2]|0)==(q|0))c[b>>2]=p;else c[h+20>>2]=p;if(!p)break}f=c[2012]|0;if(p>>>0<f>>>0)Bb();c[p+24>>2]=h;b=c[a+(o+8)>>2]|0;do if(b)if(b>>>0<f>>>0)Bb();else{c[p+16>>2]=b;c[b+24>>2]=p;break}while(0);b=c[a+(o+12)>>2]|0;if(b)if(b>>>0<(c[2012]|0)>>>0)Bb();else{c[p+20>>2]=b;c[b+24>>2]=p;break}}}else{d=c[a+o>>2]|0;f=c[a+(o|4)>>2]|0;b=8072+(e<<1<<2)|0;if((d|0)!=(b|0)){if(d>>>0<(c[2012]|0)>>>0)Bb();if((c[d+12>>2]|0)!=(q|0))Bb()}if((f|0)==(d|0)){c[2008]=c[2008]&~(1<<e);break}if((f|0)!=(b|0)){if(f>>>0<(c[2012]|0)>>>0)Bb();b=f+8|0;if((c[b>>2]|0)==(q|0))n=b;else Bb()}else n=f+8|0;c[d+12>>2]=f;c[n>>2]=d}while(0);c[u+4>>2]=g|1;c[u+g>>2]=g;if((u|0)==(c[2013]|0)){c[2010]=g;return}}else{c[b>>2]=f&-2;c[u+4>>2]=g|1;c[u+g>>2]=g}b=g>>>3;if(g>>>0<256){d=b<<1;f=8072+(d<<2)|0;e=c[2008]|0;b=1<<b;if(e&b){b=8072+(d+2<<2)|0;d=c[b>>2]|0;if(d>>>0<(c[2012]|0)>>>0)Bb();else{r=b;s=d}}else{c[2008]=e|b;r=8072+(d+2<<2)|0;s=f}c[r>>2]=u;c[s+12>>2]=u;c[u+8>>2]=s;c[u+12>>2]=f;return}b=g>>>8;if(b)if(g>>>0>16777215)f=31;else{r=(b+1048320|0)>>>16&8;s=b<<r;q=(s+520192|0)>>>16&4;s=s<<q;f=(s+245760|0)>>>16&2;f=14-(q|r|f)+(s<<f>>>15)|0;f=g>>>(f+7|0)&1|f<<1}else f=0;b=8336+(f<<2)|0;c[u+28>>2]=f;c[u+20>>2]=0;c[u+16>>2]=0;d=c[2009]|0;e=1<<f;a:do if(d&e){b=c[b>>2]|0;b:do if((c[b+4>>2]&-8|0)!=(g|0)){f=g<<((f|0)==31?0:25-(f>>>1)|0);while(1){d=b+16+(f>>>31<<2)|0;e=c[d>>2]|0;if(!e)break;if((c[e+4>>2]&-8|0)==(g|0)){t=e;break b}else{f=f<<1;b=e}}if(d>>>0<(c[2012]|0)>>>0)Bb();else{c[d>>2]=u;c[u+24>>2]=b;c[u+12>>2]=u;c[u+8>>2]=u;break a}}else t=b;while(0);b=t+8|0;d=c[b>>2]|0;s=c[2012]|0;if(d>>>0>=s>>>0&t>>>0>=s>>>0){c[d+12>>2]=u;c[b>>2]=u;c[u+8>>2]=d;c[u+12>>2]=t;c[u+24>>2]=0;break}else Bb()}else{c[2009]=d|e;c[b>>2]=u;c[u+24>>2]=b;c[u+12>>2]=u;c[u+8>>2]=u}while(0);u=(c[2016]|0)+-1|0;c[2016]=u;if(!u)b=8488;else return;while(1){b=c[b>>2]|0;if(!b)break;else b=b+8|0}c[2016]=-1;return}function He(a,b){a=a|0;b=b|0;c[a>>2]=2680;Ie(a+4|0,b);return}function Ie(a,b){a=a|0;b=b|0;var d=0,e=0;e=Qe(b|0)|0;d=Md(e+13|0)|0;c[d>>2]=e;c[d+4>>2]=e;c[d+8>>2]=0;d=d+12|0;Re(d|0,b|0,e+1|0)|0;c[a>>2]=d;return}function Je(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;if(e>>>0>4294967279)ze(b);if(e>>>0<11){a[b>>0]=e<<1;b=b+1|0}else{g=e+16&-16;f=Md(g)|0;c[b+8>>2]=f;c[b>>2]=g|1;c[b+4>>2]=e;b=f}Re(b|0,d|0,e|0)|0;a[b+e>>0]=0;return}function Ke(b){b=b|0;if(a[b>>0]&1)Od(c[b+8>>2]|0);return}function Le(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0;h=a[b>>0]|0;j=(h&1)==0;if(j)h=(h&255)>>>1;else h=c[b+4>>2]|0;if((g|0)==-1|h>>>0<d>>>0)Ae(b);i=h-d|0;i=i>>>0<e>>>0?i:e;if(j)h=b+1|0;else h=c[b+8>>2]|0;e=i>>>0>g>>>0;h=Ee(h+d|0,f,e?g:i)|0;if(!h)if(i>>>0<g>>>0)h=-1;else return e&1|0;return h|0}function Me(a,b){a=a|0;b=b|0;return Le(a,0,-1,b,Qe(b|0)|0)|0}function Ne(){}function Oe(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;h=b&3;i=d|d<<8|d<<16|d<<24;g=f&~3;if(h){h=b+4-h|0;while((b|0)<(h|0)){a[b>>0]=d;b=b+1|0}}while((b|0)<(g|0)){c[b>>2]=i;b=b+4|0}}while((b|0)<(f|0)){a[b>>0]=d;b=b+1|0}return b-e|0}function Pe(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){B=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}B=a<<c-32;return 0}function Qe(b){b=b|0;var c=0;c=b;while(a[c>>0]|0)c=c+1|0;return c-b|0}function Re(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return qb(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if(!e)return f|0;a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function Se(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((c|0)<(b|0)&(b|0)<(c+d|0)){e=b;c=c+d|0;b=b+d|0;while((d|0)>0){b=b-1|0;c=c-1|0;d=d-1|0;a[b>>0]=a[c>>0]|0}b=e}else Re(b,c,d)|0;return b|0}function Te(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return ec[a&7](b|0,c|0,d|0)|0}function Ue(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;f=f|0;return fc[a&1](b|0,c|0,d|0,+e,f|0)|0}function Ve(a){a=a|0;return gc[a&1]()|0}function We(a,b){a=a|0;b=b|0;hc[a&31](b|0)}function Xe(a,b,c){a=a|0;b=b|0;c=c|0;ic[a&3](b|0,c|0)}function Ye(a,b){a=a|0;b=b|0;return jc[a&7](b|0)|0}function Ze(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;kc[a&3](b|0,c|0,d|0)}function _e(a){a=a|0;lc[a&0]()}function $e(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return mc[a&3](b|0,c|0,d|0,e|0)|0}function af(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;nc[a&3](b|0,c|0,d|0,e|0,f|0,g|0)}function bf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;oc[a&3](b|0,c|0,d|0,e|0,f|0)}function cf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;pc[a&7](b|0,c|0,d|0,e|0)}function df(a,b,c){a=a|0;b=b|0;c=c|0;aa(0);return 0}function ef(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;aa(1);return 0}function ff(){aa(2);return 0}function gf(a){a=a|0;aa(3)}function hf(a,b){a=a|0;b=b|0;aa(4)}function jf(a){a=a|0;aa(5);return 0}function kf(a,b,c){a=a|0;b=b|0;c=c|0;aa(6)}function lf(){aa(7)}function mf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;aa(8);return 0}function nf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;aa(9)}function of(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;aa(10)}function pf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;aa(11)}

// EMSCRIPTEN_END_FUNCS
var ec=[df,ge,he,ne,Ec,df,df,df];var fc=[ef,Ic];var gc=[ff,Oc];var hc=[gf,fd,gd,hd,jd,Qd,Rd,Vd,Wd,Yd,_d,be,$d,ae,ce,de,ee,fe,Hc,gf,gf,gf,gf,gf,gf,gf,gf,gf,gf,gf,gf,gf];var ic=[hf,Ac,Bc,Cc];var jc=[jf,Sd,Xd,Gc,Nc,jf,jf,jf];var kc=[kf,id,Kc,Dc];var lc=[lf];var mc=[mf,Jc,Mc,mf];var nc=[nf,xe,we,ve];var oc=[of,ue,te,qe];var pc=[pf,je,ke,me,Lc,pf,pf,pf];return{_strlen:Qe,_free:Ge,_main:Fc,_memmove:Se,_memset:Oe,_malloc:Fe,_memcpy:Re,___getTypeName:Hd,_bitshift64Shl:Pe,__GLOBAL__sub_I_MultipitchValidation_Emscripten_cpp:Pc,__GLOBAL__sub_I_bind_cpp:Jd,runPostSets:Ne,stackAlloc:qc,stackSave:rc,stackRestore:sc,establishStackSpace:tc,setThrew:uc,setTempRet0:xc,getTempRet0:yc,dynCall_iiii:Te,dynCall_iiiidi:Ue,dynCall_i:Ve,dynCall_vi:We,dynCall_vii:Xe,dynCall_ii:Ye,dynCall_viii:Ze,dynCall_v:_e,dynCall_iiiii:$e,dynCall_viiiiii:af,dynCall_viiiii:bf,dynCall_viiii:cf}})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var _strlen=Module["_strlen"]=asm["_strlen"];var __GLOBAL__sub_I_bind_cpp=Module["__GLOBAL__sub_I_bind_cpp"]=asm["__GLOBAL__sub_I_bind_cpp"];var _free=Module["_free"]=asm["_free"];var _main=Module["_main"]=asm["_main"];var _memmove=Module["_memmove"]=asm["_memmove"];var _memset=Module["_memset"]=asm["_memset"];var runPostSets=Module["runPostSets"]=asm["runPostSets"];var _malloc=Module["_malloc"]=asm["_malloc"];var __GLOBAL__sub_I_MultipitchValidation_Emscripten_cpp=Module["__GLOBAL__sub_I_MultipitchValidation_Emscripten_cpp"]=asm["__GLOBAL__sub_I_MultipitchValidation_Emscripten_cpp"];var _memcpy=Module["_memcpy"]=asm["_memcpy"];var ___getTypeName=Module["___getTypeName"]=asm["___getTypeName"];var _bitshift64Shl=Module["_bitshift64Shl"]=asm["_bitshift64Shl"];var dynCall_iiii=Module["dynCall_iiii"]=asm["dynCall_iiii"];var dynCall_iiiidi=Module["dynCall_iiiidi"]=asm["dynCall_iiiidi"];var dynCall_i=Module["dynCall_i"]=asm["dynCall_i"];var dynCall_vi=Module["dynCall_vi"]=asm["dynCall_vi"];var dynCall_vii=Module["dynCall_vii"]=asm["dynCall_vii"];var dynCall_ii=Module["dynCall_ii"]=asm["dynCall_ii"];var dynCall_viii=Module["dynCall_viii"]=asm["dynCall_viii"];var dynCall_v=Module["dynCall_v"]=asm["dynCall_v"];var dynCall_iiiii=Module["dynCall_iiiii"]=asm["dynCall_iiiii"];var dynCall_viiiiii=Module["dynCall_viiiiii"]=asm["dynCall_viiiiii"];var dynCall_viiiii=Module["dynCall_viiiii"]=asm["dynCall_viiiii"];var dynCall_viiii=Module["dynCall_viiii"]=asm["dynCall_viiii"];Runtime.stackAlloc=asm["stackAlloc"];Runtime.stackSave=asm["stackSave"];Runtime.stackRestore=asm["stackRestore"];Runtime.establishStackSpace=asm["establishStackSpace"];Runtime.setTempRet0=asm["setTempRet0"];Runtime.getTempRet0=asm["getTempRet0"];var i64Math=null;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};Module["callMain"]=Module.callMain=function callMain(args){assert(runDependencies==0,"cannot call main when async dependencies remain! (listen on __ATMAIN__)");assert(__ATPRERUN__.length==0,"cannot call main when preRun functions remain to be called");args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module["thisProgram"]),"i8",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),"i8",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,"i32",ALLOC_NORMAL);initialStackTop=STACKTOP;try{var ret=Module["_main"](argc,argv,0);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e=="SimulateInfiniteLoop"){Module["noExitRuntime"]=true;return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}finally{calledMain=true}};function run(args){args=args||Module["arguments"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(ENVIRONMENT_IS_WEB&&preloadStartTime!==null){Module.printErr("pre-main prep time: "+(Date.now()-preloadStartTime)+" ms")}if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();if(Module["_main"]&&shouldRunNow)Module["callMain"](args);postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=Module.run=run;function exit(status,implicit){if(implicit&&Module["noExitRuntime"]){return}if(Module["noExitRuntime"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module["onExit"])Module["onExit"](status)}if(ENVIRONMENT_IS_NODE){process["stdout"]["once"]("drain",(function(){process["exit"](status)}));console.log(" ");setTimeout((function(){process["exit"](status)}),500)}else if(ENVIRONMENT_IS_SHELL&&typeof quit==="function"){quit(status)}throw new ExitStatus(status)}Module["exit"]=Module.exit=exit;var abortDecorators=[];function abort(what){if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;var extra="\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";var output="abort("+what+") at "+stackTrace()+extra;if(abortDecorators){abortDecorators.forEach((function(decorator){output=decorator(output,what)}))}throw output}Module["abort"]=Module.abort=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=true;if(Module["noInitialRun"]){shouldRunNow=false}run()





var Communication = function(communicationElementstream, hub){

    jQuery('.spotlight').remove();

    if( document.getElementById('tweetpanel')){
        document.getElementById('tweetpanel').innerHTML = '';
    }

    this.communicationElements = communicationElementstream;

    if(!this.communicationElements){
        this.communicationElements = [];
    }

    this.hub = hub;

    this.registeredCommunication = [];

    this.registeredDelays = [];

    this.closehandler = [];

};

/**
 * clears the module
 */
Communication.prototype.teardown = function(){

    var root = this;

    for (var comm of root.registeredCommunication) {

        root.hub.removeAllListenersFromPublisher(comm.name);

    }

    for(var i = 0; i < root.registeredDelays.length; i++){

        clearTimeout(root.registeredDelays[i].timerId);
    }

    jQuery('.popover').popover('destroy');

    root.registeredCommunication = null;

    root.registeredDelays = null;

    root.hub = null;

    root.communicationElements = null;

};

/**
 * inits the module
 */
Communication.prototype.init = function(){

    for(var i=0; i < this.communicationElements.length; i++){

        if(this.communicationElements[i].type === 'tweet'){

            this.setupTweet(i);
        }

        if(this.communicationElements[i].type === 'skipablepopup'){

            this.setupSkipablePopupDialog(i);

        }

        if(this.communicationElements[i].type === 'spotlight'){

            this.setupPopupDialog(i);

        }

        if(this.communicationElements[i].type === 'popup'){

            this.setupPopupDialog(i);

        }

        if(this.communicationElements[i].type === 'picturepopup'){

            this.setupSkipablePicturePopupDialog(i);
        }

        if(this.communicationElements[i].type === 'bigskipablepicturepopup'){

            this.setupSkipablePicturePopupDialog(i);

        }

        if(this.communicationElements[i].type === 'skipablepicturepopup'){

            this.setupPopupDialog(i);

        }

        if(this.communicationElements[i].type === 'stepdescription'){

            this.setupPopupDialog(i);

        }

        // add a evnetlistener for each coomunication-element that has been created
        // Params -> triggeredby -> event to listen on
        //        -> display -> method wich has to be triggered
        //        -> scope


        var element = this.communicationElements[i];

        this.hub.addEventListener(element.triggeredby,
            element.display,
            element,
            element.name);
    }

};

/**
 * adds functionality to the closeButtons of skipable Dialogs
 * @param name
 * @param anchorElement
 */
Communication.prototype.registerCloseHandler = function(name, anchorElement){

    var root = this;

    if(document.getElementById('btn_' + name)){

        document.getElementById('btn_' + name).addEventListener('click',function(){

            root._closeHandler(name,anchorElement);

            root.closeDialog(anchorElement);

        }, undefined, name);

    }

};

/**
 * adds functionality to the closeButtons of skipable Dialogs
 * @param name
 * @param anchorElement
 */
Communication.prototype.registerSpotLightCloseHandler = function(name, anchorElement){

    var root = this;

    if(document.getElementById('btn_' + name)){

        document.getElementById('btn_' + name).addEventListener('click',function(){

            root._closeHandler(name, anchorElement);

            root.closeSpotLightDialog(anchorElement);

        }, undefined, name);

    }

};

Communication.prototype.setupTweet = function (i){

    var root = this;

    var element = this.communicationElements[i];
    var elementId =  element.element;
    var name = element.name;

    if(!name  || name === ''){
        name = new Date();
    }

    if(element.skippedby){

        if(element.skippedby.events){

            for(var i = 0; i < element.skippedby.events.length; i++){

                var aEvent = element.skippedby.events[i];

                root.hub.addEventListener(aEvent, function(){

                    root._closeHandler(name,elementId,this);

                    document.getElementById('tweetpanel').innerHTML='';

                }, element, name);

            }

        }

        if(element.skippedby.event){

            root.hub.addEventListener(element.skippedby.event, function(){
                root._closeHandler(name,elementId,this);
                document.getElementById('tweetpanel').innerHTML=''; }, element, name);

        }

    }

    root.registeredCommunication.push(element);

    element.display = function(){


        document.getElementById('tweetpanel').style.display= 'block';

        document.getElementById('tweetpanel').innerHTML = element.content;

        if(element.skippedby.delay){


            var timeOutId =  setTimeout(

                function(){


                    document.getElementById('tweetpanel').innerHTML = '';

                    root._closeHandler(name,elementId,this);

                },
                this.skippedby.delay

            );

            var timerElement ={
                identifier: name,
                timerId : timeOutId
            };

            root.registeredDelays.push(timerElement);

        }

    };

};

Communication.prototype.setupPopupDialog = function(i){

    var root = this;

    var element = this.communicationElements[i];

    var elementId =  element.element;

    var name = element.name;

    if(!name  || name === ''){

        name = new Date();

    }

    if(element.skippedby){

        if(element.skippedby.events){

            for(var i = 0; i < element.skippedby.events.length; i++){

                var aEvent = element.skippedby.events[i];

                root.hub.addEventListener(aEvent, function(){
                    root._closeHandler(name,elementId,this);
                    root.closeDialog(elementId)}, element, name);

            }

        }

        if(element.skippedby.event){

            root.hub.addEventListener(element.skippedby.event, function(){
                root._closeHandler(name,elementId,this);
                root.closeDialog(elementId)}, element, name);

        }

    }

    root.registerSpotLightCloseHandler(name,elementId);

    root.registeredCommunication.push(element);

    element.display = function(){

        var templateStr = "";

        if (element.hasok === true){
            templateStr = SkipablePopOver(name,element.picturefile,element.headline);
        }
        else{
            templateStr = PopOver(name,element.picturefile,element.headline);
        }

        jQuery('#'+ elementId).popover({
                content: this.content,
                placement: this.placement,
                html : true,
                trigger: 'manual',
                container: 'body',
                animation: true,
                template: templateStr
            }
        );

        if(element.skippedby && element.skippedby.delay){

            var timeOutId = setTimeout(

                function(){

                    root._closeHandler(name,elementId,this);

                    root.closeDialog(elementId)


                },

                element.skippedby.delay

            );

            var timerElement ={
                identifier: name,
                timerId : timeOutId
            };

            root.registeredDelays.push(timerElement);

        }

        jQuery('#' + elementId).popover('show');

        if (element.hasok) {
            root.registerCloseHandler(name,elementId);
        }

    };

};

Communication.prototype.setupSkipablePopupDialog = function(i){

    var root = this;

    var element = this.communicationElements[i];
    var elementId =  element.element;
    var name = element.name;

    if(!name  || name === ''){
        name = new Date();
    }

    if(element.skippedby){

        if(element.skippedby.events){

            for(var i = 0; i < element.skippedby.events.length; i++){

                var aEvent = element.skippedby.events[i];

                root.hub.addEventListener(aEvent, function(){
                    root._closeHandler(name,elementId,this);
                    root.closeDialog(elementId)}, element, name);

            }

        }

        if(element.skippedby.event){

            root.hub.addEventListener(element.skippedby.event, function(){
                root._closeHandler(name,elementId,this);
                root.closeDialog(elementId)}, element, name);

        }

    }

    root.registeredCommunication.push(element);

    element.display = function(){

        jQuery('#'+ elementId).popover({
                content: this.content,
                placement: this.placement,
                trigger: 'manual',
                container: 'body',
                animation: true,
                template: SkipablePopOver(name,element.headline)
            }
        );

        if(element.skippedby && element.skippedby.delay){

            var timeOutId = setTimeout(

                function(){

                    root._closeHandler(name,elementId,this);

                    root.closeDialog(elementId)


                },

                element.skippedby.delay

            );

            var timerElement ={
                identifier: name,
                timerId : timeOutId
            };

            root.registeredDelays.push(timerElement);

        }

        jQuery('#' + elementId).popover('show');

        root.registerCloseHandler(name,elementId);

    };

};

Communication.prototype.setupSpotLight = function(i){

    var root = this;

    var element = this.communicationElements[i];

    var elementId = element.element;

    var name = element.name;

    if(!name  || name === ''){
        name = new Date();
    }

    if(element.skippedby){

        if(element.skippedby.events){

            for(var i = 0; i < element.skippedby.events.length; i++){

                var aEvent = element.skippedby.events[i];

                root.hub.addEventListener(aEvent, function(){
                    root._closeHandler(name,elementId,this);
                    root.closeSpotLightDialog(elementId)}, element, name);

            }

        }

        if(element.skippedby.event){

            root.hub.addEventListener(element.skippedby.event, function(){
                root._closeHandler(name,elementId,this);
                root.closeSpotLightDialog(elementId)}, element, name);

        }

    }


    root.registeredCommunication.push(element);

    element.display = function(){

        // add a transparent layer to disable all elements
        var spotlightbackground = document.createElement('div');
        spotlightbackground.id = 'spotlightbackground_' + elementId;
        spotlightbackground.setAttribute('class', 'spotlightbackground');
        document.body.appendChild(spotlightbackground);

        var spotlight = document.createElement('div');
        spotlight.id = 'spotlight_' + elementId;
        spotlight.setAttribute('class', 'spotlight');
        document.body.appendChild(spotlight);

        var oldZIndex = document.getElementById(elementId).style.zIndex;

        document.getElementById(elementId).style.zIndex = 70000;

        spotlight.onclick = function(){

            root._closeHandler(name,elementId,this);

            root.closeSpotLightDialog(elementId, oldZIndex);

            jQuery('#btn_hotkeymain').trigger('click');


        };

        var anchor = document.getElementById(elementId);
        var rect = anchor.getBoundingClientRect();
        spotlight.style.top = parseFloat(rect.top  -15) + 'px';
        spotlight.style.left = rect.left - 15 + 'px';

        if(element.dimension){
            if(element.dimension.height){
                spotlight.style.height = parseFloat(element.dimension.height) + 'px';
            }
            else{
                spotlight.style.height = parseFloat(rect.height + 30) + 'px';
            }
            if(element.dimension.width){
                spotlight.style.width = parseFloat(element.dimension.width + 15)  + 'px';
            }
            else{
                spotlight.style.width = anchor.offsetWidth + 30 + 'px';
            }

        }
        else{
            spotlight.style.height = parseFloat(rect.height + 30) + 'px';
            spotlight.style.width = anchor.offsetWidth + 30 + 'px';

        }

        var templateStr = "";

        if (element.hasok === false){
            templateStr = PopOver(name,element.picturefile,element.headline);
        }
        else{
            templateStr = SkipablePopOver(name,element.picturefile,element.headline);
        }

        jQuery('#'+ elementId).popover({
                content: this.content,
                placement: this.placement,
                trigger: 'manual',
                container: 'body',
                animation: true,
                template: templateStr
            }
        );

        if(element.skippedby && element.skippedby.delay){

            var timeOutId = setTimeout(

                function(){

                    root._closeHandler(name,elementId,this);

                    root.closeSpotLightDialog(elementId,oldZIndex)


                },

                element.skippedby.delay

            );

            var timerElement ={
                identifier: name,
                timerId : timeOutId
            };

            root.registeredDelays.push(timerElement);

        }

        jQuery('#' + elementId).popover('show');

        root.registerSpotLightCloseHandler(name,elementId);

    };

};

Communication.prototype.setupSkipablePicturePopupDialog = function(i){

    var root = this;

    var element = this.communicationElements[i];
    var elementId =  element.element;
    var name = element.name;

    if(!name  || name === ''){
        name = new Date();
    }

    if(element.skippedby){

        if(element.skippedby.events){

            for(var i = 0; i < element.skippedby.events.length; i++){

                var aEvent = element.skippedby.events[i];

                root.hub.addEventListener(aEvent, function(){
                    root._closeHandler(name,elementId,this);
                    root.closeDialog(elementId)}, element, name);

            }

        }

        if(element.skippedby.event){

            root.hub.addEventListener(element.skippedby.event, function(){
                root._closeHandler(name,elementId,this);
                root.closeDialog(elementId)}, element, name);

        }

    }

    root.registeredCommunication.push(element);

    element.display = function(){

        var templateStr = "";

        if (element.hasok === false){

            templateStr = PicturePopOver(name,element.picturefile,element.headline);

        } else {

            templateStr = SkipablePicturePopOver(name,element.picturefile,element.headline);

        }

        jQuery('#'+ elementId).popover({
                content: this.content,
                placement: this.placement,
                trigger: 'manual',
                container: 'body',
                animation: true,
                template: templateStr
            }
        );

        if(element.skippedby && element.skippedby.delay){

            var timeOutId = setTimeout(

                function(){

                    root._closeHandler(name,elementId,this);

                    root.closeDialog(elementId)


                },

                element.skippedby.delay

            );

            var timerElement ={
                identifier: name,
                timerId : timeOutId
            };

            root.registeredDelays.push(timerElement);

        }

        jQuery('#' + elementId).popover('show');

        root.registerCloseHandler(name,elementId);

    };

};



/**
 * handles the close-Action of a popup
 * there are differnt kinds of close-actions
 * depending on the dialog-type
 * and registered close-events
 * @param elementName
 * @param elementId
 * @private
 */
Communication.prototype._closeHandler = function(elementName, elementId, context){

    var root = this;

    var handlerFound = false;

    for(var i = 0; i<root.closehandler.length; i++){
        if(root.closehandler[i] == elementName){
            handlerFound = true;
            break;

        }
    }

    if (!handlerFound){
        root.hub.fire(elementName + '_closed');
    }

    // remove all listeners which are attached to these
    // close event
    root.hub.removeAllListenersFromPublisher(elementName);

    // remove all delayed trigger by clearing the time
    // out and splice the global timer array

    for(var i = 0; i<root.registeredDelays.length; i++){
        if(root.registeredDelays[i].identifier == elementName){
            clearTimeout(root.registeredDelays[i].timerId);
            root.registeredDelays.splice(i,1);
            break;

        }
    }

    root.closehandler.push(elementName);

};

/**
 * returns a closable Template
 * @param internalId
 * @returns {string}
 */
Communication.prototype.getSkipablePicturePopOverTemplate = function(internalId,picturefile){



    return '<div class="popover skoovecontextpopover" role="tooltip"><div class="arrow"></div><a id="btn_' + internalId + '"  title="Close" class="btn_tweetdialogclose">X</a>' +
        '<div class="popover-image"><img src="' + backendpath + picturefile + '"></div><div class="popover-content"></div></div>';

};

/**
 * returns a closable Template
 * @param internalId
 * @returns {string}
 */
Communication.prototype.getBigSkipablePicturePopOverTemplate = function(internalId,picturefile,headline){


    return '<div class="popover skoovebigpopover" role="tooltip"><div class="arrow"></div>' +
        '<div class="popover-headline">' + headline + '</div><div class="popover-image"><img src="' + backendpath + picturefile + '"></div><div class="popover-content"></div></div>';

};

/**
 * returns a description-Template that is located on the
 * procressbar
 * @param internalId
 * @returns {string}
 */
Communication.prototype.getDescriptionTemplate = function(internalId){

    return '<div class="popover skoovemainpopover" role="tooltip"><div class="arrow"></div>' +
        '<div class="popover-content"></div><div class="popovercontrols"></div></div>';

};

Communication.prototype.closeDialog = function(elementId){

    jQuery('#' + elementId).popover('destroy');

};

Communication.prototype.closeSpotLightDialog = function(elementId,oldZIndex){

    if(document.getElementById('spotlight_' + elementId)){

        document.getElementById('spotlight_' + elementId).style.display = 'none';

    }

    if(document.getElementById('spotlightbackground_'+ elementId)){

        document.getElementById('spotlightbackground_'+ elementId).style.display = 'none';

    }


    if(oldZIndex){
        document.getElementById(elementId).style.zIndex = oldZIndex;
    }
    else{
        document.getElementById(elementId).style.zIndex = 0;
    }


    jQuery('.spotlightbackground').remove();

    jQuery('#' + elementId).popover('destroy');

};

var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Module");

/**
 * handles loading of a module
 * @constructor
 */
ns.ModuleFactory = function(){};

/**
 * loads a module by the moduletype
 * @param type
 * @returns {PlayAlongMode}
 */
ns.ModuleFactory.prototype.getModule = function(stepData, globalRuntime, devicetype){

    var module = null;

    var startposition = (parseInt(stepData.videostarttime) / globalRuntime) * 100;

    var endposition = (parseInt(stepData.videoendtime) / globalRuntime) * 100;

    var runtimeInSec = parseInt(stepData.videoendtime) - parseInt(stepData.videostarttime);

    // TODO: change to switch-case

    if(stepData.templatetype === 'playalongmode'){

        module = this.setupPlayalongModule(stepData,startposition,endposition,runtimeInSec);

    }
    else if(stepData.templatetype === 'keymodeplus' && (devicetype==='midi' || devicetype==='none' || !devicetype)){

        module = this.setupKeyModePlusModule(stepData,startposition,endposition,runtimeInSec);

    }
    else if(stepData.templatetype === 'keymodeplus' && devicetype==='accoustic'){

        module = this.setupKeyModePlusAccousticModule(stepData,startposition,endposition,runtimeInSec);

    }
    else if(stepData.templatetype === 'lessonsummary'){

        module = this.setupLessonSummaryModule(stepData);

    }
    else if(stepData.templatetype === 'playcardsmode' && (devicetype==='midi' || devicetype==='none' || !devicetype)){

        module = this.setupPlayCardModule(stepData);

    }
    else if(stepData.templatetype === 'playcardsmode' && devicetype==='accoustic'){

        module = this.setupPlayCardsAccousticModule(stepData);

    }

    //TODO: ERRORHANDLING: Modus nicht bekannt
    return module;

};


ns.ModuleFactory.prototype.setupPlayCardModule = function(stepContent){

    var quests = [];
    var keycaptions = [];
    var communication = [];

    if(stepContent.quests){
        quests = stepContent.quests;
    }
    if(stepContent.keycaptions){
        keycaptions = stepContent.keycaptions;
    }
    if(stepContent.communication){
        communication = stepContent.communication;
    }

    var config = {
        'quests': quests,
        'keycaptions': keycaptions,
        'videopath' : stepContent.videofile,
        'communication': communication,
    };

    var module = new PlayCardsModule(config);

    return module;
};

ns.ModuleFactory.prototype.setupPlayCardsAccousticModule = function(stepContent){

    var quests = [];
    var keycaptions = [];
    var communication = [];

    if(stepContent.quests){
        quests = stepContent.quests;
    }
    if(stepContent.keycaptions){
        keycaptions = stepContent.keycaptions;
    }
    if(stepContent.communication){
        communication = stepContent.communication;
    }

    var config = {
        'quests': quests,
        'keycaptions': keycaptions,
        'videopath' : stepContent.videofile,
        'communication': communication,
    };

    var module = new PlayCardsAccousticModule(config);

    return module;
};


ns.ModuleFactory.prototype.setupLessonSummaryModule = function(stepContent){

    var communication = [];

    if(stepContent.communication){
        communication = stepContent.communication;
    }

    var config = {
       'communication': communication
    };

    var module = new LessonSummaryModule(config);

    return module;
};



ns.ModuleFactory.prototype.setupKeyModePlusModule = function(stepContent,startposition,endposition,runtimeInSec){

    var hand = 'b';
    var noteviewparts = [];
    var keycaptions = [];
    var partviewconfig = [];
    var communication = [];
    var noteviewbpm = stepContent.bpm;

    if (stepContent.data){
        if(stepContent.data.hand){
            hand = stepContent.data.hand;
        }
        if(stepContent.data.noteviewparts){
            noteviewparts = stepContent.data.noteviewparts;
        }
        if(stepContent.data.noteviewbpm){
            noteviewbpm = stepContent.data.noteviewbpm;
        }

    }

    if(stepContent.communication){
        communication = stepContent.communication;
    }
    if(stepContent.keycaptions){
        keycaptions = stepContent.keycaptions;
    }

    var config = {
        'numberOfStavesPerPage': stepContent.numberOfStavesPerPage,
        'musicxmlpath': stepContent.xmlpath,
        'offsetInSec': 0,
        'bpm': parseInt(stepContent.bpm),
        'noteviewbpm': parseInt(noteviewbpm),
        'startposition': startposition,
        'endposition': endposition,
        'runtimeInSec': runtimeInSec,
        'sliderelementId': 'timeslidermarker',
        'midipath' : stepContent.midipath,
        'videopath' : stepContent.videofile,
        'keycaptions' : keycaptions,
        'hand' : hand,
        'noteviewparts': noteviewparts,
        'communication': communication,
        'partviewconfig': partviewconfig,
        'lessonid': stepContent.lessonid,
        'stepid': stepContent.id,
        'isFirstStep': stepContent.isFirstStep,
        'isLastStep': stepContent.isLastStep,
        'isLastInteractive': stepContent.isLastInteractive

    };

    var module = new KeyModePlusModule(config);

    return module;

};

ns.ModuleFactory.prototype.setupKeyModePlusAccousticModule = function(stepContent,startposition,endposition,runtimeInSec){

    var hand = 'b';
    var noteviewparts = [];
    var keycaptions = [];
    var keycaptions = [];
    var partviewconfig = [];
    var communication = [];
    var noteviewbpm = stepContent.bpm;

    if (stepContent.data){
        if(stepContent.data.hand){
            hand = stepContent.data.hand;
        }
        if(stepContent.data.noteviewparts){
            noteviewparts = stepContent.data.noteviewparts;
        }
        if(stepContent.data.noteviewbpm){
            noteviewbpm = stepContent.data.noteviewbpm;
        }

    }

    if(stepContent.communication){
        communication = stepContent.communication;
    }
    if(stepContent.keycaptions){
        keycaptions = stepContent.keycaptions;
    }

    var config = {
        'numberOfStavesPerPage': stepContent.numberOfStavesPerPage,
        'musicxmlpath': stepContent.xmlpath,
        'offsetInSec': 0,
        'bpm': parseInt(stepContent.bpm),
        'noteviewbpm': parseInt(noteviewbpm),
        'startposition': startposition,
        'endposition': endposition,
        'runtimeInSec': runtimeInSec,
        'sliderelementId': 'timeslidermarker',
        'midipath' : stepContent.midipath,
        'videopath' : stepContent.videofile,
        'keycaptions' : keycaptions,
        'hand' : hand,
        'noteviewparts': noteviewparts,
        'communication': communication,
        'partviewconfig': partviewconfig,
        'lessonid': stepContent.lessonid,
        'stepid': stepContent.id,
        'isFirstStep': stepContent.isFirstStep,
        'isLastStep': stepContent.isLastStep,
        'isLastInteractive': stepContent.isLastInteractive

    };

    var module = new KeyModePlusAccousticModule(config);

    return module;

};


ns.ModuleFactory.prototype.setupPlayalongModule = function(stepContent,startposition,endposition,runtimeInSec){

    var hand = 'b';
    var noteviewparts = [];
    var precounterticks = 0;
    var communication = [];
    var keycaptions = [];

    // set the deafult value if no noteview bpm is given
    var noteviewbpm = stepContent.bpm;


    if (stepContent.data){
        if(stepContent.data.hand){
            hand = stepContent.data.hand;
        }
        if(stepContent.data.noteviewparts){
            noteviewparts = stepContent.data.noteviewparts;
        }
        if(stepContent.data.noteviewbpm){
            noteviewbpm = stepContent.data.noteviewbpm;
        }
        if(stepContent.data.precounter){
            precounterticks = stepContent.data.precounter;
        }
        if(stepContent.communication){
            communication = stepContent.communication;
        }
        if(stepContent.keycaptions){
            keycaptions = stepContent.keycaptions;
        }
    }

    var config = {
        'numberOfStavesPerPage': stepContent.numberOfStavesPerPage,
        'lessonStepId': stepContent.id,
        'musicxmlpath': stepContent.xmlpath,
        'videostarttime': stepContent.videostarttime,
        'videostoptime': stepContent.videoendtime,
        'offsetInSec': 2,
        'startposition': startposition,
        'endposition': endposition,
        'runtimeInSec': runtimeInSec,
        'midipath' : stepContent.midipath,
        'videopath' : stepContent.videofile,
        'bpm': parseInt(stepContent.bpm),
        'noteviewbpm': parseInt(noteviewbpm),
        'hand': hand,
        'noteviewparts': noteviewparts,
        'precounterticks': precounterticks,
        'communication': communication,
        'keycaptions':keycaptions

    };

    var module = new PlayAlongMode(config);

    return module;
};

var LessonSummaryModule = function(config){

    var root = this;

    this.type= 'summary';

    document.getElementById('moduleViewPort').style.display ='block';

    document.getElementById('noteviewport').style.display = 'none';

    this.hub = new EventHub();

    this.tweets = new Communication(config.communication, this.hub);

    this.tweets.init();

    document.getElementById('btn_hotkeymain').style.display = 'none';

    setTimeout(function(){

        root.hub.fire('skoovemoduleinit');

    },500);


    /**
     * init the HTMLPiano
     * @type {HTMLPiano}
     */
    this.piano = new HTMLPiano(
        {
            'domId': 'piano',
            'activekeycss': 'active',
            'keycaptions' : this.keycaptions
        }
    );

};

/**
 * start the Module
 */
LessonSummaryModule.prototype.start = function(){

};

/**
 * stop / teardown the Module
 */
LessonSummaryModule.prototype.stop = function(){

};

/**
 * stop / teardown the Module
 */
LessonSummaryModule.prototype.teardown = function(){

    var root = this;

    root.tweets.teardown();

    root.tweets = null;

    root.hub = null;

    document.getElementById('moduleViewPort').style.display ='none';

    document.getElementById('contentsection').className = document.getElementById('contentsection').className.replace("rocketbackground", "");

};

LessonSummaryModule.prototype.init = function(){

    var timeSpent = SKOOVE.Analytics.TimingService.stop();

    // show backgroundoverlay
    document.getElementById('overlaybackground').style.display = 'none';

    // show the spinner
    document.getElementById('loadingoverlay').style.display = 'none';

    document.getElementById('contentsection').className +=' rocketbackground';

    var moduleViewPort = document.getElementById('moduleViewPort');

    moduleViewPort.style.display = 'block';

    moduleViewPort.innerHTML = "";

    SKOOVE.Templating.TemplateRenderer('moduleViewPort', 'lesson_completed');

    document.getElementById('timespent').innerHTML = '<span class="minutesvalue">'+ timeSpent +'</span> <span class="minutescaption">min</span>' ;

    // recompute the position of the timespent circle

    var ppHeight = ((window.innerHeight-50-15)/2)/2;

    var ppWidth = window.innerWidth / 2;

    document.getElementById('timespent').style.left = ppWidth - 30+'px';

    document.getElementById('timespent').style.top = ppHeight + 35+'px';

    document.getElementById('contentsection').style.backgroundSize = (ppHeight*2) -30 + 'px';

};


LessonSummaryModule.prototype.handleUserInput = function(event){

    // a keydown event has been detected
    if (event.data[0] === 144 && event.data[2] > 0) {

        // adds the user pitch to the analyzer
        /* root.analyzer.addDetectedUserPitch({
         'type': event.data[0],
         'note': event.data[1],
         'velocity': event.data[2]
         });*/

        /*  if(SKOOVE.SOUNDOUTPUT.audioout){

         SKOOVE.SOUNDOUTPUT.audioout.noteOn(0,event.data[1],event.data[2]);

         }*/

    }
    else if(event.data[0] === 128 || event.data[2] === 0){

        /* if(SKOOVE.SOUNDOUTPUT.audioout){

         SKOOVE.SOUNDOUTPUT.audioout.noteOff(0, event.data[1],0);

         }*/

    }

};
/**
 * Mediator PlayAlongMode
 * acts as a the main-Controller
 * of the Play-Along-Mode
 * @param config
 * @constructor
 */
var PlayAlongMode = function(config){

    var root = this;

    this.type= 'playalongmode';
    
    // read the module config
    this.config = config;

    window.skoovedom.show('noteviewport');

    this.bpm = config.bpm;

    this.noteviewbpm = config.noteviewbpm;

    // parts which should be visible in
    // the noteviewer
    // {firstpart, lastpart}
    this.parts = config.noteviewparts;

    // path of the xml-file -> uses for rendering
    // the notedata
    this.musicxmlpath = config.musicxmlpath;

    this.hand = config.hand;

    this.numberOfStavesPerPage = config.numberOfStavesPerPage;

    this.prelude = 200;

    this.loopCounter = 1;

    this.noteviewSliderData = [];

    this.viewComposer = null;

    window.skoovedom.show('btn_hotkeymain');

    // used objects
    
    this.fileLoader = new RemoteFileLoader();

    this.analyzer = null;

    this.queue = new MIDIQueue();

    this.hub = window.skooveeventhub;

    this.precounter = this._setupPrecounter();

    this.tweets = new Communication(config.communication, this.hub);

    this.tweets.init();

};

/**
 * initialize the PlayAlongMode
 * @param callback
 */
PlayAlongMode.prototype.init = function(callback){

    var root = this;

    var onError = function(errorMessage){

        //alert('an error occured ' + errorMessage);

    };

    var onMusicXMLLoaded = function(plainXMLData){

        var usedMeasuresConfig = {};

        if(root.activeMeasures){

            usedMeasuresConfig = {
                firstMeasure: root.activeMeasures.start,
                lastMeasure: root.activeMeasures.end
            };

        }

        var paginationConfig = {
            activemeasures: root.activeMeasures,
            numberOfStavesPerPage: root.numberOfStavesPerPage,
            bpm: root.bpm,
            noteviewbpm: root.noteviewbpm,
            xmlStream: plainXMLData,
            hand: root.hand,
            notescorecontainerid : 'notecontainer',
            usedHands: root.hand,
            notescoreContainerId : 'notecontainer',
            usedMeasures : usedMeasuresConfig
        };

        var noteScoreDataSource = new NoteScoreDataSourcePlayAlong(paginationConfig).init();

        root.waypoints = noteScoreDataSource.getWayPoints();

        root.tickableQueue = noteScoreDataSource.getTickables();

        root.wholeruntime = noteScoreDataSource.wholeruntime;
   
        var viewComposerConfig = {
            'initalDelay': 0,
            'videopath': root.config.videopath,
            'runtime': root.wholeruntime,
            'numberOfPages': noteScoreDataSource.numberOfPages,
            'pagingTimes': noteScoreDataSource.pagingTimes,
            'waypoints': root.waypoints,
            'keycaptions' : root.config.keycaptions,
            'bpm': root.config.bpm,
            'hand': root.config.hand
        };

        root.viewComposer = new PlayAlongModeWidgetComposer(viewComposerConfig);

        root._registerEventHandler();

        window.skooveeventhub.addEventListener("video.loaded", root._doneInit, root);

    };

    var onPitchStackloaded = function(){

        globalSkooveIdentifier = 0;

        symbolid = 0;

        if(root.musicxmlpath != null && root.musicxmlpath != ''){

            var xmlLoader = new XmlLoader().getDocument(root.musicxmlpath,
                function(resp){
                    onMusicXMLLoaded(resp);
                },
                function(errorcode){
                    onError('while Loading')
                }
            );

        }
        else{
            onError('no musixxml');
        }

    };

    root._initPitchstack(onPitchStackloaded);

    skooveeventhub.addEventListener('slider.lastpositionfound', root._makeLoop ,root);

};

// TODO: put this into a base class
PlayAlongMode.prototype._doneInit = function () {

    var root = this;

    window.skoovedom.hide('overlaybackground');

    window.skoovedom.hide('loadingoverlay');

    window.setTimeout(
        
        function () {

            root.hub.fire('skoovemoduleinit');

        }, 500

    );

};


PlayAlongMode.prototype.teardown = function(){

    var root = this;

    root.hub.fire('skoovemoduleteardown');

    window.skooveeventhub.removeAllListeners("slider.lastpositionfound");

    window.skooveeventhub.removeAllListeners("video.loaded");

    root.precounter.stop();

    root.precounter = null;

    if(root.viewComposer){
        root.viewComposer.teardown();
    }

    root.tweets.teardown();

    root.tweets = null;

    root.hub = null;

};

/**
 * handles the userinput
 * wraps the input-Handler for converting the MIDI-Data
 * to systemintern notifications
 * @param ev
 */
PlayAlongMode.prototype.handleUserInput = function(event){


};

/**
 * do the loop
 * @private
 */
PlayAlongMode.prototype._makeLoop = function(){

    var root = this;

    root.hub.fire('skoove.trainer', {

        'eventName': 'loop.ended',
        'eventData': {
            'stepType': "playalongmode",
            'loopNumber': root.loopCounter

    }});

    root.viewComposer.start();

    root.numberOfEvents = root.queue.start(100);

    root.numberOfEvents = root.queue.numberOfNoteOnEvents;

    root.hub.fire('skoovemoduleloop' + root.loopCounter);

    root.loopCounter += 1;

};

/**
 * start the module
 */
PlayAlongMode.prototype.start = function(){

    var root = this;
	
	root.hub.fire('skoovemodulestarted');

    //this.viewComposer.hotkeysection.activateStopButton();

    document.getElementById('btn_hotkeymain').innerHTML = 'stop';

    skoovedom.replaceCssClass('btn_hotkeymain', 'btn_hotkeystart', 'btn_hotkeystop');

    if(root.config.precounterticks<=1){ 

        root.config.precounterticks = 4;

    }

    this.precounter.init();

    this.precounter.start();

    this.precounter.onPrecountDone = function(){

        root.viewComposer.start();
		
		root.hub.fire('skoovemoduleprecounterdone');

        // reset the number of already played events
        root.numberOfPlayedEvents = 0;

        // rebuild the queue and get the number of events sheduled
        // in the queue
        root.numberOfEvents = root.queue.start(root.prelude);

        root.numberOfEvents = root.queue.numberOfNoteOnEvents;

    };

};

/**
 * stops the module
 */
PlayAlongMode.prototype.stop = function(){

    this.precounter.stop();

    if(this.viewComposer){

        this.viewComposer.stop();

    }

    document.getElementById('pageviewslider').style.left = '-80px';

    document.getElementById('noteviewslider').style.left = '0px';

    // todo: put this into the composer
    document.getElementById('btn_hotkeymain').innerHTML = 'start';


    // todo: put this into the composer
    skoovedom.replaceCssClass('btn_hotkeymain', 'btn_hotkeystop', 'btn_hotkeystart');

    this.queue.stop();

    this.hub.fire('skoovemodulestopped');

};

PlayAlongMode.prototype.reset = function(){

};

/**
 * setup the configurationfile for the view by accessing internalmembers
 * @returns {{noteviewdata: Array, startposition: (*|SongoverviewWidgetComposer.noteViewSlider.startposition|SongoverviewWidgetComposer.videoTimeSlider.startposition|PlayAlongModeWidgetComposer.videoTimeSlider.startposition|PlayAlongModeWidgetComposer.noteViewSlider.startposition|KeyModeWidgetComposer.videoTimeSlider.startposition), endposition: (*|SongoverviewWidgetComposer.videoTimeSlider.endposition|PlayAlongModeWidgetComposer.videoTimeSlider.endposition|KeyModeWidgetComposer.videoTimeSlider.endposition|PlayAlongModeWaitingModeWidgetComposer.videoTimeSlider.endposition|KeyModePlusWidgetComposer.videoTimeSlider.endposition), offsetInSec: (*|SongoverviewWidgetComposer.noteViewSlider.offsetInSec|SongoverviewWidgetComposer.videoTimeSlider.offsetInSec|PlayAlongModeWidgetComposer.videoTimeSlider.offsetInSec|KeyModeWidgetComposer.videoTimeSlider.offsetInSec|PlayAlongModeWaitingModeWidgetComposer.videoTimeSlider.offsetInSec), runtimeInSec: (*|SongoverviewWidgetComposer.videoTimeSlider.runtimeInSec|PlayAlongModeWidgetComposer.videoTimeSlider.runtimeInSec|KeyModeWidgetComposer.videoTimeSlider.runtimeInSec|PlayAlongModeWaitingModeWidgetComposer.videoTimeSlider.runtimeInSec|KeyModePlusWidgetComposer.videoTimeSlider.runtimeInSec), keycaptions: (*|PlayCardsMode.piano.keycaptions|PlayAlongModeWidgetComposer.piano.keycaptions|KeyModeWidgetComposer.piano.keycaptions|PlayAlongModeWaitingModeWidgetComposer.piano.keycaptions|KeyModePlusWidgetComposer.piano.keycaptions), videostarttime: (*|lessoncontent.videostarttime|SongoverviewWidgetComposer.videoplayer.videostarttime|PlayAlongModeWidgetComposer.videoplayer.videostarttime|KeyModeWidgetComposer.videoplayer.videostarttime|PlayAlongModeWaitingModeWidgetComposer.videoplayer.videostarttime), videostoptime: (*|SongoverviewWidgetComposer.videoplayer.videostoptime|PlayAlongModeWidgetComposer.videoplayer.videostoptime|KeyModeWidgetComposer.videoplayer.videostoptime|PlayAlongModeWaitingModeWidgetComposer.videoplayer.videostoptime|KeyModePlusWidgetComposer.videoplayer.videostoptime), videopath: (*|SongoverviewWidgetComposer.videoplayer.videopath|PlayAlongModeWidgetComposer.videoplayer.videopath|KeyModeWidgetComposer.videoplayer.videopath|PlayAlongModeWaitingModeWidgetComposer.videoplayer.videopath|KeyModePlusWidgetComposer.videoplayer.videopath), bpm: (*|SongoverviewWidgetComposer.noteViewSlider.bpm|config.bpm|bpm|SongoverviewMode.bpm|PartAssignmentMode.bpm), hand: (*|hand|config.hand)}}
 * @private
 */
PlayAlongMode.prototype._setUpWidgetComposerConfig = function(){

    var root = this;

    var viewConfig = {
        'stepParts': root.parts,
        'notePanelData': root.noteviewSliderData,
        'noteviewdata': root.noteviewSliderData.notePositions,
        'partpositions': root.noteviewSliderData.partPositions,
        'startposition': root.config.startposition,
        'endposition': root.config.endposition,
        'offsetInSec': 0,
        'runtimeInSec': root.config.runtimeInSec,
        'keycaptions' : root.config.keycaptions,
        'videostarttime': root.config.videostarttime,
        'videostoptime':  root.config.videostoptime,
        'videopath' : root.config.videopath,
        'bpm': root.config.bpm,
        'hand': root.config.hand,
        'wholeruntime': root.wholeruntime
    };

    return viewConfig;

};


PlayAlongMode.prototype._registerEventHandler = function(){

    var root = this;

    /**
     * handles a queued note-event
     * @param playedData
     */
    this.queue.onNoteEvent = function (playedData) {

        // get the keynumber of the queue-signal
        var currentKey = playedData.eventdata.noteNumber;

        // get the eventtype of the queue-signal
        var eventtype = playedData.eventtype;

        // check the eventtype
        if(eventtype === 'noteOn'){

            root.viewComposer.visualizeSystemNoteOn(currentKey);

        }
        else{

            root.viewComposer.visualizeSystemNoteOff(currentKey);

        }

    };

};

PlayAlongMode.prototype._initPitchstack = function(callback){

    var root = this;

    // load the file
    root.fileLoader.loadRemoteFile(root.config.midipath , function (rawMidiData) {

        // setup the Converter
        var midiConverter = new MIDIConverter();

        // prelude is set to 0
        midiConverter.init(rawMidiData, root.bpm, root.prelude);

        var delayedNoteStack = midiConverter.getDelayedStack();

        root.queue.init(delayedNoteStack);

        // run the callback
        callback();

    });

};

/**
 * setup the Precounter by reading the config data
 * of these Module
 * @returns {PrecounterMetronome}
 * @private
 */
PlayAlongMode.prototype._setupPrecounter = function(){

    var root = this;


    var preCounter = new PrecounterMetronome(
        {
            'domId': 'tweetpanel',
            'bpm': root.config.bpm,
            'notesToPlay': root.config.precounterticks
        }
    );

    return preCounter;

};

/**
 * Bootstraps and Bundles all widgets used in PlayAlongMode
 * Composed Objects:
 * - VideoTimeSlider
 * - HTMLGhotsPiano
 * - VideoPlayer
 * @constructor

  var viewComposerConfig = {
            'initalDelay': 0,
            'videopath': root.config.videopath,
            'runtime': root.wholeruntime,
            'numberOfPages': noteScoreDataSource.numberOfPages,
            'pagingTimes': noteScoreDataSource.pagingTimes
            'waypoints': root.waypoints,
            'keycaptions' : root.config.keycaptions,
            'bpm': root.config.bpm,
            'hand': root.config.hand
        };
 */

var PlayAlongModeWidgetComposer = function (config) {


    this.registeredWidgets = [];

    this.config = config;

    this.videopath = config.videopath;

    this.keycaptions = config.keycaptions ? config.keycaptions : [];

    // setup the piano
    this.piano = new HTMLPiano(
        {
            'domId': 'piano',
            'activekeycss': 'active',
            'keycaptions': this.keycaptions
        }
    );

    // setup the videoplayer
    this.videoplayer = new VideoPlayer(
        {
            'elementId': 'videolayer',
            'initialDelay': config.initialDelay,
            'videopath': config.videopath
        }
    );

    // setup the noteviewSlider
    this.noteViewSlider =  new NoteViewSlider(
        {
            'elementId': 'noteviewslider',
            'initialDelay': config.initialDelay,
            'waypoints': config.waypoints,
            'runtime': config.runtime
        }
    );

    // setup the scoreOverviewSlider
    this.scoreOverviewSlider = new ScoreOverviewSlider(
        {
            'elementId': 'pageoverviewslider',
            'initialDelay': config.initialDelay,
            'runtime': config.runtime
        }

    );

    this.paginator = new PlayAlongNotescorePaginator( 
        {
            'elementId': 'pageviewslider',
            'numberOfPages': config.numberOfPages,
            'pagingTimes': config.pagingTimes
        }
    );


    this.noteViewer = NoteViewerFactory(this.config);

    this.registeredWidgets.push(this.noteViewer);

    this.registeredWidgets.push(this.noteViewSlider);

    this.registeredWidgets.push(this.piano);
    
    this.registeredWidgets.push(this.videoplayer);

    this.registeredWidgets.push(this.scoreOverviewSlider);

    this.registeredWidgets.push(this.hotkeysection);

    this.noteViewSlider.show();

    this.noteViewer.init();

    this.videoplayer.unmute();

    //this.hotkeysection.activateStartButton();

    this.paginator.init();

};

/**
 * visualizes a keyOff-Event from User-Input
 * @param note
 */
PlayAlongModeWidgetComposer.prototype.showUserKeyUp = function (note) {

    this.piano.showUserKeyUp(note);

};

/**
 * visualizes a keyDown-Event (Note-on-Event) from Queue-Input
 * @param note
 */
PlayAlongModeWidgetComposer.prototype.visualizeSystemNoteOn = function (note) {

    // call the method in pianowidget
    this.piano.visualizeSystemNoteOn(note);

};

/**
 * visualizes a keyUp-Event (Note-off-Event) from Queue-Input
 * @param note
 */
PlayAlongModeWidgetComposer.prototype.visualizeSystemNoteOff = function (note) {

    // call the method in pianowidget
    this.piano.visualizeSystemNoteOff(note);

};

/**
 * wraps the resuming-behaving of all used Widgets
 * usecase: the app has been paused-> now the app is restarted
 * all widgets have to visualize the Resume
 */
PlayAlongModeWidgetComposer.prototype.start = function(){

    this.videoplayer.start();

    this.paginator.start();

    this.scoreOverviewSlider.start();

    this.resetWidgets();

};


PlayAlongModeWidgetComposer.prototype.loop = function(){

    this.resetWidgets();

};


/**
 * stops all widgets
 */
PlayAlongModeWidgetComposer.prototype.stop = function(){

    this.noteViewSlider.stop();

    this.scoreOverviewSlider.stop();

    this.videoplayer.stop();

    this.piano.clear();

    this.paginator.stop();

};

PlayAlongModeWidgetComposer.prototype.reset = function(){

    this.piano.clearMarkers();

    this.videoplayer.reset();

};

/**
 * wraps the pause-behaving of all used Widgets
 * usecase: the app has been paused
 * all widgets have to visualize the pause
 */
PlayAlongModeWidgetComposer.prototype.pause = function(){

    this.videoplayer.pause();

};


/**
 * resets all widgets
 */
PlayAlongModeWidgetComposer.prototype.resetWidgets = function () {

    this.noteViewSlider.restart();

    this.piano.clearMarkers();

};

/**
 * tears down the module
 */
PlayAlongModeWidgetComposer.prototype.teardown = function(){

    for(var i = 0; i < this.registeredWidgets.length; i++){

        if(this.registeredWidgets[i]){
            
            this.registeredWidgets[i].teardown();

        }

        this.registeredWidgets[i] = null;
    }

    // unset all used widgets
    this.noteViewer.hide();

    this.noteViewSlider.hide();

    document.getElementById('tweetpanel').innerHTML = '';

    this.piano = null;

    this.videoplayer = null;

    this.noteViewSlider = null;

};
var PlayCardsModule = function(config){

    var root = this;

    // parse the string and convert it to json
    this.quests = eval(config.quests);

    this.type = 'playcards';

    // number of Quests
    this.numberOfQuestions = this.quests.length;

    // the currentQuest
    this.currentQuestIndex = 0;

    // current requested noteindex
    this.currentNoteIndex = 0;

    // get the keycaptions
    this.keycaptions = config.keycaptions ? config.keycaptions : [];

    document.getElementById('moduleViewPort').style.display ='block';

    document.getElementById('noteviewport').style.display = 'none';

    this.viewComposer = new PlayCardsViewComposer(config);

    //this.hotkeysection = SKOOVE.Widgets.HotkeySectionWidget.init();

    //this.hotkeysection.hideMainButton();

    this.hub = window.skooveeventhub;

    this.tweets = new Communication(config.communication, this.hub);

    this.tweets.init();

    /**
     * init the HTMLPiano
     * @type {HTMLPiano}
     */
    this.piano = new HTMLPiano(
        {
            'domId': 'piano',
            'activekeycss': 'active',
            'keycaptions' : this.keycaptions
        }
    );


};

/**
 * start the Module
 */
PlayCardsModule.prototype.start = function(){

};

/**
 * stop / teardown the Module
 */
PlayCardsModule.prototype.stop = function(){

    this.piano.clearKeyCaptions();

};

/**
 * stop / teardown the Module
 */
PlayCardsModule.prototype.teardown = function(){

    var root = this;

    root.hub.fire('skoovemoduleteardown');

    root.tweets.teardown();

    root.tweets = null;

    root.hub = null;

    document.getElementById('moduleViewPort').style.display ='none';

    this.piano.clearKeyCaptions();

};


/**
 * handles the User input via piano-keyboard
 * @param ev
 */
PlayCardsModule.prototype.handleUserInput = function(ev){

    var root = this;

    if(ev.data[0] == 144 && ev.data[2] > 0){

        var questCardId = this.currentQuestIndex + '_' + this.currentNoteIndex;

        if(ev.data[1] === this.quests[this.currentQuestIndex].notes[this.currentNoteIndex]){

            window.skoovedom.replaceCssClass(questCardId,'falsecircle','correctcircle');

            this.piano.visualizeCorrectKeyDown(ev.data[1]);

            this.currentNoteIndex = this.currentNoteIndex + 1;

            if(this.currentNoteIndex === this.quests[this.currentQuestIndex].notes.length){

                window.setTimeout( function(){
                    
                    root.setQuestToDone(root.currentQuestIndex);

                    root.currentQuestIndex = root.currentQuestIndex + 1;
                    
                    if(root.currentQuestIndex === root.quests.length){

                        root.hub.fire('playcardsmodedone');

                    }

                    root.currentNoteIndex = 0;
                }, 1000);

            }

            this.activateNextQuestion();

        }
        else{

            window.skoovedom.replaceCssClass(questCardId,'','falsecircle');

            this.piano.visualizeFalseKeyDownWithDelay(ev.data[1],300)

        }
    }
    else if((ev.data[0]==144 && ev.data[2]==0)|| ev.data[0]==128){

         this.piano.visualizeUsersKeyUp(ev.data[1]);

    }
};

PlayCardsModule.prototype.init = function(){

    var root = this;

    var moduleViewPort = document.getElementById('moduleViewPort');

    moduleViewPort.style.display='block';

    moduleViewPort.innerHTML = "";

    // set up the view widgets

    for(var i = 0; i < this.numberOfQuestions; i++){

        var elementId = i + 1;

        var divElement = document.createElement('div');

        divElement.className = 'questioncard';

        divElement.setAttribute('id','questionid_' + elementId);

        divElement.style.zIndex = 100 + this.numberOfQuestions - i;

        divElement.style.left = i*30 +'px';

        divElement.style.top = 140 - i*5 +'px';

        var hElement = document.createElement('h2');

        hElement.innerHTML = this.quests[i].caption;

        divElement.appendChild(hElement);

        var container = document.createElement('div');

        container.setAttribute('class','contentcircelcontainer');

        if(this.quests[i].subcontent){

            for(var j=0;j< this.quests[i].subcontent.length;j++){

                var subElement = document.createElement('p');

                var questPartId = i + '_' + j;

                subElement.setAttribute('id',questPartId);

                subElement.setAttribute('class','contentcircel');

                if(j === 0){
                    subElement.setAttribute('class','contentcircel activecircle');
                }

                subElement.innerHTML=this.quests[i].subcontent[j];

                container.appendChild(subElement);

            }

        }

        divElement.appendChild(container);

        var pagerElement = document.createElement('span');

        pagerElement.setAttribute('class','playcardspager');

        // set the pager
        var currentQuestion = i + 1;

        pagerElement.innerHTML = currentQuestion + '/' + this.numberOfQuestions;

        divElement.appendChild(pagerElement);

        moduleViewPort.appendChild(divElement);

    }

    this.activateQuestion();

    document.getElementById('overlaybackground').style.display= 'none';

    // hide the spinner
    document.getElementById('loadingoverlay').style.display= 'none';

    setTimeout(function(){

        root.hub.fire('skoovemoduleinit');

    },500);


};

/**
 * marks the first quest after init
 */
PlayCardsModule.prototype.activateQuestion = function(){

    var domindex = this.currentQuestIndex + 1;

    var elementId = 'questionid_' + domindex;

    window.skoovedom.addCss(elementId, 'activecircle');

};

/**
 * marks the first quest after init
 */
PlayCardsModule.prototype.activateNextQuestion = function(){

    var questCardId = this.currentQuestIndex + '_' + this.currentNoteIndex;

    window.skoovedom.addCss(questCardId, 'activecircle');

};

/**
 * marks a quest as done
 * @param currentQuest
 */
PlayCardsModule.prototype.setQuestToDone = function(currentQuest){

    var index = currentQuest + 1;

    var theCard = document.getElementById('questionid_' + index);

    theCard.style.display = 'none';

};

var PlayCardsAccousticModule = function(config){

    //SKOOVE.Service.LogService('PlayCardsAccousticModule start');

    this.type = 'playcards';

    // parse the string and convert it to json
    this.quests = eval(config.quests);

    this.view = new SKOOVE.Trainer.PlayCardsView().init(this.quests);

    this.analyzer = null; //new SKOOVE.Analizer.AccousticAnalizer();

    var root = this;

    window.inputSource.getStream(

        function(stream){
            root.analyzer = new SKOOVE.Service.SimplePitchAudioAnalizer(stream);
            root.analyzer.run();
        }

    );



    // number of Quests
    this.numberOfQuestions = this.quests.length;

    // the currentQuest
    this.currentQuestIndex = 0;

    // current requested noteindex
    this.currentNoteIndex = 0;

    // get the keycaptions
    this.keycaptions = config.keycaptions ? config.keycaptions : [];

    document.getElementById('moduleViewPort').style.display ='block';

    document.getElementById('noteviewport').style.display = 'none';

    this.viewComposer = new PlayCardsViewComposer(config);

    this.hub = window.skooveeventhub;

    this.tweets = new Communication(config.communication, this.hub);

    this.tweets.init();

    /**
     * init the HTMLPiano
     * @type {HTMLPiano}
     */
    this.piano = new HTMLPiano(
        {
            'domId': 'piano',
            'activekeycss': 'active',
            'keycaptions' : this.keycaptions
        }
    );


};

/**
 * start the Module
 */
PlayCardsAccousticModule.prototype.start = function(){

};

/**
 * stop / teardown the Module
 */
PlayCardsAccousticModule.prototype.stop = function(){

    //this.analyzer.reset();

    this.piano.clearKeyCaptions();

};

/**
 * stop / teardown the Module
 */
PlayCardsAccousticModule.prototype.teardown = function(){

    var root = this;

    root.hub.fire('skoovemoduleteardown');

    root.tweets.teardown();

    root.tweets = null;

    root.hub = null;

    root.analyzer.stop();

    root.analyzer = null;

    document.getElementById('moduleViewPort').style.display ='none';

    this.piano.clearKeyCaptions();

};


PlayCardsAccousticModule.prototype._registerAnalyzierEventHandler = function () {

    var root = this;

    /**
     * user hits the right keys look for the next note and played with the right delay
     */
    root.analyzer.onPitchDetected = function (notenumber) {

        if(notenumber<100){
            var message = {}
            var data = [];
            data[0]=144;
            data[1]= notenumber;
            data[2]=127;
            message.data = data;
            root.handleUserInput(message);

        }


    };

    /**
     * user hits the wrong key handling wrong pitches
     */
    /*root.analyzer.onPitchCompareFailed = function (expectedPitch, userPitch) {

        console.log('failed');

        // visualize on keyboard
        //root.viewComposer.visualizeFalsePitch(expectedPitch, userPitch);

    };*/

};



/**
 * handles the User input via piano-keyboard
 * @param ev
 */
PlayCardsAccousticModule.prototype.handleUserInput = function(ev){

    var root = this;

    if(ev.data[0] == 144 && ev.data[2] > 0){

        var questCardId = this.currentQuestIndex + '_' + this.currentNoteIndex;

        if(ev.data[1] === this.quests[this.currentQuestIndex].notes[this.currentNoteIndex]){

            window.skoovedom.replaceCssClass(questCardId,'falsecircle','correctcircle');

            this.piano.visualizeCorrectKeyDownWithDelay(ev.data[1],300);

            this.currentNoteIndex = this.currentNoteIndex + 1;

            if(this.currentNoteIndex === this.quests[this.currentQuestIndex].notes.length){

                window.setTimeout( function(){
                    
                    root.view.setQuestToDone(root.currentQuestIndex);

                    root.currentQuestIndex = root.currentQuestIndex + 1;
                    
                    if(root.currentQuestIndex === root.quests.length){

                        root.hub.fire('playcardsmodedone');

                    }

                    root.currentNoteIndex = 0;
                }, 1000);

            }

            this.activateNextQuestion();

        }
        else{

            window.skoovedom.replaceCssClass(questCardId,'','falsecircle');

            this.piano.visualizeFalseKeyDownWithDelay(ev.data[1],300)

        }
    }
    else if((ev.data[0]==144 && ev.data[2]==0)|| ev.data[0]==128){

         this.piano.visualizeUsersKeyUp(ev.data[1]);

    }
};

PlayCardsAccousticModule.prototype.reset = function(){

};


PlayCardsAccousticModule.prototype.init = function(){

    SKOOVE.Service.LogService('PlayCardsAccousticModule init');

    var root = this;

    root._registerAnalyzierEventHandler();

    root.view.render();

    this.activateQuestion();

    document.getElementById('overlaybackground').style.display= 'none';

    // hide the spinner
    document.getElementById('loadingoverlay').style.display= 'none';

    setTimeout(function(){

        root.hub.fire('skoovemoduleinit');

    },500);

};

/**
 * marks the first quest after init
 */
PlayCardsAccousticModule.prototype.activateQuestion = function(){

    var domindex = this.currentQuestIndex + 1;

    var elementId = 'questionid_' + domindex;

    window.skoovedom.addCss(elementId, 'activecircle');

};

/**
 * marks the first quest after init
 */
PlayCardsAccousticModule.prototype.activateNextQuestion = function(){

    var questCardId = this.currentQuestIndex + '_' + this.currentNoteIndex;

    window.skoovedom.addCss(questCardId, 'activecircle');

};

/**
 * marks a quest as done
 * @param currentQuest
 */
/*PlayCardsAccousticModule.prototype.setQuestToDone = function(currentQuest){

    var index = currentQuest + 1;

    var theCard = document.getElementById('questionid_' + index);

    theCard.style.display = 'none';

};*/

var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Trainer");

ns.PlayCardsView = function(){

    return this;
};

ns.PlayCardsView.prototype.init = function(modeldata){

    this.quests = modeldata;

    this.numberOfQuestions = modeldata.length;

    return this;

};

ns.PlayCardsView.prototype.render = function(){

    SKOOVE.Service.LogService('PlayCardsView render');

    var moduleViewPort = document.getElementById('moduleViewPort');

    moduleViewPort.style.display='block';

    moduleViewPort.innerHTML = "";

    // set up the view widgets

    for(var i = 0; i < this.numberOfQuestions; i++){

        var elementId = i + 1;

        var divElement = document.createElement('div');

        divElement.className = 'questioncard';

        divElement.setAttribute('id','questionid_' + elementId);

        divElement.style.zIndex = 100 + this.numberOfQuestions - i;

        divElement.style.left = i*30 +'px';

        divElement.style.top = 140 - i*5 +'px';

        var hElement = document.createElement('h2');

        hElement.innerHTML = this.quests[i].caption;

        divElement.appendChild(hElement);

        var container = document.createElement('div');

        container.setAttribute('class','contentcircelcontainer');

        if(this.quests[i].subcontent){

            for(var j=0;j< this.quests[i].subcontent.length;j++){

                var subElement = document.createElement('p');

                var questPartId = i + '_' + j;

                subElement.setAttribute('id',questPartId);

                subElement.setAttribute('class','contentcircel');

                if(j === 0){
                    subElement.setAttribute('class','contentcircel activecircle');
                }

                subElement.innerHTML=this.quests[i].subcontent[j];

                container.appendChild(subElement);

            }

        }

        divElement.appendChild(container);

        var pagerElement = document.createElement('span');

        pagerElement.setAttribute('class','playcardspager');

        // set the pager
        var currentQuestion = i + 1;

        pagerElement.innerHTML = currentQuestion + '/' + this.numberOfQuestions;

        divElement.appendChild(pagerElement);

        moduleViewPort.appendChild(divElement);

    }

};

ns.PlayCardsView.prototype.setQuestToDone = function(currentQuest){

    var index = currentQuest + 1;

    var theCard = document.getElementById('questionid_' + index);

    theCard.style.display = 'none';

};

var PlayCardsViewComposer = function(config){
	
	this.videoplayer = VideoPlayerFactory({
            'elementId': 'videolayer',
            'prelude': 0,
            'videopath': config.videopath
    });

};

var KeyModePlusModule = function (config) {

    var root = this;

    this.type = 'keymodeplus';

    this.moduleState = 'init';

    this.mode = null;

    window.skoovedom.show('noteviewport');

    // read the config and set lokal variables
    this.config = config;

    // get the path to musicxml-file
    this.musicxmlpath = config.musicxmlpath;

    // ceckk if this step is the last interactive step
    this.isLastInteracvtiveStep = config.isLastInteractive;

    // get the path to the midi-file
    this.midipath = config.midipath;

    // parts which should be displayed in the noteview
    this.activeMeasures = config.noteviewparts;

    // set the bpm -> is used for computing
    // the midi pitchstack and the noteviewslider
    this.bpm = config.bpm;

    this.hand = config.hand;

    this.noteviewbpm = config.noteviewbpm;

    // number of staves that should be displayed in
    // notescore
    this.numbersOfStavesPerPage = config.numberOfStavesPerPage;

    this.pitchstack = [];

    this.lastkeyfound = false;

    // @todo inject the analizer
    if(window.inputSource.getType()==='microphone'){

        //window.inputSource.listenForInput();

        this.mode = 'microphone';

        this.analyzer = new SKOOVE.Analizer.AccousticAnalizer();
    
    }
    else{
    
        this.mode = 'midi';

        this.analyzer = new SKOOVE.Analizer.KeyModePlusMidiAnalizer();
    
    }

    this.fileLoader = new RemoteFileLoader();

    this.hub = window.skooveeventhub;

    this.tweets = new Communication(config.communication, root.hub);

    this.videoPlayer = null;

    this.viewComposer = null;

    this.noteScorePaginator = null;

    this.tweets.init();

    this.loopcounter = 0;

    this.loop = function () {

        root.loopcounter += 1;

        root.hub.fire('skoove.trainer', {

            'eventName': 'loop.ended',
            'eventData': {
                'stepType': "keymodeplus",
                'loopNumber': root.loopcounter

        }});

        root.videoPlayer.reset();

        root.hub.fire('skoovemoduleloop' + root.loopcounter);

        if (root.loopcounter === 1 && root.isLastInteracvtiveStep) {

            window.skooveeventhub.fire('keymodeplus.lessondone',
                {
                    lessonid: root.config.lessonid
                }
            );
        }

        root.start(true);

    };

    this.markTheForKeyse = function(wayPointIndex){

        var expectedPitch = root.expectedArray[wayPointIndex];

        for (var i = 0; i < expectedPitch.length; i++) {
            // visualize
            root.viewComposer.visualizePianoNoteOn(expectedPitch[i].midiNoteNumber);
        }

    };

    skooveeventhub.addEventListener('slider.lastpositionfound', root.loop ,root);

    skooveeventhub.addEventListener('WaitModeVideoPlayer.videopaused', root.markTheForKeyse, root);

    window.skoovedom.show('btn_hotkeymain');

};

/**
 * init the module
 * @param callback
 */
KeyModePlusModule.prototype.init = function (callback) {

    var root = this;

    var onError = function(errorMessage){

        // throw an error

    };

    var onMusicXMLLoaded = function(plainXMLData){

        var usedMeasuresConfig = {}; 

        if(root.activeMeasures){

            usedMeasuresConfig = {
                firstMeasure: root.activeMeasures.start,
                lastMeasure: root.activeMeasures.end
            };

        }

        var paginationConfig = {
            activemeasures: root.activeMeasures,
            numberOfStavesPerPage: root.numbersOfStavesPerPage,
            bpm: root.bpm,
            noteviewbpm: root.noteviewbpm,
            xmlStream: plainXMLData,
            hand: root.hand,
            notescorecontainerid : 'notecontainer',
            usedHands: root.hand,
            notescoreContainerId : 'notecontainer',
            usedHands: root.hand,
            usedMeasures : usedMeasuresConfig
        };

        var noteScoreDataSource = new NoteScoreDataSource(paginationConfig).init();

        root.expectedArray = noteScoreDataSource.getExpectedQueue();

        root.waypoints = noteScoreDataSource.getWayPoints();

        root.tickableQueue = noteScoreDataSource.getTickables();

        root.sequenceStack = noteScoreDataSource.getSequenceStack();

        root.runtime = noteScoreDataSource.getWholeRuntime();

        root.noteScorePaginator = new KeyModeNotescorePaginator(
            {'numberOfPages':noteScoreDataSource.numberOfPages,
             'pagingTimes': noteScoreDataSource.pagingTimes}
        );

        root.noteScorePaginator.createPages();

        root.videoPlayer = new SequenceVideoPlayer(root.sequenceStack);

        // init the analyzer
        root.analyzer.init(root.expectedArray);

        var viewConfig = {
            'startposition': root.config.startposition,
            'endposition': root.config.endposition,
            'offsetInSec': root.config.offsetInSec,
            'runtimeInSec': root.config.runtimeInSec,
            'keycaptions': root.config.keycaptions,
            'videopath': root.config.videopath,
            'bpm': root.config.bpm,
            'hand': root.config.hand,
            'tickableQueue': root.tickableQueue,
            'waypoints': root.waypoints,
            'runtime': root.runtime,
            'initialDelay':0
        };

        root.viewComposer = new KeyModePlusWidgetComposer(viewConfig);

        root._registerAnalyzierEventHandler();

        window.skooveeventhub.addEventListener("video.loaded", root._doneInit, root);

    };

    var onPitchStackloaded = function(){

        globalSkooveIdentifier = 0;

        symbolid = 0;

        if(root.musicxmlpath != null && root.musicxmlpath != ''){

           var xmlLoader = new XmlLoader().getDocument(root.musicxmlpath,
                    function(resp){
                        onMusicXMLLoaded(resp);
                    },
                    function(errorcode){
                        onError('while Loading')
                    }
           );    

        }
        else{
            onError('no musixxml');
        }
            
    };

    onPitchStackloaded();

};

KeyModePlusModule.prototype._doneInit = function () {

    var root = this;

    window.skoovedom.hide('overlaybackground');

    window.skoovedom.hide('loadingoverlay');

    window.setTimeout(
        function () {

            root.hub.fire('skoovemoduleinit');

        }, 500

    );

};

/**
 * start the module
 */
KeyModePlusModule.prototype.start = function (looped) {

    var root = this;

    if (!looped) {

        window.skooveeventhub.fire('keymodeplus.lessonstarted',
            {
                lessonid: root.config.lessonid
            }
        );

        looped = false;

    }

    // reset the analyzer
    root.analyzer.reset();

    document.getElementById('btn_hotkeymain').innerHTML = 'stop';

    skoovedom.replaceCssClass('btn_hotkeymain', 'btn_hotkeystart', 'btn_hotkeystop');

    // start the widgets
    root.viewComposer.start();

    if (!looped) {
        root.hub.fire('skoovemodulestarted');
    }

    //this.videoPlayer.playVideoPrelude(150);
    this.videoPlayer.stop();
    
    this.videoPlayer.playNextVideoSequence(150);

    root.currentQueueElement = 0;

};

/**
 * tears down the Module
 */
KeyModePlusModule.prototype.teardown = function () {

    var root = this;

    window.skooveeventhub.removeListener("video.loaded", root._doneInit, root);

    window.skooveeventhub.removeAllListeners("slider.lastpositionfound");

    window.skooveeventhub.removeAllListeners("WaitModeVideoPlayer.videopaused");

    root.hub.fire('skoovemoduleteardown');

    if (root.viewComposer) {

        root.viewComposer.teardown();

    }

    root.tweets.teardown();

    root.tweets = null;

    root.hub = null;

};

KeyModePlusModule.prototype.restart = function () {

    this.start();

};

/**
 * handles the userinput currently just midi inputs where handled
 * @param midievent
 */
KeyModePlusModule.prototype.handleUserInput = function (event) {

    var root = this;

    // check if a keystroke event has been detected
    if (event.data.length >= 3) {

        // a keydown event has been detected
        if (event.data[2] > 0 && event.data[0] >= 144) {


                    // adds the user pitch to the analyzer
                    root.analyzer.addDetectedUserPitch({
                        'type': event.data[0],
                        'note': event.data[1],
                        'velocity': event.data[2]
                    });


        }

    }

};

/**
 * stops the module
 * cases: user changes the modulecontext
 */
KeyModePlusModule.prototype.stop = function () {

    // stop all widgets
    this.analyzer.reset();

    if (this.viewComposer) {

        this.viewComposer.stop();

    }
 
    // todo: put this into the composer
    this.noteScorePaginator.stop();

    // todo: put this into the composer
    document.getElementById('btn_hotkeymain').innerHTML = 'start';

    // todo: put this into the composer
    skoovedom.replaceCssClass('btn_hotkeymain', 'btn_hotkeystop', 'btn_hotkeystart');

    this.hub.fire('skoovemodulestopped');

};

/**
 * resets the module
 */
KeyModePlusModule.prototype.reset = function () {

    this.analyzer.reset();

    this.viewComposer.reset();

};


KeyModePlusModule.prototype._registerAnalyzierEventHandler = function () {

    var root = this;

    /**
     * user hits the right keys look for the next note and played with the right delay
     */
    root.analyzer.onPitchCompareSuccess = function (cbPlayedNoteDatas) {

        root.viewComposer.visualizeCorrectPitch(cbPlayedNoteDatas, 300);

        root.videoPlayer.playNextVideoSequence(0);

        root.viewComposer.gotoNextWayPoint();

    };

    /**
     * Event is fired when a pitch could be detected which has a timestamp
     * in the accepted range of 50%
     * @param userPitchData
     * @param beforeDelay
     */
    root.analyzer.onRightPitchBefore = function (userPitchData, beforeDelay) {

        root.viewComposer.visualizeCorrectPitch(userPitchData, 300);

        root.videoPlayer.playNextVideoSequence(beforeDelay);

        root.viewComposer.gotoNextWayPoint();

    };

    root.analyzer.rightStrokeFound = function (noteData) {

        root.viewComposer.markNoteAsRight(noteData);

    };

    root.analyzer.falseStrokeFound = function (noteData) {

        root.viewComposer.markNoteAsFalse(noteData.note);

    };

    /**
     * user hits the wrong key handling wrong pitches
     */
    root.analyzer.onPitchCompareFailed = function (expectedPitch, userPitch) {

        // visualize on keyboard
        root.viewComposer.visualizeFalsePitch(expectedPitch, userPitch);

    };

    /**
     * user hits the wrong key handling wrong pitches
     */
    root.analyzer.onSimpleAudioPitchCompareFailed = function (expectedPitch, userPitch) {

        root.viewComposer.visualizeFalseAudioPitch(expectedPitch);

    };

    /**
     * user hits the wrong key handling wrong pitches
     */
    root.analyzer.onMultiplePitchCompareFailed = function (expectedPitch, userPitch, failedPitches) {

        //mark the failed Pitches
        for (var i = 0; i < failedPitches.length; i++) {

            root.viewComposer.markNoteAsFalse(failedPitches[i].note);

        }

        for (var i = 0; i < expectedPitch.length; i++) {

            var theId = 'noteid_' + expectedPitch[i].noteViewData.noteViewId;

            if (document.getElementById(theId)) {

                document.getElementById(theId).style.fill = 'red';

                document.getElementById(theId).style.stroke = 'red';

            }
        }
    };

};

var KeyModePlusAccousticModule = function (config) {

    SKOOVE.Service.LogService({message:'KeyModePlusAccousticModule.constructor'});

    var root = this;

    this.type = 'keymodeplus';

    window.skoovedom.show('noteviewport');

    // read the config and set lokal variables
    this.config = config;

    // get the path to musicxml-file
    this.musicxmlpath = config.musicxmlpath;

    // ceckk if this step is the last interactive step
    this.isLastInteracvtiveStep = config.isLastInteractive;

    // get the path to the midi-file
    this.midipath = config.midipath;

    // parts which should be displayed in the noteview
    this.activeMeasures = config.noteviewparts;

    // set the bpm -> is used for computing
    // the midi pitchstack and the noteviewslider
    this.bpm = config.bpm;

    this.hand = config.hand;

    this.noteviewbpm = config.noteviewbpm;

    // number of staves that should be displayed in
    // notescore
    this.numbersOfStavesPerPage = config.numberOfStavesPerPage;

    this.pitchstack = [];

    this.lastkeyfound = false;

    this.analyzer = new SKOOVE.Analizer.AccousticAnalizer();

    this.fileLoader = new RemoteFileLoader();

    this.hub = window.skooveeventhub;

    this.tweets = new Communication(config.communication, root.hub);

    this.videoPlayer = null;

    this.viewComposer = null;

    this.noteScorePaginator = null;

    this.tweets.init();

    this.loopcounter = 0;

    this.loop = function () {

        root.loopcounter += 1;

        root.hub.fire('skoove.trainer', {

            'eventName': 'loop.ended',
            'eventData': {
                'stepType': "keymodeplus",
                'loopNumber': root.loopcounter

        }});

        root.videoPlayer.reset();

        root.hub.fire('skoovemoduleloop' + root.loopcounter);

        if (root.loopcounter === 1 && root.isLastInteracvtiveStep) {

            window.skooveeventhub.fire('keymodeplus.lessondone',
                {
                    lessonid: root.config.lessonid
                }
            );
        }

        root.start(true);

    };

    this.markTheForKeyse = function(wayPointIndex){

        var expectedPitch = root.expectedArray[wayPointIndex];

        for (var i = 0; i < expectedPitch.length; i++) {
            // visualize
            root.viewComposer.visualizePianoNoteOn(expectedPitch[i].midiNoteNumber);
        }

    };

    skooveeventhub.addEventListener('slider.lastpositionfound', root.loop ,root);

    skooveeventhub.addEventListener('WaitModeVideoPlayer.videopaused', root.markTheForKeyse, root);

    window.skoovedom.show('btn_hotkeymain');

};

/**
 * init the module
 * @param callback
 */
KeyModePlusAccousticModule.prototype.init = function (callback) {

    var root = this;

    var onError = function(errorMessage){

        // throw an error

    };

    var onMusicXMLLoaded = function(plainXMLData){

        var usedMeasuresConfig = {}; 

        if(root.activeMeasures){

            usedMeasuresConfig = {
                firstMeasure: root.activeMeasures.start,
                lastMeasure: root.activeMeasures.end
            };

        }

        var paginationConfig = {
            activemeasures: root.activeMeasures,
            numberOfStavesPerPage: root.numbersOfStavesPerPage,
            bpm: root.bpm,
            noteviewbpm: root.noteviewbpm,
            xmlStream: plainXMLData,
            hand: root.hand,
            notescorecontainerid : 'notecontainer',
            usedHands: root.hand,
            notescoreContainerId : 'notecontainer',
            usedHands: root.hand,
            usedMeasures : usedMeasuresConfig
        };

        var noteScoreDataSource = new NoteScoreDataSource(paginationConfig).init();

        root.expectedArray = noteScoreDataSource.getExpectedQueue();

        root.waypoints = noteScoreDataSource.getWayPoints();

        root.tickableQueue = noteScoreDataSource.getTickables();

        root.sequenceStack = noteScoreDataSource.getSequenceStack();

        root.runtime = noteScoreDataSource.getWholeRuntime();

        root.noteScorePaginator = new KeyModeNotescorePaginator(
            {'numberOfPages':noteScoreDataSource.numberOfPages,
             'pagingTimes': noteScoreDataSource.pagingTimes}
        );

        root.noteScorePaginator.createPages();

        root.videoPlayer = new SequenceVideoPlayer(root.sequenceStack);

        // init the analyzer
        root.analyzer.init(root.expectedArray);

        var viewConfig = {
            'startposition': root.config.startposition,
            'endposition': root.config.endposition,
            'offsetInSec': root.config.offsetInSec,
            'runtimeInSec': root.config.runtimeInSec,
            'keycaptions': root.config.keycaptions,
            'videopath': root.config.videopath,
            'bpm': root.config.bpm,
            'hand': root.config.hand,
            'tickableQueue': root.tickableQueue,
            'waypoints': root.waypoints,
            'runtime': root.runtime,
            'initialDelay':0
        };

        root.viewComposer = new KeyModePlusWidgetComposer(viewConfig);

        root._registerAnalyzierEventHandler();

        window.skooveeventhub.addEventListener("video.loaded", root._doneInit, root);

    };

    var onPitchStackloaded = function(){

        globalSkooveIdentifier = 0;

        symbolid = 0;

        if(root.musicxmlpath != null && root.musicxmlpath != ''){

           var xmlLoader = new XmlLoader().getDocument(root.musicxmlpath,
                    function(resp){
                        onMusicXMLLoaded(resp);
                    },
                    function(errorcode){
                        onError('while Loading')
                    }
           );    

        }
        else{
            onError('no musixxml');
        }
            
    };

    onPitchStackloaded();

};

KeyModePlusAccousticModule.prototype._doneInit = function () {

    var root = this;

    window.skoovedom.hide('overlaybackground');

    window.skoovedom.hide('loadingoverlay');

    window.setTimeout(
        function () {

            root.hub.fire('skoovemoduleinit');

        }, 500

    );

};

/**
 * start the module
 */
KeyModePlusAccousticModule.prototype.start = function (looped) {

    var root = this;

    if (!looped) {

        window.skooveeventhub.fire('keymodeplus.lessonstarted',
            {
                lessonid: root.config.lessonid
            }
        );

        looped = false;

    }

    // reset the analyzer
    root.analyzer.reset();

    document.getElementById('btn_hotkeymain').innerHTML = 'stop';

    skoovedom.replaceCssClass('btn_hotkeymain', 'btn_hotkeystart', 'btn_hotkeystop');

    // start the widgets
    root.viewComposer.start();

    if (!looped) {
        root.hub.fire('skoovemodulestarted');
    }

    //this.videoPlayer.playVideoPrelude(150);
    this.videoPlayer.stop();
    
    this.videoPlayer.playNextVideoSequence(150);

    root.currentQueueElement = 0;

};

/**
 * tears down the Module
 */
KeyModePlusAccousticModule.prototype.teardown = function () {

    var root = this;

    window.skooveeventhub.removeListener("video.loaded", root._doneInit, root);

    window.skooveeventhub.removeAllListeners("slider.lastpositionfound");

    window.skooveeventhub.removeAllListeners("WaitModeVideoPlayer.videopaused");

    root.hub.fire('skoovemoduleteardown');

    if (root.viewComposer) {

        root.viewComposer.teardown();

    }

    root.tweets.teardown();

    root.tweets = null;

    root.analyzer= null;

    root.hub = null;

};

KeyModePlusAccousticModule.prototype.restart = function () {

    this.start();

};

/**
 * handles the userinput currently just midi inputs where handled
 * @param midievent
 */
KeyModePlusAccousticModule.prototype.handleUserInput = function (event) {

    var root = this;

    // check if a keystroke event has been detected
    if (event.data.length >= 3) {

        // a keydown event has been detected
        if (event.data[2] > 0) {

                if( root.mode === 'microphone'){
                    // adds the user pitch to the analyzer
                    root.analyzer.addDetectedUserPitch({
                        'stream': event.data[3],
                        'type': event.data[0],
                        'note': event.data[1],
                        'velocity': event.data[2]
                    });
                }
                else if( root.mode === 'midi'){
                    // adds the user pitch to the analyzer
                    root.analyzer.addDetectedUserPitch({
                        'type': event.data[0],
                        'note': event.data[1],
                        'velocity': event.data[2]
                    });
                }


        }

    }

};

/**
 * stops the module
 * cases: user changes the modulecontext
 */
KeyModePlusAccousticModule.prototype.stop = function () {

    // stop all widgets
    this.analyzer.reset();

    if (this.viewComposer) {

        this.viewComposer.stop();

    }
 
    // todo: put this into the composer
    this.noteScorePaginator.stop();

    // todo: put this into the composer
    document.getElementById('btn_hotkeymain').innerHTML = 'start';

    // todo: put this into the composer
    skoovedom.replaceCssClass('btn_hotkeymain', 'btn_hotkeystop', 'btn_hotkeystart');

    this.hub.fire('skoovemodulestopped');

};

/**
 * resets the module
 */
KeyModePlusAccousticModule.prototype.reset = function () {

    this.analyzer.reset();

    this.viewComposer.reset();

};


KeyModePlusAccousticModule.prototype._registerAnalyzierEventHandler = function () {

    var root = this;

    /**
     * user hits the right keys look for the next note and played with the right delay
     */
    root.analyzer.onPitchCompareSuccess = function (cbPlayedNoteDatas) {

        console.log('gdhgdhsjgdshjgsd');

        console.log(cbPlayedNoteDatas);


        root.viewComposer.visualizeCorrectPitch(cbPlayedNoteDatas, 300);

        root.videoPlayer.playNextVideoSequence(0);

        root.viewComposer.gotoNextWayPoint();

    };

    /**
     * Event is fired when a pitch could be detected which has a timestamp
     * in the accepted range of 50%
     * @param userPitchData
     * @param beforeDelay
     */
    root.analyzer.onRightPitchBefore = function (userPitchData, beforeDelay) {

        root.viewComposer.visualizeCorrectPitch(userPitchData, 300);

        root.videoPlayer.playNextVideoSequence(beforeDelay);

        root.viewComposer.gotoNextWayPoint();

    };

    root.analyzer.rightStrokeFound = function (noteData) {

        root.viewComposer.markNoteAsRight(noteData);

    };

    root.analyzer.falseStrokeFound = function (noteData) {

        root.viewComposer.markNoteAsFalse(noteData.note);

    };

    /**
     * user hits the wrong key handling wrong pitches
     */
    root.analyzer.onPitchCompareFailed = function (expectedPitch, userPitch) {

        // visualize on keyboard
        root.viewComposer.visualizeFalsePitch(expectedPitch, userPitch);

    };

    /**
     * user hits the wrong key handling wrong pitches
     */
    root.analyzer.onSimpleAudioPitchCompareFailed = function (expectedPitch, userPitch) {

        console.log('onAudioPitchCompareFailed' + expectedPitch[0].midiNoteNumber);
        //root.viewComposer.markNoteAsFalse(expectedPitch[0].midiNoteNumber);
        root.viewComposer.visualizeFalseAudioPitch(expectedPitch);

    };

    /**
     * user hits the wrong key handling wrong pitches
     */
    root.analyzer.onMultiplePitchCompareFailed = function (expectedPitch, userPitch, failedPitches) {

        //mark the failed Pitches
        for (var i = 0; i < failedPitches.length; i++) {

            root.viewComposer.markNoteAsFalse(failedPitches[i].note);

        }

        for (var i = 0; i < expectedPitch.length; i++) {

            var theId = 'noteid_' + expectedPitch[i].noteViewData.noteViewId;

            if (document.getElementById(theId)) {

                document.getElementById(theId).style.fill = 'red';

                document.getElementById(theId).style.stroke = 'red';

            }
        }
    };

};

/**
 * Bundles and wraps all widgets used in KeyModePlus
 * Composed Objects:
 * - timeSlider
 * - piano
 * - videoplayer
 * @constructor
 */
var KeyModePlusWidgetComposer = function (config) {

    var root = this;

    root.config = config;

    root.keycaptions = config.keycaptions ? config.keycaptions : [];

    root.registeredWidgets = [];

    root._registerWidgets();

    this.videoplayer.mute();

    this.noteViewer.init();

    this.loop = function(){

        root.stop();

    };

};

/**
 * wraps the resuming-behaving of all used Widgets
 * usecase: the app has been paused-> now the app is restarted
 * all widgets have to visualize the Resume
 */
KeyModePlusWidgetComposer.prototype.start = function(){

    var root = this;

    root.piano.clearMarkers();

    root.noteViewer.clearMarkedNotes();

    root.noteViewSlider.start();


};

/**
 * stops all widgets
 */
KeyModePlusWidgetComposer.prototype.stop = function(){

    var root  = this;

    root.piano.clearMarkers();

    root.noteViewer.clearMarkedNotes();

    root.noteViewSlider.stop();


};

/**
 * wraps the pause-behaving of all used Widgets
 * usecase: the app has been paused
 * all widgets have to visualize the pause
 */
KeyModePlusWidgetComposer.prototype.pause = function(){

    this.videoplayer.pause();

};

/**
 * wraps the resuming-behaving of all used Widgets
 * usecase: the app has been paused -> now the app is restarted
 * all widgets have to visualize the Resume
 */
KeyModePlusWidgetComposer.prototype.continue = function(){

    this.videoplayer.continue();

};

/**
 * resets all widgets
 */
KeyModePlusWidgetComposer.prototype.resetWidgets = function () {

    this.piano.clearMarkers();

    this.noteViewer.clearMarkedNotes();

    this.videoplayer.restart();

};

/**
 * resets all widgets
 */
KeyModePlusWidgetComposer.prototype.reset = function () {

    this.piano.clearMarkers();

    this.noteViewer.clearMarkedNotes();

    this.videoplayer.reset();

};

KeyModePlusWidgetComposer.prototype.gotoNextWayPoint = function(){

    this.noteViewSlider.gotoNextWayPoint();

};

/**
 * visualizes a keyDown-Event from Queue-Input
 * @param note
 */
KeyModePlusWidgetComposer.prototype.visualizePianoNoteOn = function (note) {

    this.piano.visualizeKeyDown(note);

};

/**
 * clearing the marked keys on then virtualkeyboard
 */
KeyModePlusWidgetComposer.prototype.clearPianoMarker = function () {

    this.piano.clearMarkers();

};

/**
 * displays all correct pitches
 * @param notes
 * @param displaydelay
 */
KeyModePlusWidgetComposer.prototype.visualizeCorrectPitch = function(pitchdata){

    // uncomment because of direct calll in module
    // this.videoplayer.continue();

    // clear all markers on keyboard, that means unset midi-input marker
    this.piano.clearMarkers();

    for (var i = 0; i < pitchdata.length; i++) {

        var theId = 'noteid_' + pitchdata[i].noteViewData.noteViewId;

        if(document.getElementById(theId)){

            document.getElementById(theId).style.fill= '#7FB93B';

            document.getElementById(theId).style.stroke= '#7FB93B';

        }


            // mark bounded notes as right
            for(var k=0;k<pitchdata[i].boundedNotes.length;k++){
                var theId = 'noteid_' + pitchdata[i].boundedNotes[k];

                if(document.getElementById(theId)){

                    document.getElementById(theId).style.fill= '#7FB93B';

                    document.getElementById(theId).style.stroke= '#7FB93B';

                }

            }

        this.piano.visualizeCorrectKeyDownWithDelay(pitchdata[i].midiNoteNumber, 300);

    }

};

/**
 * displays all wrong pitches
 * @param notes
 * @param displaydelay
 */
KeyModePlusWidgetComposer.prototype.visualizeFalsePitch = function (expectedpitchdata, userpitchdata) {

    if(expectedpitchdata){

        for(var i = 0 ; i < expectedpitchdata.length; i++){

            var theNoteId = 'noteid_'  + expectedpitchdata[i].noteViewData.noteViewId ;

            if(document.getElementById(theNoteId)){

                document.getElementById(theNoteId).style.fill= 'red';

                document.getElementById(theNoteId).style.stroke= 'red';

            }
        }
    }

    for (var i = 0; i < userpitchdata.length; i++) {

        this.piano.visualizeFalseKeyDownWithDelay(userpitchdata[i].note);

    }
};

/**
 * displays all wrong pitches
 * @param notes
 * @param displaydelay
 */
KeyModePlusWidgetComposer.prototype.visualizeFalseAudioPitch = function (expectedpitchdata) {

    if(expectedpitchdata){

        for(var i = 0 ; i < expectedpitchdata.length; i++){

            var theNoteId = 'noteid_'  + expectedpitchdata[i].noteViewData.noteViewId ;

            this.piano.visualizeFalseKeyDownWithDelay(expectedpitchdata[i].midiNoteNumber);

            if(document.getElementById(theNoteId)){

                document.getElementById(theNoteId).style.fill= 'red';

                document.getElementById(theNoteId).style.stroke= 'red';

            }
        }
    }

};



KeyModePlusWidgetComposer.prototype.markNoteAsRight = function(pitchdata){

    // this.piano.clearMarkers();
    var theId = 'noteid_' + pitchdata.noteViewData.noteViewId;

    if(document.getElementById(theId)){

        document.getElementById(theId).style.fill= '#7FB93B';

        document.getElementById(theId).style.stroke= '#7FB93B';

    }

    this.piano.visualizeCorrectKeyDownWithDelay(pitchdata.midiNoteNumber, 300);

};

KeyModePlusWidgetComposer.prototype.markNoteAsFalse = function(notenumber){

    this.piano.visualizeFalseKeyDownWithDelay(notenumber,300)

};

KeyModePlusWidgetComposer.prototype.teardown = function(){


    for(var i = 0; i < this.registeredWidgets.length; i++){

        this.registeredWidgets[i].teardown();

        this.registeredWidgets[i] = null;

    }

    this.noteViewer.clearMarkedNotes();

    // unset all used widgets
    this.noteViewer.hide();

    this.noteViewSlider.hide();

    this.piano = null;

    this.videoplayer = null;

    this.noteViewSlider = null;

};


KeyModePlusWidgetComposer.prototype._registerWidgets = function(){

    var root = this;

    root.piano = PianoWidgetFactory(root.keycaptions);

    root.registeredWidgets.push(root.piano);

    root.videoplayer = VideoPlayerFactory(root.config);

    root.registeredWidgets.push(root.videoplayer);

    root.noteViewer = new NoteViewer({
            'hand': root.config.hand,
            'stepParts' : root.config.stepParts,
            'notePanelData' : root.config.notePanelData,
            'noteViewData': root.config.noteviewdata,
            'tickableQueue': root.config.tickableQueue
    });

    root.registeredWidgets.push(root.noteViewer);

    //this.hotkeysection = SKOOVE.Widgets.HotkeySectionWidget.init();

    //root.registeredWidgets.push(root.hotkeysection);

    root.noteViewSlider = new NoteViewWaypointSlider({
                    'elementId': 'noteviewslider',
                    'prelude': 0,
                    'waypoints': root.config.waypoints,
                    'runtime': root.config.runtime
            });

    NoteViewWaypointSliderFactory(root.config);

    root.registeredWidgets.push(root.noteViewSlider);

};
var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Trainer");

ns.TrainerMainController = function(){

    SKOOVE.Service.LogService('TrainerMainController start');

    // reference to the lessonData
    this.lessonModel = null;

    // reference to the userdata
    this.userModel = null;

    // reference to the current running module
    this.currentRunningModule = null;

    // refernece to the mainview
    this.view = null;

    // create the module factory
    this.moduleFactory = new SKOOVE.Module.ModuleFactory();

    // navigation via devices keyboard or audio
    this.deviceNavigationHandler = null; 

    // register eventhandlers for all events related 
    // to the navigation
    this._registerGlobalNavigationEventHandler();

    this._registerKeyBoardInputHandler();

    return this;

};


ns.TrainerMainController.prototype._registerKeyBoardInputHandler = function(){

    var root = this;

    // fired by KeyboardNavigator -> start stop on keyboard
    window.skooveeventhub.addEventListener('keyboardinput.down', function(data){

        root.view.visualizeKeyBoardInputDown(data[1]);

        if(SKOOVE.SOUNDOUTPUT.audioout){

            SKOOVE.SOUNDOUTPUT.audioout.noteOn(0,data[1],data[2]);

        }

    });

    // fired by KeyboardNavigator -> start stop on keyboard
    window.skooveeventhub.addEventListener('keyboardinput.up', function(data){

        root.view.visualizeKeyBoardInputUp(data[1]);

        if(SKOOVE.SOUNDOUTPUT.audioout){

            SKOOVE.SOUNDOUTPUT.audioout.noteOff(0,data[1],data[2]);

        }

    });

};

ns.TrainerMainController.prototype.init = function(){

    SKOOVE.Service.LogService({message:'TrainerMainController.init'});

    var root = this;

    // load the lesson and user data Data-set
    SKOOVE.Service.TrainerDataService.getTrainerData(theLessonId, function(response){

        if(response.status===1){

            // set the user-model
            root.userModel = response.userModel;

            console.log(root.userModel);

            // set the lesson-model
            root.lessonModel = response.lessonModel;
  
            // setup the hotkey depending on the mostleftkeyboard-key
            // @todo: prio 3 put the computation into the usermodel
            root.userModel.startHotKey = SKOOVE.Service.HotKeyComputingService(root.userModel.mostleftkey);

            root.userModel.nextHotKey = SKOOVE.Service.HotKeyComputingService(parseInt(root.userModel.startHotKey));

            if(root.userModel.output !=='speakers'){
                // get the audiooutput
                SKOOVE.SOUNDOUTPUT.audioout = SKOOVE.SOUNDOUTPUT.AudioOutputFactory();

                SKOOVE.SOUNDOUTPUT.audioout.init();

            }

            // setup the mainview
            // @todo: add an init-method to the view and call these method here
            root.view = new SKOOVE.View.TrainerMainView(root.lessonModel,root.userModel);

            // check the selected device and setup
            // the device by calling all init functions
            if(root.userModel.devicetype==='midi'){
                // setup midi device
               root._setupMidiDevice(root.userModel.devicename);

            }
            else if(root.userModel.devicetype==='accoustic'){
                // setup accousticDevice
                root._setupAccousticDevice();

            }
            else{

                root._setupWithoutDevice();

            }

        }
        else{

            // todo put this into the view
            // @todo add a addtional error template
           // root.view.renderErrorMessage('while Loading');

        }

    });

};

/**
 * loads a step by its id, triggered by a click on step-processor on the top
 * of the trainersite
 */
ns.TrainerMainController.prototype._loadStep = function(id){

    var root = this;

    var currentStepData = null;

    root.view.showLoadingPanel();

    // stop and teardown the current running module
    root._stopCurrentModule();

    if(id){

        // get the data for the lessonStep by accessing the lessonModel
        currentStepData = root.lessonModel.getLessonStepById(id);
        
    }
    else{

        currentStepData = root.lessonModel.getNextLessonStep();

        if(!currentStepData){

            if(root.lessonModel.nextLessonId){
                window.location = '/lesson/' + root.lessonModel.nextLessonId;
            }
            else{
                window.location = '/courses/';
            }

        }

    }

    root._trackStepVisited(currentStepData.templatetype, currentStepData.stepnumber);

    // create the module regarding to the stepdata
    root.currentRunningModule = root.moduleFactory.getModule(currentStepData, 
        root.lessonModel.getGlobalRuntime(),root.userModel.devicetype);

    // init the new Module (keymodeplus, playcards, playalong)
    root.currentRunningModule.init();

    //@todo add these flag into the module itself
    root.currentModuleState = 'moduleinit';

    root.view.update(currentStepData);

    // specialcase start intermediately
    if(root.currentRunningModule.type === 'playcards'){

        root.view.hideStartHotKey();

        root._changeModuleState();

    }
    else if(root.currentRunningModule.type === 'summary'){

        root.view.hideStartHotKey();

    }

    if(root.userModel.devicetype==='accoustic'){

        root.view.disablePianoHotKeys();

    }

    // check if there is an navgiation-functionality 
    // for the selected input device
    if(root.deviceNavigationHandler){

        root.deviceNavigationHandler.setup(root.currentRunningModule.type);
    
    }

};

/**
* adds event handler to the navigation related events
* 
*/
ns.TrainerMainController.prototype._registerGlobalNavigationEventHandler = function(){

    var root = this;

    // these event will be fired by a click on the processbar
    window.skooveeventhub.addEventListener('processMenuBarWidget.navigateToStep', function(data){

        SKOOVE.Service.LogService({message:'TrainerMainController._registerGlobalNavigationEventHandler navigateToStep', data: data});
        
        // data -> id
        root._loadStep(data);

    });

    window.skooveeventhub.addEventListener('hotkeyWidget.btnNextStepClicked', function(){

        SKOOVE.Service.LogService({message:'TrainerMainController._registerGlobalNavigationEventHandler hotkeyWidget.btnNextStepClicked'});
        
        root._loadStep();

    });

     // fired by KeyboardNavigator -> start stop on keyboard
    window.skooveeventhub.addEventListener('hotkeyWidget.btnMainClicked', function(){
        
        SKOOVE.Service.LogService({message:'TrainerMainController._registerGlobalNavigationEventHandler hotkeyWidget.btnMainClicked'});
        
        // change the state of the current module (start/ stop)
        root._changeModuleState();

    });

     // fired by KeyboardNavigator -> next button on Keyboard
    window.skooveeventhub.addEventListener('deviceinput.next', function(){

        // color transform
        //root.mainView.visualizeHotkeyNextClicked();

        //load the next step
        root._loadStep();

    });

    // fired by KeyboardNavigator -> start stop on keyboard
    window.skooveeventhub.addEventListener('deviceinput.statechange', function(){

        // color transform
        //root.mainView.visualizeHotkeyMainClicked();

        //change the state of the current module (start/ stop)
        root._changeModuleState();

    });

};

/**
* sets up the midi device
**/
ns.TrainerMainController.prototype._setupMidiDevice = function(devicename){

    SKOOVE.Service.LogService({message:'TrainerMainController._setupMidiDevice called'});

    var root = this;

    window.skooveeventhub.addEventListener("onMIDIDeviceDetected", function(device){

        SKOOVE.Service.LogService({message:'TrainerMainController._setupMidiDevice onMIDIDeviceDetected',data: device});
       
        window.skoovedom.hide('overlaydialog');

        root.inputSource = device;

        window.inputSource = device;

        window.inputSource.getType=function(){

            return 'midi';

        };

        root.deviceNavigationHandler = new SKOOVE.NAVIGATION.MidiKeyboardNavigation(device,
            root.userModel.startHotKey,
            root.userModel.nextHotKey);

        root.deviceNavigationHandler.setup();

        root._loadStep();

    });

    window.skooveeventhub.addEventListener("onMIDIDeviceSelected", function(device){

        SKOOVE.Service.LogService({message:'TrainerMainController._setupMidiDevice onMIDIDeviceSelected',data: device});

        window.skoovedom.hide('overlaydialog');

        root.inputSource = device;

        window.inputSource = device;

        window.inputSource.getType=function(){

            return 'midi';

        };

        root.deviceNavigationHandler =
            new SKOOVE.NAVIGATION.MidiKeyboardNavigation(device,root.userModel.startHotKey,root.userModel.nextHotKey);

        root.deviceNavigationHandler.setup();

        root._loadStep();

    });

    /**
     * MIDI- PLugin could not be detected
     */
    window.skooveeventhub.addEventListener("onMIDIPluginFailed", function(){

        SKOOVE.Service.LogService({message:'TrainerMainController._setupMidiDevice onMIDIPluginFailed'});

        window.skoovedom.replaceCssClass('connectionstate','connectionsuccess','connectionfailed');

        SKOOVE.Templating.DialogRenderer('overlaydialog', 'pluginfailedmessage_dialog');

    });

    /**
     * handling more than one devices
     */
    window.skooveeventhub.addEventListener("unknownMIDIDevicesDetected", function(devices){

        SKOOVE.Service.LogService({message:'TrainerMainController._setupMidiDevice unknownMIDIDevicesDetected',data: device});

        var templateData = {
            devices: devices,
            devicename: window.skoove.appsettings.devicename
        };

        SKOOVE.Templating.DialogRenderer('overlaydialog', 'unknownMIDIDevicesDetected_dialog', templateData);

    });

    /**
     * handling more than one devices
     */
    window.skooveeventhub.addEventListener("onMIDIDevicesDetected", function(){

        // run the device detection and "wait" for an hub-event
        root.midiDeviceService.selectByName(devicename);

    });


    /**
     * handling case devcie could not be connected
     */
    window.skooveeventhub.addEventListener("onMIDIDeviceDetectionFailed", function(){

        SKOOVE.Service.LogService({message:'TrainerMainController._setupMidiDevice onMIDIDeviceDetectionFailed'});

        window.skoovedom.replaceCssClass('connectionstate','connectionsuccess','connectionfailed');

        SKOOVE.Templating.DialogRenderer('overlaydialog', 'nodevicemessage_dialog');

    });

    root.midiDeviceService = new SKOOVE.Device.MidiDeviceService(this.browserDetectionService);

    // run the device detection and "wait" for an hub-event
    root.midiDeviceService.detectDevices();

};

ns.TrainerMainController.prototype._setupWithoutDevice = function(){

    var root = this;

    //@todo this should be added into the view
    root.view.displayDialog('dialog_usersetuprequired_new');

    document.getElementById('btn_start_without_keyboard').addEventListener('click',function(){

        
        document.getElementById('overlaydialog').style.display='none';

        document.getElementById('overlaybackground').style.display='none';

        root._loadStep();

        root.view.setupPianoNoKeyboard();

    });
};





/**
* sets up the audio device
**/
ns.TrainerMainController.prototype._setupAccousticDevice = function(){

    var root = this;

    SKOOVE.Service.LogService({message:'TrainerMainController._setupAccousticDevice'});

    //@todo put this into the view
    SKOOVE.Templating.DialogRenderer('overlaydialog', 'dialog_activateMicrophone');

    // run the device detection and "wait" for an hub-event
    window.skooveeventhub.addEventListener("MicrophoneDeviceService.onError", function(){

    });

    /**
     * handling case device could not be connected
     */
    window.skooveeventhub.addEventListener("MicrophoneDeviceService.deviceDetected", function(){

        //dialog close

        document.getElementById('overlaydialog').style.display='none';

        root._loadStep();

    });

    root.inputSource = new SKOOVE.Device.MicrophoneDeviceService(); 

    root.inputSource.detect();

    window.inputSource = root.inputSource;

};


/**
 * changing the module state -> start, stop, pause
 */
ns.TrainerMainController.prototype._changeModuleState = function(){

    SKOOVE.Service.LogService({message:'TrainerMainController._changeModuleState'});

    var root = this;
    // should be handle by the module itself
    // because the module knows about his internal
    // states -> for the moment we could do that stuff
    // here. If some Modules get different states in the
    // future we have to refactor this

    // if the module is initialized ...
    // next step is 'modulestarted'

    if(root.currentModuleState === 'moduleinit'){

        // hide the overlay which contains
        // data to describe the current lesson

        // set the new App-State -> now the module is started
        root.currentModuleState = 'modulestarted';

        if(root.inputSource){

            setTimeout(function(){

                    root.inputSource.onmidimessage = function(ev){

                        root.currentRunningModule.handleUserInput(ev);

                    };

                    root.inputSource.onPitch = function(ev){

                        root.currentRunningModule.handleUserInput(ev);

                    };

                    root.currentRunningModule.start();
                }

                , 100);

        }
        else{

            root.currentRunningModule.start();

        }

    }
    else if(root.currentModuleState === 'modulestarted'){

        // the app is running currently
        root.currentModuleState = 'modulestopped';

        if(root.inputSource){

            root.inputSource.onmidimessage = null;

        }

        root.currentRunningModule.stop();

        root.currentRunningModule.reset();

    }
    else if(root.currentModuleState === 'modulestopped'){

        // set the new App-State
        root.currentModuleState = 'modulestarted';

        // remove all devcie event-handler
        if(root.inputSource){

            // add new Event-Handler
            setTimeout(function(){

                    root.inputSource.onmidimessage = function(ev){

                        root.currentRunningModule.handleUserInput(ev);

                    };

                    root.currentRunningModule.start();

                }
                , 100);
        }
        else{

            root.currentRunningModule.start();

        }
    }
};

/**
 * stops the current running module
 * @private
 */
ns.TrainerMainController.prototype._stopCurrentModule = function(){

    SKOOVE.Service.LogService({message:'TrainerMainController._stopCurrentModule'});

    var root = this;

    // get the current running module
    if(root.currentRunningModule){

        // stop it
        root.currentRunningModule.stop();

        // tear it down
        root.currentRunningModule.teardown();

        // set it to null
        root.currentRunningModule = null;

    }

    if(root.inputSource){

        // remove all listeners registrated to the inputSource
        root.inputSource.onmidimessage = null;

    }

};

ns.TrainerMainController.prototype._trackStepVisited = function(stepType, stepNumber){

    window.skooveeventhub.fire('skoove.trainer', {
        eventName: 'step.visited',
        eventData: {
            'stepType': stepType,
            'stepNumber': stepNumber
        }
    });

};
var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Widgets");

ns.HotkeySectionWidget = (function(){

    var startPianoHotKey = null;
    var nextPianoHotKey = null;


    var init = function(starthotkey,nexthotkey){

        var root = this;

        startPianoHotKey = starthotkey;

        nextPianoHotKey = nexthotkey;

        root.btnnext = document.getElementById('btn_nextstep');

        root.btnmain = document.getElementById('btn_hotkeymain');

        // remove all eventlisteners
        // this method is called to make sure to have a clean
        // setup ... maybe there are some listerns registered
        // removeAllEventListener();

        // Loading the next Step: by Clicking on the Next-Button on HotkeySection
        root.btnnext.addEventListener("click", root.onBtnNextClick);

        // click on Start-Stop-Button
        root.btnmain.addEventListener("click", root.onBtnMainClick);

        draw(starthotkey,nexthotkey);

        return this;

    };

    var activateStartButton = function(){

        showMainButton();

        skoovedom.replaceCssClass('btn_hotkeymain', 'btn_hotkeystop', 'btn_hotkeystart');

        document.getElementById('btn_hotkeymain').innerHTML = 'start';

    };

    var activateStopButton = function(){

        showMainButton();

        skoovedom.replaceCssClass('btn_hotkeymain', 'btn_hotkeystart', 'btn_hotkeystop');

        document.getElementById('btn_hotkeymain').innerHTML = 'stop';

    };

    var teardown = function(){

       removeAllEventListener();

    };

    /**
    * removes all eventlisteners added to the widget-elements
    * called by teardown and the init-method
    **/
    var removeAllEventListener = function(){

        var root = this;

        document.getElementById('btn_hotkeymain').removeEventListener("click", root.onBtnNextClick);

        document.getElementById('btn_nextstep').removeEventListener("click", root.onBtnNextClick);

    };

    var hidePianoHotKeys = function(){

        var elem = document.getElementById(startPianoHotKey);

        if (elem) {
            elem.className = elem.className.replace('pianomainkey', "");
        }

        var elem = document.getElementById(nextPianoHotKey);

        if (elem) {
            elem.className = elem.className.replace('pianonavkey', "");
        }


    };


    var showMainButton = function(){

        document.getElementById('btn_hotkeymain').style.display='inline-block';

        var elem = document.getElementById(startPianoHotKey);

        elem.className += ' ' + 'pianomainkey';

    };

    /**
     * hide the main button
     * (in playcards mode the main-button should not be displayed)
     **/
    var hideMainButton = function(){

        document.getElementById('btn_hotkeymain').style.display='none';

        var elem = document.getElementById(startPianoHotKey);

        if (elem) {
            elem.className = elem.className.replace('pianomainkey', "");
        }

    };

    var setNoKeyboardPositions =function(){



    };


    var draw = function(starthotkeyInp,nexthotkeyInp){

        var nexthotkey = 34;
        var starthotkey = 32;

        if(starthotkeyInp){
            starthotkey = starthotkeyInp;
        }
        if(nexthotkeyInp){
            nexthotkey = nexthotkeyInp;
        }

        // get the element by noteId
        var element = document.getElementById(nexthotkey);

        // if the element could be found
        if (element) {
            element.className += ' ' + 'pianonavkey';
        }

         // get the element by noteId
        var element = document.getElementById(starthotkey);

        // if the element could be found
        if (element) {
            element.className += ' ' + 'pianomainkey';
        }

        // setup the hotkey for nextstep
        var offsets = document.getElementById(nexthotkey).getBoundingClientRect();
        var left = offsets.left;
        document.getElementById('btn_hotkeynextcontainer').style.left = left + 'px';

        var offsets = document.getElementById(starthotkey).getBoundingClientRect();
        var left = offsets.left - 50;
        document.getElementById('btn_hotkeymaincontainer').style.left = left + 'px';

    };

    var onBtnNextClick = function(){

        window.skooveeventhub.fire('hotkeyWidget.btnNextStepClicked');
    
    };

    var onBtnMainClick = function(){
    
        window.skooveeventhub.fire('hotkeyWidget.btnMainClicked');
    
    };

    return {

        init: init,
        onBtnNextClick: onBtnNextClick,
        onBtnMainClick: onBtnMainClick,
        activateStartButton: activateStartButton,
        activateStopButton: activateStopButton,
        hideMainButton: hideMainButton,
        hideStartHotKey: hideMainButton,
        showStartHotKey: showMainButton,
        disablePianoHotKeys: hidePianoHotKeys,
        teardown: teardown,
        setNoKeyboardPositions: setNoKeyboardPositions


    }

})();

/**
*
**/
var SequenceVideoPlayer = function(wayPoints){

    this.timerId = null;

    this.wayPoints = wayPoints;

    this.currentSequence = 0;

    this.video = document.getElementById('videolayer');

    return this;
    
};

/**
* request playing the next video-sequence
* if a sequence is currently running
* the video will stop at the new sequenceend
**/
SequenceVideoPlayer.prototype.playNextVideoSequence = function(additionalMilliseconds){

    var root = this;

    var isNotLastWayPoint = true;

    var sequenceRuntime = 0;

    // if there is a "sequence-runner" clear it
    if(root.timerId){
        window.clearTimeout(root.timerId);
    }

    if(root.wayPoints.length == root.currentSequence){
        isNotLastWayPoint = false;
        sequenceRuntime = root.wayPoints[root.currentSequence-1].timeToRun;
    }
    else{
        sequenceRuntime = root.wayPoints[root.currentSequence].timeToPrevNote;
     }

    // start playing the video
    root.video.play();

    sequenceRuntime = sequenceRuntime + additionalMilliseconds;

    // create a scoped variable to use it value-save in the timer
    // when using the object variable it will be overwritten every 
    // time the timer will be called
    var currentSequence = root.currentSequence;

    // run a timer: when the timer is ready 
    // the video will be stopped
    root.timerId = window.setTimeout(

        function(){

            if(isNotLastWayPoint){
                 window.skooveeventhub.fire('WaitModeVideoPlayer.videopaused', currentSequence);
            }
        
            root.video.pause()
    
        },
        sequenceRuntime
    
    );

    // set the index to the next sequence that has to be handeled
    root.currentSequence += 1;

};

/**
* starts the video and stops the video after a given time
* used for preluding the video in keymodePlus
*/
SequenceVideoPlayer.prototype.playVideoPrelude = function(preludeInMs){

    var root = this;

    root.video.play();

    root.timerId = window.setTimeout(

        function(){

            root.video.pause();
        
        },

        preludeInMs

    );

};

/**
* stops the videoplayer
**/
SequenceVideoPlayer.prototype.stop = function(){

    this.currentSequence = 0;

    this.video.pause();

    this.video.currentTime = 0;

};

SequenceVideoPlayer.prototype.reset = function(){

    this.stop();

};

/**
* pauses the video-Player
*/
SequenceVideoPlayer.prototype.pause = function(ms){

    this.video.pause();
    
};
function NoteViewSliderFactory(config){

    var noteViewSlider = new NoteViewSlider({
        'elementId': 'noteviewslider',
        'initialDelay': 100,
        'waypoints': config.waypoints,
        'wholeruntime': config.wholeruntime
    });

    return noteViewSlider;

};
function NoteViewWaypointSliderFactory (config){

    var noteViewSlider =  new NoteViewWaypointSlider({
        'elementId': 'noteviewslider',
        'prelude': 0,
       	'waypoints': config.waypoints
    });

    return noteViewSlider;

};

function NoteViewerFactory (config){

    /*
     hand -> hand which should be displayed (r,l,b)
     stepParts -> all NoteViewParts which should be displayed in current step
     notePanelData -> Data which are used to display and render the
     */

    var noteViewer =  new NoteViewer({
        'hand': config.hand,
        'stepParts' : config.stepParts,
        'notePanelData' : config.notePanelData,
        'noteViewData': config.noteviewdata
    });

    return noteViewer;

};

function ScoreOverviewSliderFactory(config){

    var noteViewSlider = new NoteViewSlider({
        'elementId': 'noteviewslider',
        'startposition': 0,
        'noteviewdata': config.noteviewdata,
        'wholeruntime': config.wholeruntime
    });

    return noteViewSlider;

};
/**
 * returns a template that will be closed by an system-event or a delay
 * @param internalId
 * @returns {string}
 */
PopOver = function(){

    return '<div class="popover skoovecontextpopover" role="tooltip"><div class="arrow"></div>' +
        '<div class="popover-content"></div><div class="popovercontrols"></div></div>';

};


/**
 * returns a template that will be closed by an system-event or a delay
 * @param internalId
 * @returns {string}
 */
SkipablePicturePopOver = function(popoverid,picturefile,headline){


    return '<div class="popover skoovebigpopover" role="tooltip"><div class="arrow"></div>' +
        '<div class="popover-headline">' + headline + '</div><div class="popover-image"><img style="max-width:600px;" src="' + backendpath + picturefile + '"></div><div class="popover-content"></div>' +
        '<div class="popovercontrols">' +
        '<a id="btn_' + popoverid + '"  title="Close" class="btn_skv btn_skv_medium btn_skv_active">Ok</a>' +
        '</div>' +
        '</div>';

};

/**
 * returns a template that will be closed by a delay
 * @param internalId
 * @returns {string}
 */
PicturePopOver = function(popoverid,picturefile,headline){


    return '<div class="popover skoovebigpopover" role="tooltip"><div class="arrow"></div>' +
        '<div class="popover-headline">' + headline + '</div><div class="popover-image"><img style="max-width:600px;" src="' + backendpath + picturefile + '"></div><div class="popover-content"></div>' +
        '<div class="popovercontrols">' +
        '</div>' +
        '</div>';

};

/**
 * returns a template that will be closed by an system-event or a delay
 * @param internalId
 * @returns {string}
 */
SkipablePopOver = function(popoverid,headline){

    return '<div class="popover skoovecontextpopover" role="tooltip"><div class="arrow"></div>' +
        '<div class="popover-content"></div>' +
        '<div class="popovercontrols">' +
        '<a id="btn_' + popoverid + '"  title="Close" class="btn_skv btn_skv_medium btn_skv_active">Ok</a>' +
        '</div>' +
        '</div>';

};

/**
 * returns a closable Popover
 * @param internalId
 * @returns {string}
 */
SkipablePopOver = function(popoverid){

    return '<div class="popover skoovecontextpopover" role="tooltip"><div class="arrow"></div>' +
        '<div class="popover-content"></div><div class="popovercontrols">' +
        '<a id="btn_' + popoverid + '"  title="Close" class="btn_skv btn_skv_medium btn_skv_active">Ok</a>' +
        '</div></div>';

};

/**
 * ScoreOverviewSlider implements the functions for
 * displaying the Slider on top of the Notes
 * @param config
 * @constructor
 */
 function ScoreOverviewSlider(config){

    // set the wohleruntime used by pageoverview slider
    this.runtime = config.runtime;

    this.initialDelay = config.initialDelay;

    this.element = document.getElementById(config.elementId);

    this.element.style.left = '0px';


};

/**
 * teardown the ScoreOverviewSlider
 */
ScoreOverviewSlider.prototype.teardown = function(){

    this._stopAnimations();

};

/**
 * starts the silder
 */
ScoreOverviewSlider.prototype.start = function(){

    var root = this;

    // first of all, all running
    // animation will be stopped
    this._stopAnimations();

    // then start the queue
    // processing by calling
    // the run-Method
    window.setTimeout(
        function(){
            root._run();
        }
        ,root.initialDelay);

};

/**
 * stops the slider animation
 */
ScoreOverviewSlider.prototype.stop = function(){

    this._stopAnimations();

};

/**
 * resets the slider while stopping the app,
 * stops the slider and sets the slider to its startposition
 */
ScoreOverviewSlider.prototype.reset = function(){

    this.stop();

    this.start();

};

/**
 * resets the slider while stopping the app,
 * stops the slider and sets the slider to its startposition
 */
ScoreOverviewSlider.prototype.restart = function(){

    this.start();

};

/**
 * running the Slider-Animation 
 */
ScoreOverviewSlider.prototype._run = function(){

    TweenMax.to(this.element, 0, { width: '0' });

    TweenMax.to(this.element, this.runtime / 1000, { width: '100%', ease: Linear.easeNone });

    
};

/**
 * stops and clears the animation-queue and sets the
 * slider to the startposition
 * @private
 */
ScoreOverviewSlider.prototype._stopAnimations = function(){

    // set the pageoverview slider to its start position
    TweenMax.to(this.element, 0, { width: '0' }); 

};

/**
 * NoteViewSlider implements the functions for
 * displaying the Slider on top of the Notes
 * @param config
 * @constructor
 */
 function NoteViewSlider(config){

    SKOOVE.Service.LogService('NoteViewSlider constructor');

    // the container-element of the slider
    this.domId = config.elementId;

    // set the wohleruntime used by pageoverview slider
    this.wholeruntime = config.runtime;

    // the queue that contains parsed controller-data
    // like the position of a note and its runtime
    this.waypoints = config.waypoints;

    // time to wait before the slider start running
    this.initialDelay = config.initialDelay;

    // get the domElements
    this.element = document.getElementById(this.domId);

    this.element.style.left = '0px';


    // the startposition of the sliderelement
    // the position depends on configuration
    // of the underlying lessonstep
    // this.startposition = config.startposition;
    // first of all we have to check if there are
    // data for slider
    if(!this.waypoints || this.waypoints.length == 0){

        this.startposition = 0;

        this.numberofwaypoints = 0;

    }
    else{

        this.startposition = this.waypoints[0].xPos - 15;

        this.numberofwaypoints = this.waypoints.length;

    }

    this.timeline = new TimelineLite();

    this._generateTimeLine();

};

/**
 * teardown the NoteViewSlider
 */
NoteViewSlider.prototype.teardown = function(){

    var root = this;

    root.timeline.stop();
    
    root.timeline = null;

};

/**
 * hide the Slider
 */
NoteViewSlider.prototype.hide = function(){

    skoovedom.hide(this.domId);

};

/**
 * display the Slider
 */
NoteViewSlider.prototype.show = function(){

    skoovedom.show(this.domId);

};

/**
 * starts the silder
 */
NoteViewSlider.prototype.start = function(){
    
    var root = this;

    // first of all, all running
    // animation will be stopped
    this._stopAnimations();

    // then start the queue
    // processing by calling
    // the run-Method
    window.setTimeout(
        function(){
            root._run();
        }
        ,root.initialDelay);


    //this.element.style.background = 'none repeat scroll 0 0 red';
    this.element.style.background = 'none repeat scroll 0 0 rgba(127, 185, 59, 0.7)';


};

/**
 * stops the slider animation
 */
NoteViewSlider.prototype.stop = function(){

    /*this.element.style.background = 'none repeat scroll 0 0 rgba(0, 0, 0, 0.2)';*/

    this._stopAnimations();

};

/**
 * resets the slider while stopping the app,
 * stops the slider and sets the slider to its startposition
 */
NoteViewSlider.prototype.reset = function(){

    this.stop();

    this.start();

};

/**
 * resets the slider while stopping the app,
 * stops the slider and sets the slider to its startposition
 */
NoteViewSlider.prototype.restart = function(){

    this.start();

};

/**
 * running the Slider-Animation 
 */
NoteViewSlider.prototype._run = function(){

    this.timeline.restart();
    
};

/**
* creates the timeline for slider-movement
**/
NoteViewSlider.prototype._generateTimeLine = function(){

    var root = this;

    var length = root.numberofwaypoints;

    var minRuntime = 1000000;

    for(var i = 0; i < root.waypoints.length; i++){

        if(root.waypoints[i].timeToRun < minRuntime){

            minRuntime = root.waypoints[i].timeToRun;

        }

    }

    // @todo: add this into the datascore
    root.waypoints[length-1].lastNoteOnScore = true;

    // create the animation-queue by running over all waypoints
    for(i = 0; i < length; i++){

        // position where the slider has to move
        var xPosToMove = root.waypoints[i].xEndPos-10;

        // time how long the animation has to run
        var timetoRun = root.waypoints[i].timeToRun;

        if(i != 0 && root.waypoints[i].isFirstNoteOnPage === true){
            // move the slider to first-note 
            // we have to use the animateion-Function
            // because element.style.left = 0 don't work here
            // to fix this we add the positionchange into
            // the animation-queue
          
            root.timeline.to(root.element,0,{left: 0, ease: Power0.easeNone });
           
        }
        if(root.waypoints[i].lastNoteOnScore){
            // lastnote try to use
            root.timeline.to(root.element,timetoRun/1000,{left: xPosToMove, ease: Power0.easeNone, onComplete:
                    function(){
                        window.skooveeventhub.fire('slider.lastpositionfound');
                    }
             });
        }
        else{
            root.timeline.to(root.element,timetoRun/1000,{left: xPosToMove, ease: Power0.easeNone });
       
        }

    }

    // call stop method -> so the tween don't starts to run
    // intermediatly
    root.timeline.stop();

};

/**
 * stops and clears the animation-queue and sets the
 * slider to the startposition
 * @private
 */
NoteViewSlider.prototype._stopAnimations = function(){

    var root = this;

    // stop the current running timeline
    root.timeline.stop();

    // set the element to its startposition
    // this.element.style.transform = "translateX(0)";
    // this.element.style.left = this.startposition  + 'px';

};

/**
 * this Widget represents the noteslider
 * handles the positioning of the Slider by
 * computing and animating the psoition
 * of an HTML-Element based on rendering data
 * @param config
 * @constructor
 */
var NoteViewWaypointSlider = function(config){

    SKOOVE.Service.LogService('NoteViewWaypointSlider constructor');

    // the container-element of the slider
    this.domId = config.elementId;

    this.domElement = document.getElementById('noteviewslider');

    // the queue that contains parsed controller-data
    // like the position of a note and its runtime
    this.animationData = config.waypoints;

    // wholeruntime of the song
    this.wholeruntime = config.runtime;

    this.width = 0;

    // the startposition of the sliderelement
    // depends on configuration
    // of the underlying lessonstep

    // first of all we have to check if there are data for slider
    if(!this.animationData || this.animationData.length == 0){
        this.startposition = 0;
        this.numberofwaypoints = 0;
    }
    else{
        this.startposition = this.animationData[0].xPos;
        this.numberofwaypoints = this.animationData.length;
    }

    // get the prelude in ms, prelude is the time
    // the app is waiting before running a step
    // if there is no prelude in configuration-object
    // set it to 0 ms
    this.prelude = config.prelude ? config.prelude : 0;

    // holds a reference to the timer, which
    // is used to perform waiting on start
    this.preludeInterval = null;

    // get the domElement by its id
    this.element = skoovedom.getElementById(this.domId);

    // set initial startPoint
    this.element.style.left = this.startposition - 5 + 'px';

    // set the currentwaypoint
    this.currentWayPoint = -1;

    this.show();

};

/**
 * starts the noteview-silder
 */
NoteViewWaypointSlider.prototype.start = function(){

    var root = this;
    var runTime = 0;
    var endPos = 0;

    // first of all, all running
    // animation will be stopped
    this._clearAnimationQueue();

    root.width = 0;

    document.getElementById('pageoverviewslider').style='0%';

    document.getElementById('noteviewslider').style.background = 'none repeat scroll 0 0 rgba(127, 185, 59, 0.7)';

    root.currentWayPoint = 0;

    // check if the firstnotes are rest notes
    while(root.animationData[root.currentWayPoint].noteType === 'r'){

        runTime += root.animationData[root.currentWayPoint].timeToRun;

        endPos = root.animationData[root.currentWayPoint].xEndPos-10;

        root.currentWayPoint += 1;

    }

    if(runTime>0){
        
        jQuery('#noteviewslider').animate({
            left:  endPos + 'px'
        }, runTime, 'linear');

    }
    else{
        jQuery('#noteviewslider').animate({
                 left:  this.startposition + 'px'
             }, 500, 'linear');

    }

};

/**
 * moves the noteview slider to the next waypoint in the
 * stack
 */
NoteViewWaypointSlider.prototype.gotoNextWayPoint = function(){

     console.log('next waypoint');

    var root = this;

    // get the current waypoint
    var pointer = root.currentWayPoint;

    if(pointer==-1){
        // startposition

    }
    else if(root.animationData.length > 0 && root.animationData[pointer] != null){

         var runtime = root.animationData[pointer].timeToRun;

         var xPos = root.animationData[pointer].xEndPos - 10;

         // if the last note on Page is found
         if(root.animationData[pointer].isLastNoteOnPage && !root.animationData[pointer].isLastNoteOnScore){

             // fire event for paginator
             window.skooveeventhub.fire('slider.watchingPositionReached');

             // move the slider to its endposition
             jQuery('#noteviewslider').animate({
                 left:  xPos + 'px'
             }, runtime, 'linear');


             root.width += (100/root.wholeruntime) * root.animationData[pointer].timeToRun;

             jQuery('#pageoverviewslider').animate(
                 { width: root.width + '%' },
                 { duration: runtime}
             );


             // ????
             if( pointer < root.animationData.length-1){
                 jQuery('#noteviewslider').animate({
                     left:  '0px'
                 }, 0, 'linear');

                 var xPos = root.animationData[pointer+1].xPos - 10;

                 jQuery('#noteviewslider').animate({
                     left:  xPos + 'px'
                 }, 0, 'linear');


             }



         }
        else if(root.animationData[pointer].isLastNoteOnPage && root.animationData[pointer].isLastNoteOnScore){

             // fire event for paginator
             window.skooveeventhub.fire('slider.watchingPositionReached');

             jQuery('#noteviewslider').animate(
                 { left: xPos },
                 { duration: runtime,
                     easing: "linear",
                     complete: function() {

                         window.skooveeventhub.fire('slider.lastpositionfound');

                     }

                 }

             );


            jQuery('#pageoverviewslider').animate(
                { width: '100%' },
                { duration: runtime}
            );

        }


         else{

             jQuery('#noteviewslider').animate({
                 left:  xPos + 'px'
             }, runtime, 'linear');


             root.width += (100/root.wholeruntime) * root.animationData[pointer].timeToRun;

             jQuery('#pageoverviewslider').animate(
                 { width: root.width + '%' },
                 { duration: runtime}
             );

         }

    }

    // increase the waypointIndex
    root.currentWayPoint += 1;

};

/**
 * stops the slider-animation
 */
NoteViewWaypointSlider.prototype.stop = function(){

    this.width = 0;

    this._clearAnimationQueue();

    this.element.style.left = this.startposition +'px';

    document.getElementById('noteviewslider').style.background = 'none repeat scroll 0 0 rgba(0, 0, 0, 0.2)';

    document.getElementById('pageoverviewslider').style='0%';


    // reset the currentwapoit to the startposition
    // of the dataqueue
    this.currentWayPoint = 0;
};


/**
 * resets the slider while stopping the app,
 * stops the slider and sets the slider to its startposition
 */
NoteViewWaypointSlider.prototype.reset = function(){

    this.stop();

};

/**
 * resets the slider while stopping the app,
 * stops the slider and sets the slider to its startposition
 */
NoteViewWaypointSlider.prototype.restart = function(){

    this.start();

};

/**
 * stops and clears the animation-queue and sets the
 * slider to the startposition
 * @private
 */
NoteViewWaypointSlider.prototype._clearAnimationQueue = function(){

    // clear the prelude-Timeout
    clearTimeout(this.preludeInterval);


    // calling the jQuery->clearQueue()-Method
    // every animation wich has been added to
    // the queue will be removed from queue
    jQuery('#noteviewslider').clearQueue();

    jQuery('#pageoverviewslider').clearQueue();

    // stop the current-running queued task
    jQuery('#noteviewslider').stop();

    jQuery('#pageoverviewslider').stop();

    // set the slider to its startposition
    // the startposition depends on lessonstep-configuration
    // the configuration has been injected via a
    // configuration-Object in the constructor of these class
    this.element.style.left = this.startposition  + 'px';

    document.getElementById('pageoverviewslider').style.width ='0px'; 

};

NoteViewWaypointSlider.prototype.hide = function(){

    skoovedom.hide(this.domId);

};

NoteViewWaypointSlider.prototype.show = function(){

    skoovedom.show(this.domId);

};

NoteViewWaypointSlider.prototype.teardown = function(){

    //console.log('teardown NoteViewWaypointSlider');

};

function VideoPlayerFactory(config) {

    var videoPlayer = new VideoPlayer(
        {
            'elementId': 'videolayer',
            'prelude': config.offsetInSec * 1000,
            'videopath': config.videopath
        }
    );

    return videoPlayer;

};


var VideoPlayer = function (config) {

    var root = this;

    this.video = document.getElementById(config.elementId);

    // set the videofilepath
    this.srcvideopath = config.videopath;

    // set the offset
    this.offset = config.initialDelay;

    this.video.muted = true;

    this.loadVideoFile();
    
    this.enable();

};

/**
 * start the video
 */
VideoPlayer.prototype.start = function () {

    var root = this;

    root.video.currentTime = 0; 

    root.video.play();

};

VideoPlayer.prototype.restart = function () {

    this.video.pause();

    this.start();

};

VideoPlayer.prototype.mute = function () {

    this.video.muted = true;

};

VideoPlayer.prototype.unmute = function () {

    this.video.muted = false;

};

VideoPlayer.prototype.pause = function () {

    this.video.pause();

};

VideoPlayer.prototype.stop = function () {

    this.video.pause();
    
};

VideoPlayer.prototype.reset = function () {
    
    this.video.pause();
    
    this.video.currentTime = 0;
    
};

// load video
VideoPlayer.prototype.loadVideoFile = function () {

    var root = this;
    
    // try to connect to server
    jQuery.ajax({
        type: "Get",
        url: "/ping",
        success: function () {

            var sources = root.video.getElementsByTagName('source');

            if (navigator.userAgent.indexOf("Safari") != -1) {
                sources[0].type = "video/mp4";
                sources[0].src =  root.srcvideopath.replace(".webm", ".mp4");
            }
            else if (navigator.userAgent.indexOf("Trident") != -1) {
                sources[0].type = "video/mp4";
                sources[0].src =  root.srcvideopath.replace(".webm", ".mp4");
            }
            else if (navigator.userAgent.indexOf("MSIE") != -1) {
                sources[0].type = "video/webm";
                sources[0].src =  root.srcvideopath.replace(".webm", ".mp4");
            }
            else {
                sources[0].type = "video/webm";
                sources[0].src =  root.srcvideopath;
            }

            root.video.load();
            
            root.video.pause();
            
            root.video.addEventListener('canplaythrough',root._handleVideoLoaded(root), false);

            root.video.addEventListener('error', root._handleVideoLoadingError, true);

        },
        error: function () {

            jQuery('#overlaydialog').show();
            
            window.skooveeventhub.fire('connectionlost');

        }
    });

};

VideoPlayer.prototype._handleVideoLoaded = function (me) {

    me.video.removeEventListener('canplaythrough',me._handleVideoLoaded);

    window.skooveeventhub.fire('video.loaded');

};

VideoPlayer.prototype._removeVideoLoadedHandler = function () {

    var root = this;

    root.video.removeEventListener('canplaythrough',root._handleVideoLoaded);

};

VideoPlayer.prototype._handleVideoLoadingError = function () {

    window.skooveeventhub.fire('video.loadingerror');

};

/**
 * enables the videoplay this is the default state
 * (hide the transparent overlay)
 */
VideoPlayer.prototype.enable = function () {

    var elem = skoovedom.getElementById('videohider');

    elem.style.display = 'none';

};

/**
 * hides the videoplayer with a overlay
 */
VideoPlayer.prototype.disable = function () {

    var elem = skoovedom.getElementById('videohider');

    elem.style.display = 'block';

};

/**
 * clears all EventHandler and timeouts after
 * while tearing down the Player
 * so the handlers are not available in futher
 * steps and modes
 * called
 */
VideoPlayer.prototype.clearHandler = function () {

};

VideoPlayer.prototype.teardown = function () {

};
/**
 * AudioPlayer 
 *
 * Loads and plays media files across browsers and platforms
 * Uses SoundJS as its backend https://github.com/CreateJS/SoundJS
 * 
 * @param {array} sounds
 * @param {string} assetPath
 * @param {function} callback
 * @returns {AudioPlayer}
 */
var AudioPlayer = function(sounds, assetPath, callback) {
    this.sounds = sounds;
    this.assetPath = assetPath || './';
    this.onload = callback || function(){};
};

/**
 * Initializes the player
 * 
 * @returns {void}
 */
AudioPlayer.prototype.init = function() {
    if ( ! createjs.Sound.initializeDefaultPlugins()) {
        // failed to load
    }
    createjs.Sound.alternateExtensions = ["ogg"];
    createjs.Sound.addEventListener("fileload", createjs.proxy(this.onload, this));
    createjs.Sound.registerSounds(this.sounds, this.assetPath);
};

/**
 * Plays a sound using the ID assigned on load
 * 
 * @param {mixed} id
 * @param {function} onComplete
 * @param {function} onFail
 * @returns {void}
 */
AudioPlayer.prototype.playSound = function(id, onComplete, onFail) {
    var instance = createjs.Sound.play(id);
    if (instance == null || instance.playState == createjs.Sound.PLAY_FAILED) {
        if (onFail) {
            onFail();
        }
        return;
    }
    if (onComplete) {
        instance.addEventListener("complete", onComplete);
    }
};

var PrecounterMetronome = function(config){

    this.domId = config.domId;

    this.displayElement = document.getElementById(this.domId);

    this.notesToPlay = config.notesToPlay || 4;

    this.tempo = config.bpm || 60.0;          // tempo (in beats per minute)

    this.millisecondsPerBeat = (60 / this.tempo) * 1000;

    this.downcounter = this.notesToPlay - 1;

    this.audioPlayer = new AudioPlayer(
        [{src: "ClickDown.mp3", id: 1}],
        '../media/',
        function(){}
    );

    this.currentNote = 0;        // What note is currently last scheduled?

    this.intervalID = '';
};

PrecounterMetronome.prototype.init = function() {

    this.audioPlayer.init();

    this.displayElement.innerHTML = this.downcounter;
};

PrecounterMetronome.prototype.start = function(){

    var root = this;

    this.currentNote = 0;

    this.intervalID = setInterval(
        function() {
            root.scheduleNote();
            root.nextNote();
        },
        this.millisecondsPerBeat
    );
};

PrecounterMetronome.prototype.stop = function(){

    this.downcounter = this.notesToPlay - 1;

    this.displayElement.innerHTML = '';

    clearInterval(this.intervalID);
};

PrecounterMetronome.prototype.scheduleNote = function() {

    if (this.downcounter > 0) {

        this.displayElement.innerHTML = this.downcounter;

        this.downcounter--;    

        this.playSound();

    }
};

PrecounterMetronome.prototype.playSound = function() {

    this.audioPlayer.playSound(1);
    
};

PrecounterMetronome.prototype.nextNote = function() {

    this.currentNote++;    // Advance the beat number, wrap to zero

    if (this.currentNote == this.notesToPlay) {

        clearInterval(this.intervalID);

        this.displayElement.innerHTML = '';

        this.onPrecountDone();

        this.downcounter = this.notesToPlay-1;

        this.currentNote = 0;
    }
};

PrecounterMetronome.prototype.onPrecountDone = function() {};

PrecounterMetronome.prototype.teardown = function() {};

/**
 *
 * @param config
 * @constructor
 */
var KeyModeNotescorePaginator = function(config){

    var root = this;

    this.numberOfPages = config.numberOfPages;

    this.pagingTimes = config.pagingTimes;

    this.notescorewidth = document.getElementById('notecontainer').offsetWidth;
    
    root.sliderElement = document.getElementById('pageviewslider');

    root.pageoverviewslider = document.getElementById('pageoverview');

    window.skooveeventhub.removeAllListeners('pager.paginganimationdone');

    window.skooveeventhub.removeAllListeners('slider.watchingPositionReached');
    
    window.skooveeventhub.removeAllListeners('notepager.paginganimationdone');

    this.pages = [];

    this.currentPageIndex = 0;

    this.paginate = function(){

        window.skooveeventhub.removeListener('slider.watchingPositionReached', root.paginate);

        var currentPageIndex = root.currentPageIndex;

        var nextPageIndex = currentPageIndex + 1;

        if(nextPageIndex == root.pages.length){

            nextPageIndex = 0;

        }

        var currentPageId = root.pages[root.currentPageIndex];
        
        var nextPageId = root.pages[nextPageIndex];

        var time = root.pagingTimes[root.currentPageIndex].runTimePerMeasure*2;
    
        root.changePage(currentPageId, nextPageId, time);

        root.currentPageIndex = nextPageIndex;

    };

    window.skooveeventhub.addEventListener('pager.paginganimationdone',function(){
  
        var positionToWatch = [];

        window.skooveeventhub.fire('notepager.paginganimationdone',positionToWatch);

        // readd the event listener
        window.skooveeventhub.addEventListener('slider.watchingPositionReached',root.paginate);

    });

};

/*
 start build the pages
 */
KeyModeNotescorePaginator.prototype.createPages = function(){

    var root = this;

    // activate the paginationprocess only if if there
    // are more than one pages
    // listen on the event "slider.pagingpositionreached" 
    // which will be fired by the slider inside the animationloop

    for(var i=0; i < root.numberOfPages; i++){

        // init a note page container and draw
        var noteScorePage = new NotescorePage(i).init();

        root.pages.push(noteScorePage.pageId);

    }

    root.currentPageId = root.pages[0];

    if(root.numberOfPages > 1){

        window.skooveeventhub.addEventListener('slider.watchingPositionReached',root.paginate);

        root.notescoreSlider = new NotescorePaginatorSlider().display();

    }
    else{

        new NotescorePaginatorSlider().hide();

    }


};

KeyModeNotescorePaginator.prototype.stop = function(){

    var root = this;

    if(root.pageAnimation){

        TweenMax.to(root.pageAnimation, 0, { width: '0%'});
    
    }

    TweenMax.to(root.sliderElement, 0, { left: '-80px' }); 

    // reset the currentpage index
    root.currentPageIndex = 0;

    var length = root.pages.length;

    for(var i=0; i < length; i++){

        // @todo: put this into a method in page-object -> resetstyle
        var pageDiv = document.getElementById(this.pages[i]);

        pageDiv.style.width = '0px';
        pageDiv.style.zIndex = 300;

        var svg = pageDiv.getElementsByTagName("svg");

        svg[0].style.float = 'left';
        svg[0].style.width = '100%';
        svg[0].style.zIndex = 300;
        svg[0].style.height = '240px';

    }

    document.getElementById(this.pages[0]).style.width = '100%';

    document.getElementById(this.pages[0]).style.zIndex = 300;

     if(root.numberOfPages > 1){

        window.skooveeventhub.addEventListener('slider.watchingPositionReached',root.paginate);
          
    }

};

KeyModeNotescorePaginator.prototype.changePage = function(pageToHideId, pageToShowId, animationRuntime){

    var root = this;

    var pageToHide = document.getElementById(pageToHideId);

    root.pageAnimation = document.getElementById(pageToShowId);

    TweenMax.to(root.pageAnimation, animationRuntime/1000, { width: this.notescorewidth, onComplete:
            function(){
                window.skooveeventhub.fire('pager.paginganimationdone');

                pageToHide.style.zIndex =  parseInt(pageToHide.style.zIndex) + 1;

                pageToHide.style.width = '0px';
            
            }
        }
    );

    TweenMax.to(root.sliderElement, animationRuntime/1000, { left: root.notescorewidth,
            onComplete: function(){

                root.sliderElement.style.left = '-80px';
            
            }
     
    });

};

/**
* NoteScorePaginator for PlayAloneMode
**/
var PlayAlongNotescorePaginator = function(config){

    var root = this;

    // read the config
    this.elementId = 'pageviewslider';

    this.numberOfPages = config.numberOfPages;

    this.pagingTimes = config.pagingTimes;

    // init internal vars
    this.currentPageIndex = 0;

    this.pages = [];

    this.animations =  [];

    // create the Animationstack
    this.timeline = new TimelineLite();

    // sheduling of all Pagination Animations
    this.sheduleAnimations = function(){

        console.log('shedule animations');

        var sumTimer = - root.pagingTimes[0].runTimePerMeasure;

        for(var i=0; i < root.numberOfPages; i++){

            var animationStartTime = root.pagingTimes[i].runTimePerPage;
             + (root.pagingTimes[i].runTimePerMeasure*(i+1));

            sumTimer = sumTimer + animationStartTime;

            var timerId = setTimeout(
                  root.paginate,

                  sumTimer,sumTimer);

            root.animations.push(timerId);

        }

     };

    this.paginate = function(sumtimer){

        // todo use the page object
        var currentPageIndex = root.currentPageIndex;

        var nextPageIndex = currentPageIndex + 1;

        if(nextPageIndex == root.pages.length){

            nextPageIndex = 0;

        }

        var animationRunTime = root.pagingTimes[currentPageIndex].runTimePerMeasure * 3;

        var currentPageId = root.pages[root.currentPageIndex];

        var nextPageId = root.pages[nextPageIndex];
  
        root._animatePageChange(currentPageId, nextPageId, animationRunTime);

        root.currentPageIndex = nextPageIndex;

    };

    return this;

};


PlayAlongNotescorePaginator.prototype.init = function(){

    var root = this;

    for(var i = 0; i < root.numberOfPages; i++){

        // init a note page container and draw
        var noteScorePage = new NotescorePage(i).init();

        root.pages.push(noteScorePage.pageId);

    }

    root.currentPageId = root.pages[0];

    if(root.numberOfPages > 1){

        root.notescoreSlider = new NotescorePaginatorSlider().display();

    }
    else{

        new NotescorePaginatorSlider().hide();

    }

};

/**
* start the Paginator
**/
PlayAlongNotescorePaginator.prototype.start = function(){

    var root = this;

    if(root.numberOfPages > 1){

        root.sheduleAnimations();

    }

    root.timeline.restart();

};

PlayAlongNotescorePaginator.prototype.stop = function(){

    var root = this;

    for(var i = 0; i < root.animations.length;i++){

        clearTimeout(root.animations[i]);

    }

    if(root.notescoreSlider){
         root.notescoreSlider.stop();
     }


    root._stopPagingAnimation();

};

/**
 * starts the change of the page
 * @param pageToHideId
 * @param pageToShowId
 * @param time
 * @private
 */
PlayAlongNotescorePaginator.prototype._startPagingAnimation = function(pageToHideId, pageToShowId, animationRuntime){

    var root = this;

    var pageToHide = document.getElementById(pageToHideId);

    root.pageAnimation = document.getElementById(pageToShowId);

   /* TweenMax.to(root.pageAnimation, animationRuntime/1000, { width: '100%', onComplete:
            function(){
                pageToHide.style.zIndex =  parseInt(pageToHide.style.zIndex) + 1;
                pageToHide.style.width = '0px';
            }
        }
    );*/

};

/**
 * animate the page change
 * @param pageToHideId
 * @param pageToShowId
 * @param time
 * @private
 */
PlayAlongNotescorePaginator.prototype._animatePageChange = function(pageToHideId, pageToShowId, animationRunTime){

    var root = this;

    var endPosition = '100%';

    root.notescoreSlider.animate(animationRunTime,endPosition);

    root._startPagingAnimation(pageToHideId, pageToShowId,animationRunTime);

};


/**
* stops a running animation:
* and reset the notscore to the first page by reordering
* the notescore-divs
**/
PlayAlongNotescorePaginator.prototype._stopPagingAnimation = function(){

    var root = this;

    // stop the animation if it runs
    if(root.pageAnimation){
        TweenMax.to(root.pageAnimation, 0, { width: '0%'});
    }
   
    // reset the currentpage index
    root.currentPageIndex = 0;

    var length = this.pages.length;

    for(var i=0; i < length; i++){

        // @todo: put this into a method in page-object -> resetstyle
        var pageDiv = document.getElementById(this.pages[i]);

        pageDiv.style.width = '0px';
        pageDiv.style.zIndex = 300;

        var svg = pageDiv.getElementsByTagName("svg");

        svg[0].style.float = 'left';
        svg[0].style.width = '100%';
        svg[0].style.zIndex = 300;
        svg[0].style.height = '240px';

    }

    document.getElementById(this.pages[0]).style.width = '100%';

    document.getElementById(this.pages[0]).style.zIndex = 300;

};
/**
 * represents a page of notescore
 * @param index
 * @returns {NotescorePage}
 * @constructor
 */
var NotescorePage = function(index){

    this.pageIndex = index;

    this.pageId = 'notecontainer_page' + index;

    return this;
};

/**
* set up the Notescorepage
* adding css-classes and add some style information
**/
NotescorePage.prototype.init = function(){

    var root = this;

    var pageDiv = document.getElementById(this.pageId);

    pageDiv.style.position='absolute';

    pageDiv.setAttribute('class','pageanimation');

    pageDiv.style.zIndex = '300';

    pageDiv.style.background = 'rgb(255,255,255)';
    
   /* if(this.pageIndex===0){
        pageDiv.style.background = 'rgb(255,255,0)';
    }
    else if(this.pageIndex===1){
        pageDiv.style.background = 'rgb(255,0,255)';
    }
    else if(this.pageIndex===2){
        pageDiv.style.background = 'rgb(0,255,255)';
    }
    else if(this.pageIndex===3){
        pageDiv.style.background = 'rgb(100,100,100)';
    }
     else if(this.pageIndex===4){
        pageDiv.style.background = 'rgb(120,240,255)';
    }
    else if(this.pageIndex===3){
        pageDiv.style.background = 'rgb(240,100,100)';
    }*/


    pageDiv.style.translateZ = 0;

    pageDiv.style.height = '210px';

    pageDiv.style.width = '100%';

    pageDiv.style.top ='20px';

    var svg = pageDiv.getElementsByTagName("svg");

    // http://stackoverflow.com/questions/15474306/nesting-an-svg-inside-a-div
    // set the properties so ... svg is rendered inside the div
    svg[0].style.float = 'left';
    svg[0].style.width = '100%';
    svg[0].style.zIndex = 300;
    svg[0].style.height = '240px';

    // hide all pages with a page index greater than 0
    // only the first page has to be visible
    if(root.pageIndex > 0){

        pageDiv.style.width='0';

    }

    return this;

};

NotescorePage.prototype.resetStyle = function(){

    pageDiv.style.width = '0px';
        pageDiv.style.zIndex = 300;

        var svg = pageDiv.getElementsByTagName("svg");

        svg[0].style.float = 'left';
        svg[0].style.width = '100%';
        svg[0].style.zIndex = 300;
        svg[0].style.height = '240px';

};

NotescorePage.prototype.getDomElement = function(){

    return document.getElementById(this.pageId);

};

var NotescorePaginatorSlider = function(){

    this.elementId = 'pageviewslider';

    this.domElement = document.getElementById(this.elementId);

    return this;

};

/**
 * displays the slider if used
 * @returns {NotescorePaginatorSlider}
 */
NotescorePaginatorSlider.prototype.display = function(){

    this.domElement.style.display = 'block';

    this.domElement.style.left = '10px';

    return this;
};

/**
 * hides the slider if there is nothing to page
 * @returns {NotescorePaginatorSlider}
 */
NotescorePaginatorSlider.prototype.hide = function(){

    this.domElement.style.display = 'none';

    return this;

};

/**
 * stops the Slider
 */
NotescorePaginatorSlider.prototype.stop = function(){

    var root = this;

    root._stopanimation();

    root._setToStartPosition();

};

/**
 * stops the animation
 * @private
 */
NotescorePaginatorSlider.prototype._stopanimation = function(){

    var root = this;

    TweenMax.to(root.domElement, 0, { left: '0px' });

};

/**
 * resets the slider to its startposition
 * @private
 */
NotescorePaginatorSlider.prototype._setToStartPosition = function(){

    var root = this;

    root.domElement.style.left = '10px';

    // this.domElement.style.transform = "translateX(0)";

};


/**
 * animate the slider
 */
NotescorePaginatorSlider.prototype.animate = function(runtime,endposition){

    var endposition = 1200;

    var root = this;

    TweenMax.to(root.domElement, runtime/1000, {left: endposition ,
            onComplete: function(){

                root._setToStartPosition();

            }
     });

};
function PianoWidgetFactory(keycaptions) {

    var piano = new HTMLPiano(
        {
            'domId': 'piano',
            'activekeycss': 'active',
            'keycaptions': keycaptions
        }
    );

    return piano;

};


/**
 * Representaion of a Piano in HTML and CSS
 * Handles all Visual Actions via HTML and CSS-
 * manipulation (adding and removing classes)
 * if a key-Down-Visualization is triggered
 * the element and his parent a additional
 * isactiveCss-class will be assigned to these
 * elements
 * Configuration :
 * var pianoConfig = {
        'domId': 'piano',
        'activekeycss' : 'active',
        'leftnote': 21,
        'rightnote': 89
    }
 * Dependencies: DOM
 * @param config
 * @constructor
 */
var HTMLPiano = function (config) {

    // read the config
    this.htmlElementId = config.domId ? config.domId : "piano";

    this.isActiveCss = config.activekeycss ? config.activekeycss : "active";

    this.keycaptions = config.keycaptions ? config.keycaptions : [];

    // delay how many ms the keydownevent is displayed on virtual keyboard
    this.keydownDelay = config.keydownDelay ? config.keydownDelay : 500;

    // set used css-classes
    this.correctCss = "correctuserstroke";

    this.falseCss = "falseuserstroke";

    this.markerCss = "makerstroke";

    this.clearMarkers();

    this.clearKeyCaptions();

    this.setKeyCaptions();

};


/**
 * add keycaptions
 */
HTMLPiano.prototype.setKeyCaptions = function () {

    var pianoSection = document.getElementById('pianosection');

    // setup the keycaptions
    for (var i = 0; i < this.keycaptions.length; i++) {

        var keyId = this.keycaptions[i].keynumber;

        var pianoKey = document.getElementById(keyId);

        if (pianoKey) {

            var bounds = pianoKey.getBoundingClientRect();

            var label = document.createElement('label');

            label.innerHTML = this.keycaptions[i].caption;

            var leftX = bounds.left;

            if(pianoKey.className==="black-key"){

                label.setAttribute('class', 'pianonotecaption on_black');
                label.style.left = (leftX - 10) +'px';
                
            }
            else{

                label.setAttribute('class', 'pianonotecaption on_white');
                label.style.left = (leftX + 5) +'px';
                
            }

             document.getElementById('pianosection').appendChild(label);

        }

    }

};


/**
 * visualizes false Keydown with delay
 * note: Number of the Note
 * @param note
 */
HTMLPiano.prototype.visualizeFalseKeyDownWithDelay = function (note) {

    var key = document.getElementById(note);

    var root = this;

    if (key) {
        var parent = key.parentNode;
        // add the additionalclass
        key.className += ' ' + root.falseCss;
        parent.className += ' ' + root.isActiveCss;
    }
    setTimeout(function () {

        root.removeCss(note, root.falseCss);

    }, root.keydownDelay);
};

/**
 * visualizes correct Keydown with delay
 * note: Number of the Note
 * @param note
 */
HTMLPiano.prototype.visualizeCorrectKeyDownWithDelay = function (note, delay) {

    var key = document.getElementById(note);

    var self = this;

    if (key) {
        var parent = key.parentNode;
        key.className += ' ' + this.correctCss;
        parent.className += ' ' + this.isActiveCss;
    }
    setTimeout(function () {
        self.removeCss(note, self.correctCss);
    }, delay);

};

/**
 * visualizes Key down
 * note: Number of the Note
 * @param note
 */
HTMLPiano.prototype.visualizeFalseKeyDown = function (note) {

    var key = document.getElementById(note);
    var root = this;
    if (key) {
        var parent = key.parentNode;
        // add the additionalclass
        key.className += ' ' + root.falseCss;
        parent.className += ' ' + root.isActiveCss;
    }
};

/**
 * visualizes Key down
 * note: Number of the Note
 * @param note
 */
HTMLPiano.prototype.visualizeCorrectKeyDown = function (note) {
    var key = document.getElementById(note);
    if (key) {
        var parent = key.parentNode;
        // add the additionalclass
        key.className += ' ' + this.correctCss;
        parent.className += ' ' + this.isActiveCss;
    }
};

/**
 * visualizes Key down
 * note: Number of the Note
 * @param note
 */
HTMLPiano.prototype.visualizeKeyDown = function (note) {

    var key = document.getElementById(note);
    if (key) {
        var parent = key.parentNode;
        key.className += ' ' + this.markerCss;
        parent.className += ' ' + this.isActiveCss;
    }
};

/**
 * visualizes Key down
 * note: Number of the Note
 * @param note
 */
HTMLPiano.prototype.visualizeKeyUp = function (note) {
    var self = this;
    self.removeCss(note, self.markerCss);
    self.removeCss(note, 'falseuserstroke');
};

/**
 * visualizes a
 * note: Number of the Note
 * @param note
 */
HTMLPiano.prototype.visualizeSystemNoteOn = function (note) {

    var key = document.getElementById(note);
    if (key) {
        var parent = key.parentNode;
        key.className += ' ' + this.markerCss;
        parent.className += ' ' + this.isActiveCss;
    }
};

/**
 * visualizes Key down
 * note: Number of the Note
 * @param note
 */
HTMLPiano.prototype.visualizeSystemNoteOff = function (note) {
    var self = this;
    self.removeCss(note, self.markerCss);
    self.removeCss(note, 'falseuserstroke');
};


/**
 * visualizes Users Key Up
 * note: Number of the Note
 * @param note
 */
HTMLPiano.prototype.visualizeUsersKeyUp = function (note) {
    this.removeCss(note, this.correctCss);
    this.removeCss(note, this.falseCss);
};


/**
 * visualizes the Users Key-Up Event
 * @param note
 */
HTMLPiano.prototype.showUserKeyUp = function (note) {
    var self = this;
    self.removeCss(note, 'correctuserstroke');
    self.removeCss(note, 'falseuserstroke');
};

/**
 * clears all marked Keys on Keyboard
 */
HTMLPiano.prototype.clear = function () {
    //TODO: checkusage
    var root = this;
    var piano = document.getElementById(root.htmlElementId);
    var items = piano.getElementsByTagName('span');
    for (var i = 0; i < items.length; i++) {
        var liElem = items[i];
        var parent = liElem.parentNode;
        liElem.className = liElem.className.replace(root.markerCss, "");
        liElem.className = liElem.className.replace(root.correctCss, "");
        liElem.className = liElem.className.replace(root.falseCss, "");
        parent.className = parent.className.replace(root.isActiveCss, "");
        while (liElem.hasChildNodes()) {
            liElem.removeChild(liElem.firstChild);
        }
    }
};

/**
 * clears all marked Keys on Keyboard
 */
HTMLPiano.prototype.clearMarkers = function () {

    var piano = document.getElementById(this.htmlElementId);
    var items = piano.getElementsByTagName('span');
    for (var i = 0; i < items.length; i++) {
        var liElem = items[i];
        liElem.className = liElem.className.replace(this.markerCss, "");
    }

    var piano = document.getElementById('pianoblackkeys');
    var items = piano.getElementsByTagName('span');
    for (var i = 0; i < items.length; i++) {
        var liElem = items[i];
        liElem.className = liElem.className.replace(this.markerCss, "");

    }

};

HTMLPiano.prototype.clearKeyCaptions = function () {

    jQuery(".pianonotecaption").remove();

    var items = piano.getElementsByClassName('pianonotecaption');

    for (var i = 0; i < items.length; i++) {
        var liElem = items[i];
        liElem.innerHTML = '';
        liElem.className = liElem.className.replace("pianonotecaption", "");
    }

    var piano2 = document.getElementById('pianoblackkeys');

    var items = piano2.getElementsByClassName('pianonotecaption');

    for (var i = 0; i < items.length; i++) {
        var liElem = items[i];
        liElem.innerHTML = '';
        liElem.className = liElem.className.replace("pianonotecaption", "");
    }

};

/**
 * removing css-classes for different cases
 *
 * @param note
 * @param css
 */
HTMLPiano.prototype.removeCss = function (note, css) {
    // get the element by noteId
    var key = document.getElementById(note);
    // if the elemnet could be found
    if (key) {
        var parent = key.parentNode;
        key.className = key.className.replace(css, "");
        parent.className = parent.className.replace(this.isActiveCss, "");
    }
};

/**
 * sets up the visible keys on Keyboard
 * @param mostLeftKey
 * @param mostRightKey
 */
HTMLPiano.prototype.setUpVisibleKeys = function (mostLeftKey, mostRightKey) {

    this.hideLeftKeys(mostLeftKey);

    this.hideRightKeys(mostRightKey);

};

/**
 * disables the keyboard
 * called if the user don't have a valid setup or in some
 * cases like stop
 */
HTMLPiano.prototype.disableKeyboard = function () {

    document.getElementById('keyboardhider_left').style.width = '100%';
    document.getElementById('keyboardhider_left').style.height = '750%';

};


/**
 * hides the unused leftkeys
 * called via setup-process
 * @param mostLeftKey
 */
HTMLPiano.prototype.hideLeftKeys = function (mostLeftKey) {

    if (document.getElementById(mostLeftKey)) {

        var offsets = document.getElementById(mostLeftKey).getBoundingClientRect();
        var oo = document.getElementById('keyboardhider_left').getBoundingClientRect();
        var ooleft = oo.left;
        var computed = offsets.left - ooleft;
        document.getElementById('keyboardhider_left').style.width = computed + 'px';

    }

};

/**
 * hides the unused rightkeys
 * called via setup-process
 * @param mostRightKey
 */
HTMLPiano.prototype.hideRightKeys = function (mostRightKey) {

    // rest right panel

    if (document.getElementById(mostRightKey)) {

        document.getElementById('keyboardhider_right').style.width = '0px';
        document.getElementById('keyboardhider_right').style.left = '0px';
        var offsets = document.getElementById(mostRightKey).getBoundingClientRect();
        var width = document.getElementById(mostRightKey).offsetWidth;

        var oo = document.getElementById('keyboardhider_right').getBoundingClientRect();
        var ooleft = oo.left;
        var width = ooleft - offsets.left - width;
        document.getElementById('keyboardhider_right').style.width = width + 'px';
    }
};

/**
 * hides the unused rightkeys
 * called via setup-process
 * @param mostRightKey
 */
HTMLPiano.prototype.unHideKeys = function () {

    // rest right panel
    document.getElementById('keyboardhider_right').style.width = '0px';
    document.getElementById('keyboardhider_right').style.left = '0px';
    document.getElementById('keyboardhider_left').style.width = '0px';
    document.getElementById('keyboardhider_left').style.left = '0px';
};

/**
 * tears down the Piano
 */
HTMLPiano.prototype.teardown = function () {
};
var NoteViewer = function(config){

    this.domId = 'noteviewsection';

    this.noteviewsection = document.getElementById(this.domId);

    this.noteviewsection.style.display = 'block';

    this.domElement = document.getElementById('noteviewhidingoverlay');

    this.playedHand = config.hand ? config.hand : "b";

    this.stepParts = config.stepParts;

    this.notePanelData = config.notePanelData;

    this.tickableQueue = config.tickableQueue;

};

NoteViewer.prototype.init = function (){

    if(this.playedHand === 'r'){

        this._showRightHand();

    }
    else if(this.playedHand === 'l'){

        this._showLeftHand();

    }
    else{

        this._showBothHands();

    }

    this._clearHidingPanels();

    this._setUpHidingPanels();

};


NoteViewer.prototype.teardown = function(){

    document.getElementById('noteviewhidingoverlay').style.display = 'none';

    document.getElementById('parthider').style.display = 'none';

    this._clearHidingPanels();

};

/**
 * resets the color of all marked notes in noteview
 * called by widgetcomposer while looping and while
 * tearing down
 */
NoteViewer.prototype.clearMarkedNotes = function(){

    var loops = this.tickableQueue.length;

    for(var i = 0; i < loops; i++){

        var tickables = this.tickableQueue[i];

        var tickableLength = tickables.length;

        for(var j = 0; j < tickableLength; j++){
            //TODO refactor: demarking all voices
            for(var k = 1; k < 4; k++){

                var theNoteId = 'noteid_'  + tickables[j].noteid  + '_' + k;

                if(document.getElementById(theNoteId)){

                    var svgNote = document.getElementById(theNoteId);

                    svgNote.style.fill = '#000';

                    svgNote.style.stroke = '#000';

                }
            }
        }
    }
};


/**
 * clears all Hiding-Panels
 * called when the View will be teared down
 * and when the View will be initialized
 * @private
 */
NoteViewer.prototype._clearHidingPanels = function(){

   // get all hiding panels via internalClassName
   var elements = document.getElementsByClassName('notehidingpanel');

   for(var i=0; i<elements.length;i++){

       var element = elements[i];

       var parentNode = element.parentNode;

       parentNode.removeChild(element);

   }

};


NoteViewer.prototype.show = function(){

};

NoteViewer.prototype.hide = function(){

    skoovedom.clear('notecontainer');

    document.getElementById('noteviewhidingoverlay').style.display='none';

};



/**
 * show notes for right hand
 * @private
 */
NoteViewer.prototype._showRightHand = function(){

    this.domElement.style.display = 'block';

    this.domElement.style.top = '240px';

};

/**
 * show note for the left hand
 * @private
 */
NoteViewer.prototype._showLeftHand = function(){

    this.domElement.style.display = 'block';

    this.domElement.style.top = '150px';

};

/**
 * display notes for both Hands
 * @private
 */
NoteViewer.prototype._showBothHands = function(){

    this.domElement.style.display = 'none';

};

NoteViewer.prototype._setUpHidingPanels = function(){

};


NoteViewer.prototype._setUpHidingPanels_old = function(){

    var root = this;

    // the root.stepParts contains the Parts which shoulkd be
    // visible in the Note View all other part should be hided
    // Object { start=1, end=4}
    var indexOfStartPart = root.stepParts.start - 1;

    var indexOfEndPart = root.stepParts.end-1;

    // get the rendered Part-Positions
    // data-Structure: [Object { start=15, end=225}, Object { start=225, end=480}, Object { start=480, end=666}, 5 mehr...]
    // these datastructure contains the x-Coords of each rendered Part
    var renderedPartPositions = root.notePanelData.partPositions;

    // set the default values
    var xStartPos = 0;

    var xEndPos = 0;

    // hide all parts which are before the lessonParts

    if(indexOfStartPart>0){

        // there are parts rendered in front of the parts
        // which should be visible
        // so we need to hide all these rendered parts
        xStartPos = renderedPartPositions[0].start;

        xEndPos = renderedPartPositions[indexOfStartPart].start;

        this._createHidingPanel(xStartPos,xEndPos);

    }

    var xStartPos = 0;

    var xEndPos = 0;

    // hide all parts which are behind the lessonParts
    if(indexOfEndPart>0){
        // there are parts rendered in front of the parts
        // which should be visible
        // so we need to hide all these rendered parts
        var lastIndex = renderedPartPositions.length-1;

        if(indexOfEndPart==lastIndex)
        {
            xStartPos = renderedPartPositions[indexOfEndPart].end;
            xEndPos = renderedPartPositions[indexOfEndPart].end;
        }
        else
        {
            xStartPos = renderedPartPositions[indexOfEndPart].end;
            xEndPos = renderedPartPositions[lastIndex].end;
        }
        this._createHidingPanel(xStartPos,xEndPos);
    }

};

/**
creates the hidingelement by inserting a div and added to the noteviewsection
with and z-dinx greater tahn the noteviewsection
*/
NoteViewer.prototype._createHidingPanel = function(xPosStart,xPosEnd){

  var offsetTop  = this.noteviewsection.offsetLeft + 50;

  var width = xPosEnd - xPosStart + 1;

  // @todo this could be stored into the skoove dom wrapper
  var hidingPanel = document.createElement('div');

  hidingPanel.style.left = parent.offsetLeft + xPosStart + 'px';

  hidingPanel.style.width = width + 'px';

  hidingPanel.style.height = '200px';

  hidingPanel.style.top = offsetTop-10 + 'px';

  hidingPanel.style.backgroundColor = 'rgba(255,255,255,0.8)';

  hidingPanel.style.display = 'block';

  hidingPanel.style.zIndex = 2000;

  hidingPanel.style.position = 'absolute';

  hidingPanel.className = 'notehidingpanel';

  parent.appendChild(hidingPanel);

};
var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Widgets");

ns.ProcessMenuBar = function(elementId, steps){

    this.domElement = document.getElementById(elementId);

    this.activatedClassName = 'activated';

    this.doneClassName = 'done activated';

    this._init(steps);

};

/**
 * change the active content on the Headermenu
 * @param stepId
 */
ns.ProcessMenuBar.prototype.activeStepById = function(stepId){

    this.deactivateAllSteps();

    var currentStep = document.getElementById('step_' + stepId);

    currentStep.className = this.doneClassName;

};

ns.ProcessMenuBar.prototype.deactivateAllSteps = function(){

    var items = this.domElement.getElementsByTagName('li');

    for(var i=0; i < items.length; i++){

        var currentElement = items[i];

        currentElement.className = currentElement.className.replace(this.activatedClassName, "");

    }

};

/**
 * sets up the processBarMenu
 * this method iterates over all lessonsteps and appends
 * li Elements to ul-container which holds the menubar
 * each li Element gets some Attributes to handle klicks
 * on each of them
 * @param lessonsteps
 * @private
 */
ns.ProcessMenuBar.prototype._init = function(steps){

    var root = this;

    // get the number of lessonsteps and
    var numberOfSteps = steps.length ;

    // compute percentage of each list-Element
    // every li-element should have the same
    // procentual size
    var percentageValue = 100 / numberOfSteps;

    // get the percentage string
    var percentageString = percentageValue + '%';

    // iterate over each lessonstep-Entity
    for(var i = 0; i < numberOfSteps; i++){

        // create a element
        var element = this._createElement(steps[i].id, percentageString);

        // add a event listener
        element.addEventListener("click", function(){

            var stepId = this.getAttribute('data-stepid');

            root.onEntryClick(stepId);

        });

        // append the generated Element to the container
        this.domElement.appendChild(element);

    }

    // after the initialisation the first Element should
    // be marked as active
    // ... get the first Element by searching the li-element
    // with the id of the first lessonstep
    var currentStep = document.getElementById('step_' + steps[0].id);

    // assign the class
    currentStep.className = this.activatedClassName;

};

ns.ProcessMenuBar.prototype._createElement = function(elementId, width){

    // ... and create a dom Element
    var listElement = document.createElement('li');

    // add a id by fetching the lesson-step-id
    listElement.setAttribute('id','step_' + elementId);

    // TODO: chekc the usage of these Atrribute
    listElement.setAttribute('data-stepid', elementId);

    // assign the size in percentage
    listElement.style.width = width;

    // return the value
    return listElement;

};

// Eventhanlder
/**
 * the eventListener overwrite this to handle a click
 *
 * @param stepId
 */
ns.ProcessMenuBar.prototype.onEntryClick = function(stepId){

    window.skooveeventhub.fire('processMenuBarWidget.navigateToStep',stepId);

};

/**
 * Wraps the access to the Elements of the Datastructure
 * acts like a repository
 *
 * @constructor
 */
var LessonModel = function(){

    SKOOVE.Service.LogService({message:'LessonModel.constructor'});

    this.rawdata = null;

    this.globalRuntime = null;

    this.numberOfSteps = null;

    this.lessonid = null;

    this.courseid = null;

    this.nextLessonId = null;

    this.currentStepNumber = 0;

    return this;
};

/**
 * init the datastructure
 * @param data
 */
LessonModel.prototype.init = function(data){

    SKOOVE.Service.LogService({message:'LessonModel.init', data:data});

    this.rawdata = data;

    this.numberOfSteps = data.lessonsteps.length;

    this.lessonSteps = data.lessonsteps;

    this.lessonid = data.lessonid;

    this.nextLessonId = data.nextlessonid;

    this.courseid = data.courseid;

    this.currentStepNumber = 1;

};

/**
 * returns the raw Dataset in Json
 * @returns {null|*}
 */
LessonModel.prototype.getRawData = function(){

    return this.rawdata;

};

/**
 * returns a List of all Parts
 */
LessonModel.prototype.getParts = function(){

    return this.rawdata.parts;

};

/**
 * returns a Lessonstep by ordernumber
 * used in frontend when clicking on Nex-or Prev-Buttons
 * @param id of the lessonStep
 * @returns {*}
 */
LessonModel.prototype.getLessonStepByOrdernumber = function(stepnumber){

    var list = this.rawdata.lessonsteps;

    var listlength = list.length;

    var retVal = null;

    for(var i=0; i < listlength; i++){

       if(list[i].stepnumber == stepnumber){

            retVal = list[i];

            break;

       }

    }

    return retVal;
};

/**
 * return a Lessonstep by StepId
 * used in frontend when clicking on ProgressElement
 * @param id
 * @returns {*}
 */
LessonModel.prototype.getLessonStepById = function(id){

    SKOOVE.Service.LogService({message:'LessonModel.getLessonStepById', data: id});

    var root = this;

    var list = this.rawdata.lessonsteps;

    var listlength = list.length;

    var retVal = null;

    for(var i=0; i < listlength; i++){

        if(list[i].id == id){

            root.currentStepNumber = i+1;

            retVal = list[i];

            break;

        }
    }

    return retVal;
};

/**
 * return a Lessonstep by StepId
 * used in frontend when clicking on ProgressElement
 * @param id
 * @returns {*}
 */
LessonModel.prototype.getNextLessonStep = function(){

    SKOOVE.Service.LogService({message:'LessonModel.getNextLessonStep', data: this.currentStepNumber});

    var list = this.rawdata.lessonsteps;
    
    var stepIndex = this.currentStepNumber - 1;

    var retVal = null;

    if(list[stepIndex]){
        retVal = list[stepIndex];
    }
  
    this.currentStepNumber += 1;

    return retVal;

};

/**
 * returns the Specification of a part
 * @param id id of the part
 */
LessonModel.prototype.getPartSpecificationById = function(id){

    var partsList = this.rawdata.parts;
    var listlength = partsList.length;
    var retVal = null;

    for(var i=0; i < listlength; i++){

        if(partsList[i].id == id){

            retVal = partsList[i];

            break;

        }

    }

    return retVal;
};

/**
 * get the global Runtime overall parts
 * @returns {null|*}
 */
LessonModel.prototype.getGlobalRuntime = function(){

    return this.globalRuntime;

};


/**
 * get the Ordernumber of the first step
 * @returns {*}
 */
LessonModel.prototype.getFirstStepNumber= function(){

    var list = this.rawdata.lessonsteps;

    if(list.length>0){

        return list[0].stepnumber;

    }
    else{

        return null;

    }
};

/**
 * Detects and Analyzies a MIDI-Input
 * @constructor
 */
var MIDIPianoEventHandler = function () {
    // stack for holding already
    // triggered events stack is used
    this.noteOnStack = [];
};

/**
 * Detect the Event-Type received from midi
 * @param midiEvent
 */
MIDIPianoEventHandler.prototype.detectInputEvent = function (midiEvent) {

    var root = this;
    if (midiEvent.data.length == 3) {

        if (midiEvent.data[0] === 144 && midiEvent.data[2] > 0) {
            // check if the note Event has been triggered before
            // if the same event has been triggered the event is
            // registered in the notestack
            // if its true ... a note off event
            if (this.isNoteEventEqualToSomeOfLastEvents(midiEvent)) {
                // so remove the event from stack
                root.removeEventFromStack(midiEvent);
                // and call the noteOff Decorator (Eventhandler)
                root.onNoteOffEvent(midiEvent);
            }
            else {
                root.onNoteOnEvent(midiEvent);
                root.addEventToStack(midiEvent);
            }
        }
        else if (midiEvent.data[0] === 128 || midiEvent.data[2] == 0) {
            root.onNoteOffEvent(midiEvent);
            root.removeEventFromStack(midiEvent);
        }
    }
};

/**
 * checks if the same Note-Event has been fired
 * bug fix for a midi device: if midi type two notes
 * at the same time (96,98) than the NoteOff Event will not
 * fired correctly what is  expected
 * the expected value would be two events of 128 or two events
 * of 144 with velocity 0 instead two events with 144 and velocity > 0
 * has been fired
 * @param currentEvent
 * @returns {boolean}
 */
MIDIPianoEventHandler.prototype.isNoteEventEqualToSomeOfLastEvents = function (currentEvent) {
    var retVal = false;
    // check if the event is already in stack
    var elementIndex = this.noteOnStack.indexOf(currentEvent.data[1]);
    // if event isn't in stack ... retun false
    // else return true for further handling
    if (elementIndex == -1) {
        retVal = false;
    }
    else {
        retVal = true;
    }
    return retVal;
};

/**
 * add a event to the notestack
 * @param ev
 */
MIDIPianoEventHandler.prototype.addEventToStack = function (ev) {
    var i = this.noteOnStack.indexOf(ev.data[1]);
    if (i == -1) {
        this.noteOnStack.push(ev.data[1]);
    }
};

/**
 * remove a element from notestack
 * function is called every time a note off event
 * could be detected (MIDI-codes 128; 144 velocity 0;
 * and 144 veloccity > 100 fired twice )
 * @param ev
 */
MIDIPianoEventHandler.prototype.removeEventFromStack = function (ev) {
    var elementIndex = this.noteOnStack.indexOf(ev.data[1]);
    // the element could be found in the notestack
    if (elementIndex != -1) {
        // removed it from the array
        this.noteOnStack.splice(elementIndex, 1);
    }
};

/**
 * Decorator-Method: a noteOff-Event has been found
 */
MIDIPianoEventHandler.prototype.onNoteOffEvent = function (ev) {
};

/**
 * Decorator-Method: a noteOn-Event has been found
 */
MIDIPianoEventHandler.prototype.onNoteOnEvent = function (ev) {
};
/**
 * Datastructure for
 * @constructor
 */
var NoteViewData = function(){

    this.notePositions = [];

    this.partPositions = [];

    this.tickableQueue = [];

    this.animatedNoteQueue = [];

};

NoteViewData.prototype.isLastMeasureOnPage = function(measureNumber,pageBounds){

    for(var i=0; i < pageBounds.length; i++){

        if(pageBounds[i].lastMeasureNumberOnPage === measureNumber){
                return true;
        }

    }

    return false;

};

NoteViewData.prototype.getPageXEnd = function(measureNumber,pageBounds){

     for(var i=0; i < pageBounds.length; i++){
        if(pageBounds[i].lastMeasureNumberOnPage === measureNumber){
                return pageBounds[i].pageEndX;
        }
    }

};


NoteViewData.prototype.isLastNoteOnMeasure = function(index){

    var currentPosition =  this.animatedNoteQueue[index];

    if((index+1) < this.animatedNoteQueue.length){
        //check if the nextnotemeasuer is the same
        var nextPosition = this.animatedNoteQueue[index+1];
        if(currentPosition.partNumber !== nextPosition.partNumber){
            return true;
        }
    }
    else{
        return true;
    }

    return false;
};


/**
 computing the sliderData for pagination
 we have to compute the position of a tickable (note)
 for each page
 a page is defined by its measureBounds
 */
NoteViewData.prototype.getPagedSliderWayPoints = function(pageBounds){

    // create a local copy
    var tempNotePositions = this.animatedNoteQueue;

    // get the index for looping
    var len = tempNotePositions.length;

    for(var i = 0; i < len - 1 ; i++){

        tempNotePositions[i].xEndPos = tempNotePositions[i+1].xPos-1 ;
        
        var measureNumber = tempNotePositions[i].partNumber;
   
        if(this.isLastMeasureOnPage(measureNumber, pageBounds) 
            && this.isLastNoteOnMeasure(i)){
                
                if(tempNotePositions[i+1]){
                    tempNotePositions[i+1].isFirstNoteOnPage = true;
                }

                tempNotePositions[i].isLastNoteInStave = true;

                tempNotePositions[i].isLastNoteOnPage = true;
                
                tempNotePositions[i].xEndPos = this.getPageXEnd(measureNumber,pageBounds)        

        }

    }

    tempNotePositions[0].isFirstNoteOnPage = true;

    // setup the very last note
    var lastIndex = len -1;
    var everyLastNote = tempNotePositions[lastIndex];
    var measureNumber = everyLastNote.partNumber;
    
    tempNotePositions[lastIndex].xEndPos = this.getPageXEnd(measureNumber,pageBounds);
    tempNotePositions[i].isLastNoteInStave = true;
    tempNotePositions[i].isLastNoteOnPage = true; 
   
    return tempNotePositions;

};

/**
 *
 * @param docformatter
 * @param bpm
 * @param activeParts
 * @param noteviewbpm
 */
NoteViewData.prototype.getNoteViewData = function(docformatter, bpm, activeParts, noteviewbpm, hand){

    this.hand = hand;

    var clef = null;

    if(this.hand === 'l'){
        clef='bass';
    }
    else if(this.hand === 'r'){
        clef='treble';
    }

    // HACK
    bpm = noteviewbpm;

    var parts = docformatter.partFormater;

    var startPart = 0;

    var endPart = parts.length+1;

    // do rename it to measurePositions
    this._computePartPositions(docformatter.measureX, docformatter.measureWidth);

    if(activeParts == null || activeParts.length == 0){

        startPart = 0;

        endPart = parts.length;

    }
    else{

        // decrease because the edtior inputs
        // a value form x to y -> 1 to 8
        // the later loop is 0-based
        startPart = activeParts.start - 1;

        endPart = activeParts.end;

    }

    var i = 0;

    // iterate over each part to process part/voice and tickable data
    for(i = startPart; i < endPart; i++){


        // accessing the VexFlowDataStructure and process
        // the tContexts-Member which stores the infos we need

        var partNumber = i + 1;

        // tContexts contains all tickableinformations
        // on a measure,
        var tContexts = parts[i].tContexts.array;

        //console.log('tContexts');
        //console.log(tContexts);

        var numberOfContextsInPart = tContexts.length;

        // get All-Tickables

        var j = 0;

        for(j = 0; j < numberOfContextsInPart; j++){

            var aContext = tContexts[j];

            // get all Tickables -> all Elements which
            // have a time-indicator like notes and pauses
            // tickables are all types of musical-informations
            // played on a give tick e.g. time

            var tickables = aContext.tickables;
            var numberOfTickables = tickables.length;
            var shortestRunTime = 1000000;
            var tempTickable = null;

            for(var currentTickableIndex = 0; currentTickableIndex < numberOfTickables; currentTickableIndex++ ){
                // run over all tickables ...voices and hands
                // and get the information about a specific tick

                var isLastNote = false;

                var endPos = null;

                // check if the current investigated part
                // correspones whit the part we wanna use
                if((i) == (endPart-1)){
                    // ... the last note has been found
                    isLastNote = true;
                    // get the xPosition of the part-stave
                    // these information is used to run the slider
                    // to the end of the stave

                    endPos = this.partPositions[i].end;

                }

                var aTickable = tickables[currentTickableIndex];

                if(this.hand === 'b'){

                    if(shortestRunTime > aTickable.getIntrinsicTicks()){

                        shortestRunTime = aTickable.getIntrinsicTicks();
                        //aTickable.noteType = 'n';
                        tempTickable = aTickable;

                    }
                }
                else{
                    // BASS OR Treble
                    if(aTickable.clef === clef ) {

                        // check if the current investigated part
                        // correspones whit the part we wanna use
                        if((i) == (endPart-1)){
                            // ... the last note has been found
                            isLastNote = true;
                            // get the xPosition of the part-stave
                            // these information is used to run the slider
                            // to the end of the stave
                            
                            endPos = this.partPositions[i].end;

                        }

                        this._addTickableToMarkupQueue (aTickable,partNumber,endPos,isLastNote, bpm);

                        var bb = [];
                        
                        bb.push(aTickable);
                        
                        this._addTickableToNoteQueue (bb,partNumber,endPos,isLastNote, bpm);

                    }
                }
            }

            if(tempTickable){

                this._addTickableToMarkupQueue (tempTickable,partNumber,endPos,isLastNote, bpm);

                this._addTickableToNoteQueue (tickables,partNumber,endPos,isLastNote, bpm);

            }

        }

    }

    this._getExpectedQueue();

    this._getNoteViewAnimationQueue();

};

NoteViewData.prototype._addTickableToMarkupQueue = function(aTickable,partNumber,endPos,isLastNote, bpm){

    this.notePositions.push({
        xPos:  aTickable.getAbsoluteX(),
        ticksToRun: aTickable.getIntrinsicTicks(),
        timeToRun: (aTickable.getIntrinsicTicks()*60000) / (4096 * bpm),
        noteKeys: aTickable.getKeys(),
        noteType: aTickable.noteType,
        midiNoteNumber: 80,
        partNumber: partNumber,
        measureNumber: partNumber,
        isTied: aTickable.tie,
        isLastNoteInStave: isLastNote,
        isLastNoteOnPage: false,
        isFirstNoteOnPage: false,
        endPos: endPos,
        noteType: aTickable.noteType,
        noteid: aTickable.skoovenoteid,
        isLastNoteOnPage: false
    });

};

NoteViewData.prototype._addTickableToNoteQueue = function(tickables,partNumber,endPos,isLastNote, bpm){

    var tt = [];

    for(var i = 0; i < tickables.length; i++){

        var obj = {
            xPos:  tickables[i].getAbsoluteX(),
            ticksToRun: tickables[i].getIntrinsicTicks(),
            timeToRun: (tickables[i].getIntrinsicTicks()*60000) / (4096 * bpm),
            noteKeys: tickables[i].getKeys(),
            noteType: tickables[i].noteType,
            midiNoteNumber: 80,
            partNumber: partNumber,
            isTied: tickables[i].tie,
            isLastNoteInStave: isLastNote,
            endPos: endPos,
            noteType: tickables[i].noteType,
            noteid: tickables[i].skoovenoteid
        };
        tt.push(obj);
    }

    this.tickableQueue.push(tt);

};

NoteViewData.prototype._getNoteViewAnimationQueue = function(){

    var animationData = [];

    for (var i = 0; i < this.tickableQueue.length; i++){

        var tickableWithShortestRuntime = this._findTickableWithShortestRuntime(this.notePositions[i]);

        animationData.push(tickableWithShortestRuntime);
    }

    // compute the endPos of each AnimationDataset
    for(var i = 0; i < animationData.length-1; i++){
        // THE LAST INDEX IS ALREADY COMPUTED AND LIMITED
        // BY THE PARTS
        animationData[i].endPos = animationData[i+1].xPos;
    }

    this._removeTiedNotes(animationData);

    this._removeRestNotes(animationData);

    this._removeRestNotes(animationData);

    this.animatedNoteQueue = animationData;

};

NoteViewData.prototype._removeTiedNotes = function(animationData){

    for (var i = 0; i < animationData.length; i++){

        if(animationData[i].isTied && animationData[i].isTied === 'end'){

            if(animationData[i-1]){
                animationData[i-1].endPos = animationData[i].endPos;
                animationData[i-1].timeToRun +=animationData[i].timeToRun;
            }
            animationData.splice(i, 1);
        }

    }
};

NoteViewData.prototype._removeRestNotes = function(animationData){

    for (var i = 0; i < animationData.length; i++){

        if(animationData[i].noteType === 'r' ){
            // restnote will be splices if there are previous notes
            if(animationData[i-1] && animationData[i-1].noteType==='n'){
                animationData[i-1].endPos = animationData[i].endPos;
                animationData[i-1].timeToRun +=animationData[i].timeToRun;
                animationData.splice(i, 1);
            }
        }
    }
};

/**
 * finds the tickable with the shortest runtime in a tickableStack
 * used by building the animationdataQueue
 * returns the tickable
 * @private
 */
NoteViewData.prototype._findTickableWithShortestRuntime = function(timeStampTickables){

    var len = timeStampTickables.length;
    var shortestRunTime = 100000;
    var tickableWithShortestRunTime = null;
    var shortestRunTimeIndex = 0;
    var normalNoteIndex = -1;
    var restNoteIndex = -1;

    for(var i = 0; i < len; i++){

        var tickableRuntime = timeStampTickables[i].timeToRun;

        if(timeStampTickables[i].noteType !='r'){

            normalNoteIndex = i;
        }

        if(timeStampTickables[i].noteType =='r'){

            restNoteIndex = i;
        }

        if(shortestRunTime > tickableRuntime){

            shortestRunTimeIndex = i;

            tickableWithShortestRunTime = timeStampTickables[i];

            shortestRunTime = tickableRuntime;


        }

    }

    var theTickable = JSON.parse(JSON.stringify(tickableWithShortestRunTime));

    if(restNoteIndex>-1 && normalNoteIndex>-1){

        theTickable = JSON.parse(JSON.stringify(timeStampTickables[normalNoteIndex]));

        theTickable.timeToRun = shortestRunTime;

    }

    return theTickable;

};


NoteViewData.prototype._getExpectedQueue = function(){

    var expectedArray = [];

    var tempTimeToRun = 100000;

    var lastTimeToRun = 0;

    for (var i = 0; i < this.tickableQueue.length; i++){

        // tickabels are all musicalinformations
        // to a given timestamp
        var tickables = this.tickableQueue[i];

        var tempArray = [];

        var firstBoundFound = false;

        var boundedRunTime = 0;

        // get all tickables on one timestamp
        for (var j = 0; j < tickables.length; j++){

            // find the minimal runtime
            if(tickables[j].timeToRun < tempTimeToRun){

                tempTimeToRun = tickables[j].timeToRun;

            }

            for(var l = 0; l < tickables[j].noteKeys.length; l++){

                var boundedNotes = [];
                // found a note
                if(tickables[j].noteType === 'n' && tickables[j].isTied !== 'end'){
                    var x = l + 1;

                    if(tickables[j].isTied && tickables[j].isTied==='begin'){
                        // find the bounded note currently only one level
                        // for marking false or true
                        boundedNotes = this._findBoundedNotes(i,j);

                    }

                    var obj = {
                        "timeToPlay": lastTimeToRun,
                        "eventRunTime": tickables[j].timeToRun,
                        "midiEventType": "noteOn",
                        "noteKey": tickables[j].noteKeys[l],
                        "midiNoteNumber": getMIDINote(tickables[j].noteKeys[l]),
                        "viewNoteType": tickables[j].noteType,
                        "boundedNotes":boundedNotes,
                        "noteViewData": {
                            "xPos": tickables[j].xPos,
                            "endPos": tickables[j].endPos,
                            "noteViewId": tickables[j].noteid + '_' + x
                        }
                    };

                    tempArray.push(obj);
                }

                else{

                    if(firstBoundFound == false){
                        firstBoundFound = true;

                        if(tickables[j].noteType !=='r'){
                            boundedRunTime  = tempTimeToRun + tickables[j].timeToRun;

                        }

                    }

                }
            }
        }

        if(tempArray.length>0){
            expectedArray.push(tempArray);
        }

        if(firstBoundFound){
            lastTimeToRun = boundedRunTime;
        }
        else{
            lastTimeToRun = tempTimeToRun;
        }

    }

    this.expectedNoteStack = expectedArray;

    return expectedArray;

};

/**
 * find all bounded notes of a note in the tickables
 * these bounded notes will be added to the expected-Data-Structure
 * for marking the bounded notes in the note view
 * @param timestampIndex
 * @param tickableIndex
 * @returns {Array}
 * @private
 */
NoteViewData.prototype._findBoundedNotes = function(timestampIndex, tickableIndex){

    var boundedNoteStack = [];

    // look for the next element to get the id of the bounded note
    var tickables = this.tickableQueue[timestampIndex + 1];

    if(tickables[tickableIndex]){

        if(tickables[tickableIndex].isTied && tickables[tickableIndex].isTied === 'end'){

            var noteId = tickables[tickableIndex].noteid + '_1';

            boundedNoteStack.push(noteId);

        }

    }

    return boundedNoteStack;

};

/**
 * get the xPosition of each part
 * @param measuresstart
 * @param measurewidth
 * @private
 */
NoteViewData.prototype._computePartPositions = function(measuresstart,measurewidth){

    for(var i = 0; i < measuresstart.length; i++){

        var start = measuresstart[i];

        var end = measuresstart[i] + measurewidth[i];

        var partPosition = {
            start: start,
            end: end
        };

        this.partPositions.push(partPosition);

    }

};


var MidiNoteMapper = function(){
    return this;
};

var getMIDINote = function(noteString){

    this.theMap={
        'C/1' :24,
        'C#/1':25,
        'DB/1':25,
        'D/1' :26,
        'D#/1':27,
        'EB/1':27,
        'E/1' :28,
        'E#/1':29,
        'FB/1':28,
        'F/1' :29,
        'F#/1':30,
        'GB/1':30,
        'G/1' :31,
        'G#/1':32,
        'AB/1':32,
        'A/1' :33,
        'A#/1':34,
        'BB/1':34,
        'B/1' :35,
        'B#/1':36,
        'CB/2':35,
        'C/2' :36,
        'C#/2':37,
        'DB/2':37,
        'D/2' :38,
        'D#/2':39,
        'EB/2':39,
        'E/2' :40,
        'E#/2':41,
        'FB/2':40,
        'F/2' :41,
        'F#/2':42,
        'GB/2':42,
        'G/2' :43,
        'G#/2':44,
        'AB/2':44,
        'A/2' :45,
        'A#/2':46,
        'BB/2':46,
        'B/2' :47,
        'B#/2':48,
        'CB/3':47,
        'C/3' :48,
        'C#/3':49,
        'DB/3':49,
        'D/3' :50,
        'D#/3':51,
        'EB/3':51,
        'E/3' :52,
        'E#/3':53,
        'FB/3':52,
        'F/3' :53,
        'F#/3':54,
        'GB/3':54,
        'G/3' :55,
        'G#/3':56,
        'AB/3':56,
        'A/3' :57,
        'A#/3':58,
        'BB/3':58,
        'B/3' :59,
        'B#/3':60,
        'CB/4':59,
        'C/4' :60,
        'C#/4':61,
        'DB/4':61,
        'D/4' :62,
        'D#/4':63,
        'EB/4':63,
        'E/4' :64,
        'E#/4':65,
        'FB/4':64,
        'F/4' :65,
        'F#/4':66,
        'GB/4':66,
        'G/4' :67,
        'G#/4':68,
        'AB/4':68,
        'A/4' :69,
        'A#/4':70,
        'BB/4':70,
        'B/4' :71,
        'B#/4':72,
        'CB/5':71,
        'C/5' :72,
        'C#/5':73,
        'DB/5':73,
        'D/5' :74,
        'D#/5':75,
        'EB/5':75,
        'E/5' :76,
        'E#/5':77,
        'FB/5':76,
        'F/5' :77,
        'F#/5':78,
        'GB/5':78,
        'G/5' :79,
        'G#/5':80,
        'AB/5':80,
        'A/5' :81,
        'A#/5':82,
        'BB/5':82,
        'B/5' :83,
        'B#/5':84,
        'CB/6':83,
        'C/6' :84,
        'C#/6':85,
        'DB/6':85,
        'D/6' :86,
        'D#/6':87,
        'EB/6':87,
        'E/6' :88,
        'E#/6':89,
        'FB/6':88,
        'F/6' :89,
        'F#/6':90,
        'GB/6':90,
        'G/6' :91,
        'G#/6':92,
        'AB/6':92,
        'A/6' :93,
        'A#/6':94,
        'BB/6':94,
        'B/6' :95,
        'B#/6':96,
        'CB/7':95,
        'C/7' :96,
    };

    var retVal = noteString;

    if(this.theMap[noteString]){

        retVal = this.theMap[noteString];

    }

    return retVal;

};
/**
 * Loops through a delayednotestack
 * @constructor
 */
var MIDIQueue = function () {

    var self = this;

    // setup the local-members
    this.offset = 0;
    this.midiData = null;
    this.starttime = null;
    this.pausedTime =  null;
    this.sumAlreadyRunnedTime = 0;
    this.overAllTime = 0;
    this.timeOutQueue = [];
    this.numberOfNoteOnEvents = 0;


    this.schedule = function(event, playtime){
        var interValId = setTimeout(function () {
           self.onNoteEvent(event);
        }, playtime);
        return interValId;
    };
};

/**
 * setting the Js-Translated MIDI-File Data
 * @param midiData
 */
MIDIQueue.prototype.init = function (midiData) {
    var self = this;
    self.midiData = midiData;
    var len = self.midiData.length;
    // get the first keydown event
    // used for handling the keyboard-Controller
    for(var i= 0;i<len;i++){
        if(self.midiData[i].eventtype ==='noteOn'){
            self.firstdownkeyEvent = self.midiData[i].eventdata;
            break;
        }
    }
};

/**
 * starts processing the MIDI-Looper
 * @param offset
 * @returns {*}
 */
MIDIQueue.prototype.start = function(offset){

    this.numberOfNoteOnEvents = 0;
    this.offset = offset;
    // store the starttime the queue-processing
    // has been started
    this.starttime = new Date();
    // get the number of all events stored or
    // should be handled by the queue
    var numberofevents = this.runQueue(offset,0);

    // return the number of events
    return numberofevents;
};


/**
 * run through the queue and push all events to a queue
 * the queue will be handled automatical
 * @param thisoffset -> time to wait before playing a note
 * @param startindex -> index of note where to start
 * @returns {number}
 */
MIDIQueue.prototype.runQueue = function (offset,startindex) {

    var self = this;
    // counting the number of events detected in midifile
    var numberOfEvents = 0;
    // get length of the midi-data-Array
    var len = self.midiData.length;
    // run through the midi-data and process the events
    // of interest (note on and note off)
    for (var i = startindex; i < len; i++) {
        // get the current event, store it in an
        // extra variable, so we dont have to go
        // thought the object-chain
        var event = self.midiData[i];
        // check if the eventtype has the type channel
        if (event.eventdata.type !== "channel") {
            // if the current-event-type don't have
            // the type channel continue looping
            continue;
        }
        if (event.eventtype === 'noteOn' || event.eventtype === 'noteOff') {

             // compute the runtime of the detected event
             // timetoplay: timedelay to the previous event
             // offset: time in ms we have to wait (prelude)
             var playtime = event.timetoplay + offset;
             // console.log('offset ' + offset + ' playtime without offset ' + event.timetoplay + ' playtime with offset ' + playtime);
             // schedule the Event in the Queue-Array
             self.timeOutQueue.push(self.schedule(event,playtime));
             // increase the number of detected events
             numberOfEvents += 1;

             if(event.eventtype === 'noteOn'){
                 self.numberOfNoteOnEvents +=1;
             }

        }
    }
    return numberOfEvents;
};

/**
 * pause the queue-Handling
 *
 */
MIDIQueue.prototype.pause = function(){

    var self = this;

    // get the current-Time Stamp
    var currentTime = new Date();

    // compute the time in ms, when the queue processing
    // was stopped -> self.pausedTime holds a value in ms
    // which represents the time inside the midistack
    // if the pausedtime = 2900 ms all notes with a playtime
    // greater than 2900 ms has to be played after a resumee
    self.pausedTime = currentTime - self.starttime - self.offset;
    // increase the seconds already has been played
    // thsi value is used while pause and resumee to capture
    // the entry-point in Queue stack
    self.sumAlreadyRunnedTime += self.pausedTime;
    // clear the Queue and remove all timerintervals
    // added to the window object
    for(var i=0; i<this.timeOutQueue.length;i++){
        // get the Element-> the element
        // references the time e.g. interval id
        var elem = this.timeOutQueue[i];
        // ... and clear the interval
        clearInterval(elem);
     }

    // clear the queue
    this.timeOutQueue=[];
};

/**
 * resumes the Queue-Handling,
 * theses function computes the new startingpoint
 * inside the midistack
 * then the start function will be triggered
 */
MIDIQueue.prototype.continue = function(){
    // note: every time the queue has been stopped
    // the whole queue has been cleared, all
    // references to a timer has been deleted
    // in case of resume, the queue has to be build again
    // get the index of the note that have to be played
    // next computing of a new offset

    var self = this;
    self.starttime = new Date();

    // get the length of midi-data-stack
    var len = self.midiData.length;
    // initialize helper variable
    var newOffset = 0;

    var skipCounter = 0;

    // loop through the midistack
    for (var i = 0; i < len; i++) {
        var event = self.midiData[i];
        if (event.eventdata.type !== "channel") {
            continue;
        }
        if (event.eventtype === 'noteOn' || event.eventtype === 'noteOff') {
            // get the playtime of the current detected event
            var playtime = event.timetoplay;
            // add a event to the timequeue only when
            // it not has been played before the pausing,
            // that means if the pausedtime is greater than
            // the event-playtime, the event has already been handled
            if(playtime < this.sumAlreadyRunnedTime){
                //.. skip and goto to next index
                skipCounter += 1;
                //console.log('skip for playtime ' + playtime);
                continue;
            }
            else{
                newOffset = this.sumAlreadyRunnedTime;
                //console.log('new offset ' + newOffset);
                self.offset = 0;
                break;
            }
        }
    }

    self.runQueue(-newOffset, i);
};

/**
 * stops the queue-processing by clearing
 * all trigged timeouts, which has been added
 * to the widows-object
 */
MIDIQueue.prototype.stop = function(){

    for(var i = 0; i < this.timeOutQueue.length; i++){
        // get the Element-> the element
        // references the time e.g. interval id
        var elem = this.timeOutQueue[i];
        // ... and clear the interval
        clearInterval(elem);
    }
};

MIDIQueue.prototype.onNoteEvent = function (noteevent) {

};
/**
 * Provides functions to Convert MIDI-Files into
 * Js readable Data-Array
 * @constructor
 */
var MIDIConverter = function () {

    this.delayedStack = [];

};

/**
 * returns a JS-Array with JS-readable Informations
 * about the injected MIDI-File
 * @param rawMidiData
 * @returns {*|string}
 * @param playBackBPM
 * @param prelude
 */
MIDIConverter.prototype.init = function (rawMidiData, playBackBPM, prelude) {

    var self = this;

    var rawData = MidiFileReader(rawMidiData);

    var replayer = Replayer(rawData);

    var replayerData = replayer.getData();

    var ticksPerBeat = rawData.header.ticksPerBeat;

    var runnedTicks = 0;

    var lastdown = 0;

    //TODO: comment this
    for (var i = 0; i < replayerData.length; i++) {

        var dataSet = replayerData[i];

        // sum the ticks
        runnedTicks += dataSet[0].ticksToEvent;

        var newdelay = runnedTicks - lastdown;

        var scheduledTimeInMs = ((runnedTicks * 60000) / (ticksPerBeat * playBackBPM));

        var delayInMs = ((newdelay * 60000) / (ticksPerBeat * playBackBPM));

        self.delayedStack.push({
            'delay': newdelay,
            'eventdata': dataSet[0].event,
            'ticktimes': runnedTicks,
            'timetoplay': scheduledTimeInMs,
            'eventtype': dataSet[0].event.subtype,
            'delayinms': delayInMs
        });

        if (self.delayedStack[i].eventtype == 'noteOn') {

            lastdown = runnedTicks;

        }

    }

};

/**
 * accessor to the delayed Stack
 * @returns {Array}
 */
MIDIConverter.prototype.getDelayedStack = function () {

    return this.delayedStack;

};

function Replayer(midiFile) {

	var trackStates = [];

    var beatsPerMinute = 120;

    // Metainfos
    var ticksPerBeat = midiFile.header.ticksPerBeat;
	
	for (var i = 0; i < midiFile.tracks.length; i++) {

	    trackStates[i] = {
			'nextEventIndex': 0,
			'ticksToNextEvent': (
				midiFile.tracks[i].length ?
					midiFile.tracks[i][0].deltaTime :
					null
			)
		};
	}

	var nextEventInfo;

	var samplesToNextEvent = 0;
	
	function getNextEvent() {

		var ticksToNextEvent = null;

        var nextEventTrack = null;

        var nextEventIndex = null;
		
		for (var i = 0; i < trackStates.length; i++) {
			if (
				trackStates[i].ticksToNextEvent != null
				&& (ticksToNextEvent == null || trackStates[i].ticksToNextEvent < ticksToNextEvent)
			) {
				ticksToNextEvent = trackStates[i].ticksToNextEvent;
				nextEventTrack = i;
				nextEventIndex = trackStates[i].nextEventIndex;
			}
		}
		if (nextEventTrack != null) {
			/* consume event from that track */
			var nextEvent = midiFile.tracks[nextEventTrack][nextEventIndex];
			if (midiFile.tracks[nextEventTrack][nextEventIndex + 1]) {
				trackStates[nextEventTrack].ticksToNextEvent += midiFile.tracks[nextEventTrack][nextEventIndex + 1].deltaTime;
			} else {
				trackStates[nextEventTrack].ticksToNextEvent = null;
			}
			trackStates[nextEventTrack].nextEventIndex += 1;
			/* advance timings on all tracks by ticksToNextEvent */
			for (var i = 0; i < trackStates.length; i++) {
				if (trackStates[i].ticksToNextEvent != null) {
					trackStates[i].ticksToNextEvent -= ticksToNextEvent
				}
			}
			return {
				"ticksToEvent": ticksToNextEvent,
				"event": nextEvent,
				"track": nextEventTrack
			}
		} else {
			return null;
		}
	};


	var midiEvent;

    var temporal = [];

    function processEvents() {
		function processNext() {
			if ( midiEvent.event.type == "meta" && midiEvent.event.subtype == "setTempo" ) {
				// tempo change events can occur anywhere in the middle and affect events that follow
				beatsPerMinute = 60000000 / midiEvent.event.microsecondsPerBeat;
			} 
			if (midiEvent.ticksToEvent > 0) {
				var beatsToGenerate = midiEvent.ticksToEvent / ticksPerBeat;
				var secondsToGenerate = beatsToGenerate / (beatsPerMinute / 60);
			}
			var time = (secondsToGenerate * 1000 * 0) || 0;
			temporal.push([ midiEvent, time]);
			midiEvent = getNextEvent();
		};
		//
		if (midiEvent = getNextEvent()) {
			while(midiEvent) processNext(true);
		}
	};

	processEvents();

    return {
		"getData": function() {
			return clone(temporal);
		}
	};
};

var SKOOVE = SKOOVE || {};

var ns = SKOOVE.createNamespace("SKOOVE.Analizer");

/**
 * Analyzer for the melodie-mode
 * @param userPitch
 * @constructor
 */
ns.KeyModePlusMidiAnalizer = function () {

    // accepted Delay between the strokes  of a multiple pitch in ms
    this.acceptedDelay = 250;

    // stack of expected Events
    this.expectedEventsStack = [];

    this.eventStack = [];

    // pointer to the currently expected Events
    this.currentlyExpectedStackPointer = 0;

    // timestamp of the last detected User Pitch
    // variable is needed for comparing two or more
    // pitches that sholud be played at the same time
    this.lastDetectionTimeStamp = null;
    // temp Stack for Storing and analyzing a frequence
    // of two or more pitches
    this.multipleUserPitchStack = [];

    this.currentlyFoundPitches =  [];

    this.multiplePitchTimer = null;

    this.numberOfMultiplePitches = 0;

    this.trackedUserPitches = [];

    this.failedPitches = [];

};

/**
 * inits the Analyzer and build the internal datastructure for
 * analyzing user pitches
 * @param expectedEventsStack -> midi-Data
 * @param tickableData -> vexFlow-Tickables
 */
ns.KeyModePlusMidiAnalizer.prototype.init = function(expectedEventsStack){

    this.expectedEventsStack = expectedEventsStack;

};

/**
 * resets the analyier after a loop or a stop
 */
ns.KeyModePlusMidiAnalizer.prototype.reset = function(){

    // reset the last Detection timestamp
    this.lastDetectionTimeStamp = new Date();

    // set the stackpointer to 0 beginning of the expectedPitchStack
    this.currentlyExpectedStackPointer = 0;

};

/**
 * adds a user pitch to the datasctructure
 * called in KeymodePlusModule after detecting
 * an userInput
 * @param userPitch
 */
ns.KeyModePlusMidiAnalizer.prototype.addDetectedUserPitch = function(userPitch, timestamp){

    // look into the expectedStack and fetch all pitches which we be expected

    // return when a pitch could be detected but all pitches in stack
    // are already handled
    if(this.currentlyExpectedStackPointer >= this.expectedEventsStack.length){
        // TODO: which event should be fired ?
        this.allPitchesHandled();
        // return
        return;
    }

    // the expectedEventStack holds all expected-events which
    // are expected to a given time -> on every index could one
    // more events registered (example: the first pitch should be
    // a user input of two pitches)

    // get all the pitches actually expected
    var expectedPitches = this.expectedEventsStack[this.currentlyExpectedStackPointer];

    //console.log('expectedPitches');
    //console.log(expectedPitches);

    // got the number of expected pitches
    var numberOfCurrentlyExpectedPitches = expectedPitches.length;

    //console.log('expectedPitches' + numberOfCurrentlyExpectedPitches);

    // check which kind of pitch is currently expected
    // two kind are allowed -> simple Pitch only one keystroke
    // OR multiple Pitch with more than one keystrokes

    if(numberOfCurrentlyExpectedPitches == 1){
        // one pitch is expected
        // call the handler-function
        this._handleSimplePitch(userPitch);
    }
    else{
        // more than one pitches are expected
        // call the handler-function
        if(!timestamp){
            timestamp = Date.now();
        }
        this._handleMultiplePitch(userPitch,timestamp);
    }
};

/**
 * analyzing of a simple pitch
 * @param userPitch
 * @private
 */
ns.KeyModePlusMidiAnalizer.prototype._handleSimplePitch = function(userPitch){

    var userPitches = [];
    userPitches.push(userPitch);

    // return if a pitch could be detected, but all pitches in stack
    // are already handled

    var expectedPitches = this.expectedEventsStack[this.currentlyExpectedStackPointer];
    //console.log(expectedPitches);

    // get the note number of the excpected pitch
    var expectedNoteData = expectedPitches[0];

    var expectedNoteNumber = expectedPitches[0].midiNoteNumber;

    // check if the expected pitch notenumber equals
    // the noteNumber of the userpitch
    if(expectedNoteNumber === userPitch.note){

        // this should be a parameter of the function
        var detectionTimeStamp = new Date();
        // compute the difference between the Timestamp of the current-user-pitch
        // and the TimeStamp of the user prev userpitch

        if(!this.lastDetectionTimeStamp){
            this.lastDetectionTimeStamp = new Date();
        }

        var timeDiffBetweenPitches = (detectionTimeStamp - this.lastDetectionTimeStamp);

        //console.log('time to play ' + expectedPitches[0].timeDistanceToPrevNote) ;

        var acceptedMinimalTimediff = expectedPitches[0].timeDistanceToPrevNote * 0.8;

        //console.log('timeDiffBetweenPitches ' + timeDiffBetweenPitches + ' acceptedMinimalTimediff ' + acceptedMinimalTimediff) ;

        //console.log('acepted diff  ' + acceptedMinimalTimediff) ;

        // check timing
        if(timeDiffBetweenPitches >= expectedPitches[0].timeDistanceToPrevNote){

            //console.log('diff 1') ;

            this.lastDetectionTimeStamp = detectionTimeStamp;

            // increase the stack pointer
            this.currentlyExpectedStackPointer += 1;
            // ... if it is equal ... call success handler
            
            var tempArray = [];
            
            tempArray.push(expectedNoteData);

            this.onPitchCompareSuccess(tempArray);
         
        }
        else if(timeDiffBetweenPitches > acceptedMinimalTimediff){
            
            this.lastDetectionTimeStamp = detectionTimeStamp;
            // increase the stack pointer
            this.currentlyExpectedStackPointer += 1;
            // ... if it is equal ... call success handler
            var restRun = expectedPitches[0].timeDistanceToPrevNote - timeDiffBetweenPitches;
            var datas = [];
            datas.push(expectedNoteData);
            this.onRightPitchBefore(datas, restRun);

            //console.log('user pitch correct played before waiting' + restRun);


        }
        else{
            // ... if it isn't equal ... call failed handler
           // console.log('user pitch not in timerange');
            var userPitches = [];
            userPitches.push(userPitch);
            this.falseStrokeFound(userPitch);
            this.onPitchCompareFailed(expectedPitches,userPitches);
        }
    }
    else{
       // console.log('user pitch has not the correct note');
        var userPitches = [];
        userPitches.push(userPitch);
        this.falseStrokeFound(userPitch);
        this.onPitchCompareFailed(expectedPitches,userPitches);
    }

};


/**
 * handles the analyzing of a multiple pitch
 *
 * @param userPitch
 * @private
 */
ns.KeyModePlusMidiAnalizer.prototype._handleMultiplePitch = function(userPitch, detectionTimeStamp){

    var root = this;

    var timer = window.setTimeout(

        function(){
            root.currentlyFoundPitches = [];
            root.multipleUserPitchStack = [];
            root.trackedUserPitches = [];
            root.failedPitches = [];
            root.numberOfMultiplePitches = 0;
        },
        300
    );

    // get the currently expected pitchdata by accessing the stack on the currentpointer
    var expectedPitches = this.expectedEventsStack[this.currentlyExpectedStackPointer];

    var numberOfExpectedPitches = expectedPitches.length;

    var failed = false;

    this.trackedUserPitches.push(userPitch);

    if(!this.lastDetectionTimeStamp){

        this.lastDetectionTimeStamp = detectionTimeStamp;
        
    }

    // check if the current pitch is in the expected pitches-stack
    // first of all check if the user Pitch is part of the expected pitches

    var rightDetectedPitch = this._isUserPitchExpected(expectedPitches, userPitch);

    if(rightDetectedPitch === null){
        // the User Pitch is not expected
        this.failedPitches.push(userPitch);
        this.falseStrokeFound(userPitch);
        this.numberOfMultiplePitches = 0;
        failed = true;
    }
    else{
        // the User Pitch is expected

        var isAlreadyRegistered = this._isUserPitchAlreadyRegistered(userPitch);

        if(isAlreadyRegistered){
            //console.log('is already registered');
            this.currentlyFoundPitches = [];
            this.multipleUserPitchStack = [];
            this.numberOfMultiplePitches = 0;
            this.lastDetectionTimeStamp = new Date();

        }
        else{
            //console.log('not registered');
            this.numberOfMultiplePitches += 1;
            this.currentlyFoundPitches.push(userPitch.note);


        }
        this.rightStrokeFound(rightDetectedPitch);
    }

    // if the current user pitch is excepted
    // cases: the pitch have to be in a timerange
    if(this.numberOfMultiplePitches === 1){
        //... if we detected the first pitch of
        // all expected pitches we start an internal
        // timer -> because all userpitches should be
        // done into a specified timeframe
        this.multiplePitchTimer =  new Date();
        // compute the difference between the Timestamp of the current-user-pitch
        // and the TimeStamp of the user prev userpitch
        var timeDiffBetweenPitches = (detectionTimeStamp - this.lastDetectionTimeStamp);
        var acceptedMinimalTimediff = rightDetectedPitch.timeDistanceToPrevNote * 0.8;

        // check timing
        // case: user plays the pitches after the exceted time ->
        // the app is waiting
        if(timeDiffBetweenPitches >= rightDetectedPitch.timeDistanceToPrevNote){
            // this.lastDetectionTimeStamp = detectionTimeStamp;
        }
        else if(timeDiffBetweenPitches >= acceptedMinimalTimediff){
            // console.log('user pitch correct played before waiting');
        }
        else{
            // ... if the pitch was too fast
            // console.log('user pitch not in timerange-> was to fast');
            var userPitches = [];
            userPitches.push(userPitch);
            this.failedPitches.push(userPitch);
            this.multiplePitchComparingFailed(expectedPitches, userPitches, this.failedPitches);
            return;
        }
    }
    else if(this.numberOfMultiplePitches>1){
        // there are more than one userpitches worked
        // check the difference between the pitches and the accepted delay
        // because two pitches on the same time are nearly impossible
        // so we need a accepted delay between two pitches
        // console.log('next pitch');
        this.lastDetectionTimeStamp = detectionTimeStamp;

        // get the difference between the last pitch and the current pitch
        var pitchTimeDifference = detectionTimeStamp - this.multiplePitchTimer;

        if(pitchTimeDifference > this.acceptedDelay){
            // ..time difference to the previous event is greater that accepted
            this.failedPitches.push(userPitch);
            this.falseStrokeFound(userPitch.note);
            failed = true;
         }
    }

    if(failed){
        // console.log('11');
        this.multiplePitchComparingFailed(expectedPitches, this.trackedUserPitches, this.failedPitches);
        this.trackedUserPitches = [];
        this.multipleUserPitchStack = [];
        this.numberOfMultiplePitches = 0;
        this.failedPitches = [];

    }
    else if(this.numberOfMultiplePitches === numberOfExpectedPitches){
        //console.log('12');
        root.currentlyFoundPitches = [];
        root.multipleUserPitchStack = [];
        root.trackedUserPitches = [];
        root.failedPitches = [];
        root.numberOfMultiplePitches = 0;

        this.multiplePitchComparingSuccess(expectedPitches);
    }

};

ns.KeyModePlusMidiAnalizer.prototype._isUserPitchAlreadyRegistered = function(userPitch){

    var pitchAlreadyRegistered = false;

    for (var j = 0; j < this.currentlyFoundPitches.length; j++){

        if(this.currentlyFoundPitches[j] === userPitch.note){

            pitchAlreadyRegistered = true;
            break;

        }
    }

    return pitchAlreadyRegistered;

};


/**
 * private Method
 * checks if the currently detected userpitch is expected
 * @param expectedPitches
 * @param userPitch
 * @returns {boolean}
 * @private
 */
ns.KeyModePlusMidiAnalizer.prototype._isUserPitchExpected = function(expectedPitches, userPitch){

    var numberOfExpectedPitches = expectedPitches.length;

    var currentDetectedPitch  = null;

    for(var i = 0; i < numberOfExpectedPitches; i++){

        if(expectedPitches[i].midiNoteNumber === userPitch.note){

            currentDetectedPitch = expectedPitches[i];

            break;

        }

    }

    return currentDetectedPitch;

};


ns.KeyModePlusMidiAnalizer.prototype.multiplePitchComparingFailed = function(expectednotedata, userpitches, failedPitches){

    this.currentlyFoundPitches = [];
    this.multipleUserPitchStack = [];
    this.numberOfMultiplePitches = 0;
    this.onMultiplePitchCompareFailed(expectednotedata, userpitches,failedPitches);
    this.failedPitches = [];
};

ns.KeyModePlusMidiAnalizer.prototype.multiplePitchComparingSuccess = function(expectednotedata){

    // increase the pointer
    this.currentlyExpectedStackPointer +=1;
    // fire the Eventhandler-Method
    this.onPitchCompareSuccess(expectednotedata, this.multipleUserPitchStack);
    // clear helper-Variables
    this.currentlyFoundPitches =  [];
    this.multipleUserPitchStack = [];
    this.numberOfMultiplePitches = 0;
};



/**
 * Fired when comparing successful
 */
ns.KeyModePlusMidiAnalizer.prototype.onPitchCompareSuccess = function (playedNoteDatas, requestedNoteData) {
    // overwrite this method
};

/**
 * Fired when comparing failed
 */
ns.KeyModePlusMidiAnalizer.prototype.onPitchCompareFailed = function (exceptedNoteData, userPitchData) {
    // overwrite this method
};

/**
 * Fired when comparing failed
 */
ns.KeyModePlusMidiAnalizer.prototype.onRightPitchBefore = function (expectedNoteData,restRun) {
    // overwrite this method
};

ns.KeyModePlusMidiAnalizer.prototype.rightStrokeFound = function(noteNumber){

};

ns.KeyModePlusMidiAnalizer.prototype.falseStrokeFound = function(noteNumber){

};

ns.KeyModePlusMidiAnalizer.prototype.allPitchesHandled = function(){

};
/**
 * wrapps ajax - requests
 * internal usage jQuery-ajax-calls
 * @constructor
 */
var AjaxRequest = function(){


};

/**
 * setup a get-Request to a given url
 * @param url
 */
AjaxRequest.prototype.get = function(url){

    var root = this;

    jQuery.ajax({
        type: "Get",
        url: url,
        success: function (data) {
            root.onSuccess(data);
        },
        error: function (error) {
            root.onError(error);
        }
    });

};

/**
 * setup a post request to a given url
 * @param url
 * @param data
 */
AjaxRequest.prototype.post = function(url,content){

    var root = this;

    jQuery.ajax({
        type: "post",
        url: url,
        data: content,
        success: function (data) {
            root.onSuccess(data);
        },
        error: function (error) {
            root.onError(error);
        }
    });

};

AjaxRequest.prototype.onSuccess = function(data){


};

AjaxRequest.prototype.onError = function(error){


};

/**
* Loads an XML-File via Ajax-Request
*/
var XmlLoader = function(){

    return this;
};

XmlLoader.prototype.getDocument = function(xmlpath, onsuccess, onerror){

    var root = this;

    if(!xmlpath){
       onerror(e);
       return;
    }

    var req = new XMLHttpRequest();

    var uri = root._getParameter('doc');

    if (! uri) uri = xmlpath;

    req.open('GET', uri, true);

    req.onreadystatechange = function() {

        if (req.readyState != 4){
            return;
        }
        
        onsuccess(req.responseText);

    };
    req.send(null);
};

XmlLoader.prototype._getParameter = function(name){

    name = name.replace(/\[]/, "\\\[").replace(/[\]]/, "\\\]");

    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");

    var results = regex.exec(window.location.search);

    if (results == null){
    	return undefined;
    } 
    else{ 
    	return decodeURIComponent(results[1].replace(/\+/g, " "))
    };

};
/**
 * 
    var paginationConfig = {
            numberOfStavesPerPage: root.numberOfStavesPerPage,
            bpm: root.bpm,
            noteviewbpm: root.noteviewbpm,
            xmlStream: plainXMLData,
            usedHands: root.hand,
            notescoreContainerId : 'notecontainer',
            usedHands: root.hand,
            usedMeasures : usedMeasuresConfig
        };

 the id of a musical information to connect
 * @param config
 * @constructor
 */
var NoteScoreDataSource = function(config){

    // read the config
    this.xmlStream = config.xmlStream;

    // beats per minute
    this.bpm = config.bpm;

    // a hack @TODO: CHECK WHY AND WHERE IS THIS USED
    this.noteviewbpm = config.noteviewbpm;

    if(this.noteviewbpm>this.bpm ){
        this.bpm = this.noteviewbpm;
    }

    // measure to display
    this.usedMeasures = config.usedMeasures;

    // which hand has to display
    this.hand = config.usedHands; 

    // the number of Staves that should be rendered on the score
    this.numberOfStavesPerPage = parseInt(config.numberOfStavesPerPage); 

    // id of the container
    this.notescoreContainerId = config.notescoreContainerId;

    // @todo try to inject the Vex.Flow.Document 
    this.vexFlowDocument = new Vex.Flow.Document(this.xmlStream);

    this.wholeruntime = 0;

    // contains all informations about the score data
    // in a way we can handle nice
    this.tickableDataQueue = [];

    // contains all informations about waypoints
    // used by the slider
    this.wayPointPositions = [];

    this.pageBounds = [];

    this.usedClef = this._getUsedClef(this.hand);

    return this;

};

/**
* returns the Queue of expected Events thats should be played
* by a user to a specific time
* used by: -Analyzier
*/
NoteScoreDataSource.prototype.getExpectedQueue = function(){

    return this.expectedPitches;

};

/**
* returns an array of waypoints for the noteviewslider
* used by: waypoint slider
**/
NoteScoreDataSource.prototype.getWayPoints = function(){

    return this.wayPoints;

};

/**
* get the data for the sequence video player
**/
NoteScoreDataSource.prototype.getSequenceStack = function(){

    return this.sequenceStack;

};

/**
* returns an array of waypoints for the noteviewslider
* used by: waypoint slider
**/
NoteScoreDataSource.prototype.getPagingTimes = function(){

    return this.wayPoints;

};

/**
* returns an array of tickables
* @todo: check where this is used
**/
NoteScoreDataSource.prototype.getTickables = function(){

    return this.orderedTickables;

};

/**
* returns the whole runtime og the song in milliseconds
* @todo: check where this is used
**/
NoteScoreDataSource.prototype.getWholeRuntime = function(){

    return this.wholeruntime;

};

/**
* initialize the NoteScoreDataSource 
* reference 
*/
NoteScoreDataSource.prototype.init = function(){

    var root = this;

    root._renderTheNoteSource();

    return root;

};

/**
* Normalizes the vexflow-Data
*/
NoteScoreDataSource.prototype._renderTheNoteSource = function(){

    var root = this;

    // @todo Error handling if element could not be found
    this.container = document.getElementById(root.notescoreContainerId);

    // get the width of the pagescoreviewport
    this.pageScoreWidth = this.container.offsetWidth;

    // delete all unused measures 
    // these method deletes unused Measure 
    // from of the vexflow-backend so it will
    // not be rendered
    this._deleteUnusedMeasures(this.usedMeasures);

    if(this.numberOfStavesPerPage){

        window.staveMinWidth = this.pageScoreWidth / parseInt(this.numberOfStavesPerPage);

    }
    else{

        window.staveMinWidth = 50;

    }

    this.formatter = this.vexFlowDocument.getFormatter();

    // set the width and draw the notescore
    this.formatter.setWidth(this.pageScoreWidth);

    // draw the notescore
    this.formatter.draw(this.container);

    console.log('formatter');
    console.log(this.formatter);

    // fetch the number of pages
    this.numberOfPages = this.formatter.blockDimensions.length;
    
    // get the bounds of each page
    this.pageBounds = this._getPageBounds(this.formatter);
   
    var tickablesPerMeasure = this._getTickablesPerMeasure(this.formatter);
    
    // result of the method is a datastructure that contains all the data
    // we need for the frontend (there is no garanty that the xml parser provides
    // the note-data in the right orderer.
    // Futhermore we don't need the whole vexflow
    // datastructure so it can be nulled after these preprocessing)
    var sortedTickables = this._getOrderedAndNormalizedTickables(tickablesPerMeasure);
 
    //console.log('sortedTickables');
    //console.log(sortedTickables);

    this.wayPoints = this._getTheWayPoints(root.usedClef,sortedTickables);

    // console.log('waypoints');
   //  console.log(this.wayPoints);

    this.sequenceStack = this._getSequenceStack( this.wayPoints);

    // console.log('sequenceStack');
    // console.log(this.sequenceStack);

    var filteredTickables = [];

    if(root.usedClef!=='both'){

          filteredTickables = this._getFilteredTickablesByClef(root.usedClef,sortedTickables);
    
    }
    else{
    
         filteredTickables = sortedTickables;
    
    }

    this.expectedPitches = this._computeExpectedQueue(filteredTickables);
        
    // console.log('expected Pitches');

    // console.log(this.expectedPitches);

    this.orderedTickables = filteredTickables;

    this.pagingTimes = this._getPagingTimes(this.formatter);
    
    this.numberOfPages = this.formatter.measuresInBlock.length;

    this.formatter = null;

};

/**
* creates the stack for the videosequences
**/
NoteScoreDataSource.prototype._getSequenceStack = function(waypoints){

    var sequenceStack = [];

    var startRestNoteTime = 0;

    var i = 0;

    // sum the runtime of all restnotes at the beginning
    while(waypoints[i].noteType === 'r'){

        startRestNoteTime += waypoints[i].timeToRun;
        i = i + 1;

    }

    var aSequencePoint = waypoints[i];

    aSequencePoint.timeToPrevNote = startRestNoteTime;

    sequenceStack.push(aSequencePoint);

    for(var j=i+1; j < waypoints.length; j++){

        var aSequencePoint = waypoints[j];

        aSequencePoint.timeToPrevNote =  waypoints[j-1].timeToRun;

        sequenceStack.push(aSequencePoint);

    }

    return sequenceStack;

};



NoteScoreDataSource.prototype._getPagingTimes = function(formatter){

    var root = this;

    var wholeruntime = 0;

    for (var i=0; i < this.wayPoints.length; i++){

        wholeruntime += this.wayPoints[i].timeToRun;

    } 

    // get Runtime per measure
    var runtimePerMeasure = wholeruntime / formatter.document.measures.length;

    var pageTimes = [];

    for(var i=0; i < formatter.measuresInBlock.length; i++){

       var measuresPerPage = formatter.measuresInBlock[i].length;

       var runTimePerPage = (runtimePerMeasure * measuresPerPage);

       pageTimes.push(
           {'runTimePerPage':runTimePerPage,
           'runTimePerMeasure': runtimePerMeasure}
       );

    }

    root.wholeruntime = wholeruntime;

    return pageTimes;

};

/**
* 
*/
NoteScoreDataSource.prototype._getOrderedAndNormalizedTickables = function(tickablesPerMeasure){

    var sortedTickables = [];

    // sort the tickables which are assigned to the 
    // measures 
    // reason why doing that: the vexflow-Parser-Output
    // couldn't give a garanty that the ticks and note
    // informations are in the right order
    for(var i=0; i < tickablesPerMeasure.length; i++ ){

        if(tickablesPerMeasure[i]){

            tickablesPerMeasure[i].sort(byProperty('sortIndex'));

        }

    }

    //... after ordering each note inside the measures

    // grabbing the tickable and note infos in 
    // a one-dimensional array
    for (var i = 0; i < tickablesPerMeasure.length; i++){

        if(tickablesPerMeasure[i]){

            for(var j = 0; j < tickablesPerMeasure[i].length; j++){

                sortedTickables.push(tickablesPerMeasure[i][j].tickables);

            }
        }

    }

    return sortedTickables;

};

/**
* 
*/
NoteScoreDataSource.prototype._getTickablesPerMeasure = function(docformatter){

    var root = this;

    var measureContent = docformatter.measureContent;

    var startMeasure = 0;

    var endMeasure = measureContent.length;

    var i = 0;    

    var tickablesPerMeasure = [];

    // iterate over each measure in vexflow-Datastructure
    // to process all data we need 
    for(i = startMeasure; i < endMeasure; i++){

        // get the array that stores all tickable information
        // inside a specific measure
        // tContexts contains informations about
        // the tickables for a measure all musical informations
        // played to the same time 

        // vexflow-Datastructure
        // measurecontent[i].tcontexts.array[k].lenght -> number of elements in array is the number
        // number of elements that will be displayed in rendered Score at timeframe k

        // measurecontent[i].tcontexts.array[k].tickables -> the tickables that are
        // displayed at the same time

        var allTickablesInMeasure = measureContent[i].tContexts.array;

        // get the lenght of the array
        var numberOfTickablesInMeasure = allTickablesInMeasure.length;

        //console.log('should ignore');
        //console.log(allTickablesInMeasure.shouldIgnoreTicks());
        //console.log

        // accessing the VexFlowDataStructure and process
        // the tContexts-Member which stores the infos we need
        var measureNumber = i + 1;

        // get All-Tickables
        var j = 0;

        for(j = 0; j < numberOfTickablesInMeasure; j++){

            // get the Tickables that on the same timeframe
            // get all Tickables -> all Elements which
            // have a time-indicator like notes and pauses
            // tickables are all types of musical-informations
            // played on a give tick e.g. time

            // array contains all musicalinfo that 
            // played at the same time

            // iterate and filter the tickables which are stored 
            // on the used staves
            var tickablesInTimeFrame = allTickablesInMeasure[j].tickables;

            //console.log(tickablesInTimeFrame);

            // get the data from the vexflow-formatter we need
            var normalizedTickables = root._addTickableToTickableDataQueue(tickablesInTimeFrame, measureNumber, root.bpm);

            var sortIndex = normalizedTickables[0].xPos;

            //console.log(sortIndex);

            var obj = {
                sortIndex: sortIndex,
                tickables: normalizedTickables
            };

            if(!tickablesPerMeasure[measureNumber]){
     
                tickablesPerMeasure[measureNumber] = [];
    
            }

            tickablesPerMeasure[measureNumber].push(obj);

        }

    }

    // console.log('tickablesPerMeasure');

    // console.log(tickablesPerMeasure);

    return tickablesPerMeasure;

};

/**
* waypoints are all notes in the source:
* we have to filter all tickables which represents rest-notes
* two cases: one hand - delete the restnote and set the xEnd of the prev note to 
**/

NoteScoreDataSource.prototype._getTheWayPoints = function(usedClef, tickables){

    if(usedClef==='both'){

       return this._getTheWayPointsForBothHands(tickables);

    }
    else{

      return this._getTheWayPointsForOneHand(usedClef, tickables);

    }

};



function getMinDuration(tickablesAtIndex){

    var retVal = 100000;

    for(var i = 0; i<tickablesAtIndex.length; i++ ){

        if(retVal>tickablesAtIndex[i].timeToRun)
            retVal = tickablesAtIndex[i].timeToRun;

    }

    return retVal;

};

/*
* computes the waypoints for both hands
*/
NoteScoreDataSource.prototype._getTheWayPointsForBothHands = function(tickables){

    var tempWayPoints = [];

    var wayPointPositions = [];

    var i = 0;

    var len = tickables.length;

    var tempTickablesInUsedClef = [];

    for(i = 0; i < len; i++){

        // get all tickables in timeframe
        var tickablesInTimeFrame = tickables[i];
        
        // special cases two note ... all with the same run time
        // one of these notes has a restnote as follower
        var tempTickable = this._findTickableWithShortestRuntimeBothHand(tickablesInTimeFrame,tickables,i);

        tempTickablesInUsedClef.push(tickablesInTimeFrame);
        
        tempWayPoints.push(tempTickable);

    }

    // console.log('tempWayPoints');

    // console.log(tempWayPoints);

    // ignore restnotes and tiednotes
    var firstNoteFound = false;

    var lastNoteIndex = -1;


    /*for(var i=1; i<tempWayPoints.length; i++){

        //tempWayPoints[i-1].timeToRun =  tempWayPoints[i].timeToRun;

    }*/

    for (var i = 0; i < tempWayPoints.length; i++){

        // if the r note is the first note
        if(tempWayPoints[i].noteType === 'r' && !firstNoteFound){

            wayPointPositions.push(tempWayPoints[i]);

            lastNoteIndex += 1;

            firstNoteFound = true;
        
        }

        else if(tempWayPoints[i].noteType === 'r' && firstNoteFound){

            wayPointPositions[lastNoteIndex].timeToRun += tempWayPoints[i].timeToRun;
        
        }

        else if(tempWayPoints[i].noteType === 'n' && tempWayPoints[i].isTied && tempWayPoints[i].isTied==='end' ){

            wayPointPositions[lastNoteIndex].timeToRun += tempWayPoints[i].timeToRun;
        
        }

        else if(tempWayPoints[i].noteType === 'n'){

            firstNoteFound = true;

            wayPointPositions.push(tempWayPoints[i]);
            
            lastNoteIndex += 1;
        
        }

    }

    var recalculatedPositions = this._recalculateWayPointEndPositions(wayPointPositions);

    return recalculatedPositions;

};


/**
* get the waypoints for one hand
**/
NoteScoreDataSource.prototype._getTheWayPointsForOneHand = function(clefToUse, tickables){

    var tempWayPoints = [];

    var wayPointPositions = [];

    var tempTickablesInUsedClef = [];

    var i = 0;

    var j = 0;

    var len = tickables.length;

    for(i = 0; i < len; i++){

        // get all tickables in timeframe
        var tickablesInTimeFrame = tickables[i];

        var j_len = tickablesInTimeFrame.length;

        // iterate and filter the tickables which are stored 
        // on the used staves

        var tempTickablesInUsedClefHelper = [];

        for (j = 0; j < j_len; j++){

                // get all tickables in the right staves (bass or treble)
                if(tickablesInTimeFrame[j].clef === clefToUse){
                    
                    tempWayPoints.push(tickablesInTimeFrame[j]);

                    tempTickablesInUsedClefHelper.push(tickablesInTimeFrame[j]);

                }
    
        }

        tempTickablesInUsedClef.push(tempTickablesInUsedClefHelper);

    }

    // ignore restnotes and tiednotes
    var firstNoteFound = false;

    var lastNoteIndex = -1;

    for (var i = 0; i < tempWayPoints.length; i++){

        if(tempWayPoints[i].noteType === 'r' && !firstNoteFound){

            wayPointPositions.push(tempWayPoints[i]);

            lastNoteIndex += 1;

            firstNoteFound = true;
        
        }

        else if(tempWayPoints[i].noteType === 'r' && firstNoteFound){

            wayPointPositions[lastNoteIndex].timeToRun += tempWayPoints[i].timeToRun;
        
        }

        else if(tempWayPoints[i].noteType === 'n' && tempWayPoints[i].isTied && tempWayPoints[i].isTied==='end' ){

            wayPointPositions[lastNoteIndex].timeToRun += tempWayPoints[i].timeToRun;
        
        }

        else if(tempWayPoints[i].noteType === 'n'){

            firstNoteFound = true;

            wayPointPositions.push(tempWayPoints[i]);
            
            lastNoteIndex += 1;
        
        }

    }

    var recalculatedPositions = this._recalculateWayPointEndPositions(wayPointPositions);

    return recalculatedPositions;

};

/**
* get the waypoints for one hand
**/
NoteScoreDataSource.prototype._getFilteredTickablesByClef = function(clefToUse, tickables){

    var filteredTickables = [];

    var len = tickables.length;

    for(i = 0; i < len; i++){

        var filteredTickablesPerTimeStamp = [];

        // get all tickables in timeframe
        var tickablesInTimeFrame = tickables[i];

        var j_len = tickablesInTimeFrame.length;

        // iterate and filter the tickables which are stored 
        // on the used staves

        for (j = 0; j < j_len; j++){

                // get all tickables in the right staves (bass or treble)
                if(tickablesInTimeFrame[j].clef === clefToUse){
                    
                    filteredTickablesPerTimeStamp.push(tickablesInTimeFrame[j]);

                }
    
        }

        filteredTickables.push(filteredTickablesPerTimeStamp);

    }

    return filteredTickables;

};

/**
* gets the datastructure for KeyModePlusAnalyzier
* the collection contains objects about the runtime
* the starttime and the note which we have to play
**/
NoteScoreDataSource.prototype._computeExpectedQueue = function(tickableList){

    // init the return value
    var expectedArray = [];

    var specialCase = [];

    var timeDistanceToPrevNote = 0;

    var minimalEventRuntimeOfTickables = 100000;

    for (var i = 0; i < tickableList.length; i++){

        // tickabels are all musicalinformations to a given timestamp
        var expectedNotesOnTimeStamp = [];

        var pausing = 0;

        // get all tickables stored eg. played to the i-th timestamp
        var tickables = tickableList[i];
 
        // get the event-run-time of the first tickable
        // for futher comparing
        if(tickables.length > 0){
            
            minimalEventRuntimeOfTickables = tickables[0].timeToRun + 1;
           
        }

        // how run through all tickables of the given "timestamp"
        for (var j = 0; j < tickables.length; j++){

            var boundedNotes = [];

            var aTickable = tickables[j];

            // find the minimal runtime
            if(aTickable.timeToRun < minimalEventRuntimeOfTickables){

                minimalEventRuntimeOfTickables = aTickable.timeToRun;

            }
            
            for(var l = 0; l < aTickable.noteKeys.length; l++){

                 var x = l + 1;
                // special the case if there is a tied note and in the second hand not tiednotes
                // for example: look at the bond theme
                if(aTickable.noteType === 'n' && (aTickable.isTied !== 'end' && aTickable.isTied!=='special')){

                    if(aTickable.isTied === 'begin'){
                        // find the bounded note currently only one level
                        // for marking false or true
                        boundedNotes = this._findBoundedNotes(i , j, tickableList);

                    }
                    
                    //detect the note Keys eg. handle voices

                    expectedNotesOnTimeStamp.push({
                        "timeDistanceToPrevNote": timeDistanceToPrevNote,
                        "timeDistanceToNextNote": aTickable.timeToRun,
                        "timeToPlay": timeDistanceToPrevNote,
                        "eventRunTime": aTickable.timeToRun,
                        "midiNoteNumber": getMIDINote(aTickable.noteKeys[l]),
                        "viewNoteType": aTickable.noteType,
                        "boundedNotes": boundedNotes,
                        "noteViewData": {
                            "xPos": aTickable.xPos,
                            "endPos": aTickable.endPos,
                            "noteViewId": aTickable.noteid + '_' + x
                        }
                    });

                }
                if(aTickable.noteType === 'r'){

                    pausing = aTickable.timeToRun;

                    pausing = 0;

                }
                if(aTickable.isTied==='special'){

                    specialCase.push(i);

                }

            }

        }

        if(expectedNotesOnTimeStamp.length > 0){

            expectedArray.push(expectedNotesOnTimeStamp);

        }
   
        timeDistanceToPrevNote = minimalEventRuntimeOfTickables + pausing;

    }

    for(var i = 1; i < expectedArray.length; i++){

        var specialCaseFound = false;

        if(specialCase.indexOf(i-1)>-1){

            specialCaseFound = true;
        }

        for(var j = 0; j < expectedArray[i].length; j++){

            if(!specialCaseFound){

                if(expectedArray[i-1][j]){

                    expectedArray[i][j].timeDistanceToPrevNote = expectedArray[i-1][j].timeDistanceToNextNote;

                }

            }

        }

    }

    return expectedArray;

};

/**
 * find all bounded notes of a note in the tickables
 * these bounded notes will be added to the expected-Data-Structure
 * for marking the bounded notes in the note view
 * @param timestampIndex
 * @param tickableIndex
 * @returns {Array}
 * @private
 */
NoteScoreDataSource.prototype._findBoundedNotes = function(timestampIndex, tickableIndex, tickableList){

    var boundedNoteStack = [];

    // look for the next element to get the id of the bounded note
    var tickables = tickableList[timestampIndex + 1];

    if(tickables[tickableIndex]){

        if(tickables[tickableIndex].isTied && (tickables[tickableIndex].isTied === 'end' || tickables[tickableIndex].isTied === 'special')){

            var noteId = tickables[tickableIndex].noteid + '_1';

            boundedNoteStack.push(noteId);

        }

    }

    return boundedNoteStack;

};

NoteScoreDataSource.prototype._recalculateWayPointEndPositions = function(waypoints){

    var root = this;

    // compute the endXPositions
    for (var i = 0; i < waypoints.length-1; i++){
    
        if(root._isLastNoteOnMeasure(i,waypoints)){
            // used by paginator in keymodeplus-mode every time
            waypoints[i].isLastNoteOnMeasure = true;
        }

        if(this._isLastMeasureOnPage(waypoints[i].measureNumber) 
            && this._isLastNoteOnMeasure(i,waypoints)){
                
                if(waypoints[i+1]){

                    waypoints[i+1].isFirstNoteOnPage = true;
                
                }
                
                waypoints[i].isLastNoteOnPage = true;
                
                waypoints[i].xEndPos = root._getPageXEnd(waypoints[i].measureNumber);        

        }
        else{
            waypoints[i].xEndPos = waypoints[i+1].xPos-1;

            if(waypoints[i].xEndPos < waypoints[i].xPos){

                waypoints[i].xEndPos = root.pageBounds[0].pageEndX;

                waypoints[i].isLastNoteOnPage = true;

            }

        }
        
    }

    // set the last xEndPos 
    var lastWayPointIndex = waypoints.length-1;

    waypoints[lastWayPointIndex].xEndPos = root.pageBounds[0].pageEndX;
    
    waypoints[lastWayPointIndex].isLastNoteOnMeasure = true;
    
    waypoints[lastWayPointIndex].isLastNoteOnPage = true;

    waypoints[lastWayPointIndex].isLastNoteOnScore = true;

    return waypoints;

};


NoteScoreDataSource.prototype._isLastMeasureOnPage = function(measureNumber){

    var root = this;

    for(var i=0; i < root.pageBounds.length; i++){

        if(root.pageBounds[i].lastMeasureNumberOnPage === measureNumber){

                return true;

        }

    }

    return false;

};

NoteScoreDataSource.prototype._getPageXEnd = function(measureNumber){

    var root = this;

    for(var i=0; i < root.pageBounds.length; i++){

        if(root.pageBounds[i].lastMeasureNumberOnPage === measureNumber){

                return root.pageBounds[i].pageEndX;

        }

    }

};

NoteScoreDataSource.prototype._isLastNoteOnMeasure = function(index,waypoints){

    var currentPosition = waypoints[index];

    if((index+1) < waypoints.length){

        //check if the nextnotemeasuer is the same
        var nextPosition = waypoints[index+1];

        if(currentPosition.measureNumber !== nextPosition.measureNumber){

            return true;

        }

    }
    else{

        return true;
    }

    return false;
};


/**
get the Bounds of a page
the Bound is defined as the XPos of the last MeasureXEND
*/
NoteScoreDataSource.prototype._getPageBounds = function(formatter){

    var pageBounds = [];

    for(var i=0; i < formatter.measuresInBlock.length; i++){

        var numberOfMeasuesInBlock = formatter.measuresInBlock[i].length;
        
        var theLastMeasureIndexInBlock = formatter.measuresInBlock[i][numberOfMeasuesInBlock-1];
        
        var measureEndPositions =  formatter.measureX[theLastMeasureIndexInBlock] + formatter.measureWidth[theLastMeasureIndexInBlock];
        
        var pageBound = {
            pageIndex: i,
            pageEndX : measureEndPositions,
            lastMeasureNumberOnPage :  theLastMeasureIndexInBlock + 1 
        };

        pageBounds.push(pageBound);

    }

    return pageBounds;

};

/**
** adds tickables to a datastructure so we dont need to access the vexflow-DataStructure
** anymore
*/
NoteScoreDataSource.prototype._addTickableToTickableDataQueue = function(tickables,measureNumber,bpm){

    var root = this;

    var tempTickables = [];

    var clonedArray = tickables;

    for(var i = 0; i < clonedArray.length; i++){

        var aTickable = clonedArray[i];

        var obj = {
            noteid: aTickable.skoovenoteid,
            xPos:  aTickable.getAbsoluteX(),
            xEndPos: 0,
            clef: aTickable.clef,
            durationBase : aTickable.getDuration(),
            duration: root._computeNoteDuration(bpm, aTickable.getDuration()),
            timeToRun: (aTickable.getIntrinsicTicks() * 60000) / (4096 * bpm),
            noteKeys: aTickable.getKeys(),
            midiNoteNumber: getMIDINote(aTickable.getKeys()),
            noteType: aTickable.noteType,
            measureNumber: measureNumber,
            isTied: aTickable.tie,
            isLastNoteOnMeasure: false,
            isLastNoteOnPage: false,
            isFirstNoteOnPage: false
        };

        tempTickables.push(obj);

    }

    return tempTickables;

};   

NoteScoreDataSource.prototype._computeNoteDuration = function(bpm, noteduration){

    //60000ms * 4

    //console.log('bpm ' + bpm);

    //console.log('bpm ' + noteduration);

    return (240000/bpm) * (1/parseInt(noteduration));

};



/**
* Delete all unused measure from VexFlow-Document
* Params:
*/
NoteScoreDataSource.prototype._deleteUnusedMeasures = function(usedMeasures){

    var root = this;

    var tempMeasures = [];

    if(usedMeasures && usedMeasures.firstMeasure && usedMeasures.lastMeasure){

        for(var i = usedMeasures.firstMeasure-1; i < usedMeasures.lastMeasure;i++){
        
            tempMeasures.push(root.vexFlowDocument.backend.measures[i]);
        
        }

     root.vexFlowDocument.backend.measures = tempMeasures;
    
    }

};

/**
 * finds the tickable with the shortest runtime in a tickableStack
 * used by building the animationdataQueue
 * returns the tickable
 * @private
 */
NoteScoreDataSource.prototype._findTickableWithShortestRuntime = function(timeStampTickables){

    var len = timeStampTickables.length;
    var shortestRunTime = 100000;
    var tickableWithShortestRunTime = null;
    var shortestRunTimeIndex = 0;
    var normalNoteIndex = -1;
    var restNoteIndex = -1;

    //console.log('min ticke');
    //console.log(timeStampTickables);

    for(var i = 0; i < len; i++){

        var tickableRuntime = timeStampTickables[i].timeToRun;


        if(timeStampTickables[i].isTied=='end' && len>1){
            // if we found a tied note
            // check if there are some notes
            // on the other measure
            //console.log('found the case');
            timeStampTickables[i].isTied = 'special';


        }


        if(timeStampTickables[i].noteType !='r'){

            normalNoteIndex = i;

        }

        if(timeStampTickables[i].noteType =='r'){

            restNoteIndex = i;

        }

        if(shortestRunTime > tickableRuntime){

            shortestRunTimeIndex = i;

            tickableWithShortestRunTime = timeStampTickables[i];

            shortestRunTime = tickableRuntime;

        }

    }

    var theTickable = JSON.parse(JSON.stringify(tickableWithShortestRunTime));

    if(restNoteIndex >- 1 && normalNoteIndex >- 1){

        theTickable = JSON.parse(JSON.stringify(timeStampTickables[normalNoteIndex]));

        theTickable.timeToRun = shortestRunTime;

    }

    return theTickable;

};

/**
 * finds the tickable with the shortest runtime in a tickableStack
 * used by building the animationdataQueue
 * returns the tickable
 * @private
 */
NoteScoreDataSource.prototype._findTickableWithShortestRuntimeBothHand = function(timeStampTickables,allTickables,index){

    var len = timeStampTickables.length;
    var shortestRunTime = 100000;
    var tickableWithShortestRunTime = null;
    var shortestRunTimeIndex = 0;
    var normalNoteIndex = -1;
    var restNoteIndex = -1;

    for(var i = 0; i < len; i++){

        var tickableRuntime = timeStampTickables[i].timeToRun;

        if(timeStampTickables[i].isTied=='end' && len>1){
            // if we found a tied note check if there
            // are some notes on the other measure
            // timeStampTickables[i].isTied = 'special';

        }

        if(timeStampTickables[i].noteType=='r' && len>1){
            // if we found a tied note
            // check if there are some notes
            // on the other measure

            timeStampTickables[i].overlappingRest = 'overlappingRest';

        }


        if(timeStampTickables[i].noteType !='r'){

            normalNoteIndex = i;

        }

        if(timeStampTickables[i].noteType =='r'){

            restNoteIndex = i;

        }

        if(shortestRunTime > tickableRuntime){

            shortestRunTimeIndex = i;

            tickableWithShortestRunTime = timeStampTickables[i];

            shortestRunTime = tickableRuntime;

        }

    }

    var theTickable = JSON.parse(JSON.stringify(tickableWithShortestRunTime));

    if(restNoteIndex >- 1 && normalNoteIndex >- 1){

        theTickable = JSON.parse(JSON.stringify(timeStampTickables[normalNoteIndex]));

        theTickable.timeToRun = shortestRunTime;

    }

    return theTickable;

};



NoteScoreDataSource.prototype._getUsedClef = function(usedHand){

    var usedClef = 'both';

    switch(usedHand) {
        case 'r':
            return 'treble';
            break;
        case 'l':
            return 'bass';
            break;
        case 'b':
            return 'both';
            break;
    } 

};

var byProperty = function(prop) {

    return function(a , b) {
        if (typeof a[prop] == "number") {

            return (a[prop] - b[prop]);
        
        } 
        else 
        {
        
            return ((a[prop] < b[prop]) ? -1 : ((a[prop] > b[prop]) ? 1 : 0));
        
        }
    };

};

/**
 *
 var paginationConfig = {
            numberOfStavesPerPage: root.numberOfStavesPerPage,
            bpm: root.bpm,
            noteviewbpm: root.noteviewbpm,
            xmlStream: plainXMLData,
            usedHands: root.hand,
            notescoreContainerId : 'notecontainer',
            usedHands: root.hand,
            usedMeasures : usedMeasuresConfig
        };

 the id of a musical information to connect
 * @param config
 * @constructor
 */
var NoteScoreDataSourcePlayAlong = function(config){

    // read the config
    this.xmlStream = config.xmlStream;

    // beats per minute
    this.bpm = config.bpm;

    // a hack @TODO: CHECK WHY AND WHERE IS THIS USED
    this.noteviewbpm = config.noteviewbpm;

    if(this.noteviewbpm>this.bpm ){
        this.bpm = this.noteviewbpm;
    }

    // measure to display
    this.usedMeasures = config.usedMeasures;

    // which hand has to display
    this.hand = config.usedHands;

    // the number of Staves that should be rendered on the score
    this.numberOfStavesPerPage = parseInt(config.numberOfStavesPerPage);

    // id of the container
    this.notescoreContainerId = config.notescoreContainerId;

    // @todo try to inject the Vex.Flow.Document 
    this.vexFlowDocument = new Vex.Flow.Document(this.xmlStream);

    this.wholeruntime = 0;

    // contains all informations about the score data
    // in a way we can handle nice
    this.tickableDataQueue = [];

    // contains all informations about waypoints
    // used by the slider
    this.wayPointPositions = [];

    // contains all tickables wich are stored on the
    // used stave need for expected
    this.tickablesInUsedClef = [];

    this.tickablesInMeasure = [];

    this.pageBounds = [];

    this.usedClef = this._getUsedClef(this.hand);

    return this;

};

/**
 * returns the Queue of expected Events thats should be played
 * by a user to a specific time
 * used by: -Analyzier
 */
NoteScoreDataSourcePlayAlong.prototype.getExpectedQueue = function(){

    return this.expectedPitches;

};

/**
 * returns an array of waypoints for the noteviewslider
 * used by: waypoint slider
 **/
NoteScoreDataSourcePlayAlong.prototype.getWayPoints = function(){

    return this.wayPoints;

};

/**
 * get the data for the sequence video player
 **/
NoteScoreDataSourcePlayAlong.prototype.getSequenceStack = function(){

    return this.sequenceStack;

};

/**
 * returns an array of waypoints for the noteviewslider
 * used by: waypoint slider
 **/
NoteScoreDataSourcePlayAlong.prototype.getPagingTimes = function(){

    return this.wayPoints;

};

/**
 * returns an array of tickables
 * @todo: check where this is used
 **/
NoteScoreDataSourcePlayAlong.prototype.getTickables = function(){

    return this.orderedTickables;

};

/**
 * returns the whole runtime og the song in milliseconds
 * @todo: check where this is used
 **/
NoteScoreDataSourcePlayAlong.prototype.getWholeRuntime = function(){

    return this.wholeruntime;

};

/**
 * initialize the NoteScoreDataSourcePlayAlong
 * reference
 */
NoteScoreDataSourcePlayAlong.prototype.init = function(){

    var root = this;

    root._renderTheNoteSource();

    return root;

};

/**
 * Normalizes the vexflow-Data
 */
NoteScoreDataSourcePlayAlong.prototype._renderTheNoteSource = function(){

    var root = this;

    // @todo Error handling if element could not be found
    this.container = document.getElementById(root.notescoreContainerId);

    // get the width of the pagescoreviewport
    this.pageScoreWidth = this.container.offsetWidth;

    // delete all unused measures 
    // these method deletes unused Measure 
    // from of the vexflow-backend so it will
    // not be rendered
    this._deleteUnusedMeasures(this.usedMeasures);

    if(this.numberOfStavesPerPage){

        window.staveMinWidth = this.pageScoreWidth / parseInt(this.numberOfStavesPerPage);

    }
    else{

        window.staveMinWidth = 50;

    }

    this.formatter = this.vexFlowDocument.getFormatter();

    // set the width and draw the notescore
    this.formatter.setWidth(this.pageScoreWidth);

    // draw the notescore
    this.formatter.draw(this.container);

    // fetch the number of pages
    this.numberOfPages = this.formatter.blockDimensions.length;

    // get the bounds of each page
    this.pageBounds = this._getPageBounds(this.formatter);

    var tickablesPerMeasure = this._getTickablesPerMeasure(this.formatter);

    // result of the method is a datastructure that contains all the data
    // we need for the frontend (there is no garanty that the xml parser provides
    // the note-data in the right ordering futhermore we don't need the whole vexflow
    // datastructure so it can be nulled after these preprocessing)
    var sortedTickables = this._getOrderedAndNormalizedTickables(tickablesPerMeasure);

    // console.log('sortedTickables');
    // console.log(sortedTickables);

    this.wayPoints = this._getTheWayPoints(root.usedClef,sortedTickables);

    // console.log('waypoints');
    // console.log(this.wayPoints);

    this.sequenceStack = this._getSequenceStack( this.wayPoints);

    // console.log('sequenceStack');
    // console.log(this.sequenceStack);

    var filteredTickables = [];

    if(root.usedClef!=='both'){

        filteredTickables = this._getFilteredTickablesByClef(root.usedClef,sortedTickables);

    }
    else{

        filteredTickables = sortedTickables;

    }

    this.expectedPitches = this._computeExpectedQueue(filteredTickables);

    // console.log('expected Pitches');

    // console.log(this.expectedPitches);

    this.orderedTickables = filteredTickables;

    this.pagingTimes = this._getPagingTimes(this.formatter);

    this.numberOfPages = this.formatter.measuresInBlock.length;

    this.formatter = null;

};

/**
 * creates the stack for the videosequences
 **/
NoteScoreDataSourcePlayAlong.prototype._getSequenceStack = function(waypoints){

    var sequenceStack = [];

    var startRestNoteTime = 0;

    var i = 0;

    // sum the runtime of all restnotes at the beginning
    while(waypoints[i].noteType === 'r'){

        startRestNoteTime += waypoints[i].timeToRun;
        i = i + 1;

    }

    var aSequencePoint = waypoints[i];

    aSequencePoint.timeToPrevNote = startRestNoteTime;

    sequenceStack.push(aSequencePoint);

    for(var j=i+1; j < waypoints.length; j++){

        var aSequencePoint = waypoints[j];

        aSequencePoint.timeToPrevNote =  waypoints[j-1].timeToRun;

        sequenceStack.push(aSequencePoint);

    }

    return sequenceStack;

};



NoteScoreDataSourcePlayAlong.prototype._getPagingTimes = function(formatter){

    var root = this;

    var wholeruntime = 0;

    for (var i=0; i < this.wayPoints.length; i++){

        wholeruntime += this.wayPoints[i].timeToRun;

    }

    // get Runtime per measure
    var runtimePerMeasure = wholeruntime / formatter.document.measures.length;

    var pageTimes = [];

    for(var i=0; i < formatter.measuresInBlock.length; i++){

        var measuresPerPage = formatter.measuresInBlock[i].length;

        var runTimePerPage = (runtimePerMeasure * measuresPerPage);

        pageTimes.push(
            {'runTimePerPage':runTimePerPage,
                'runTimePerMeasure': runtimePerMeasure}
        );

    }

    root.wholeruntime = wholeruntime;

    return pageTimes;

};

/**
 *
 */
NoteScoreDataSourcePlayAlong.prototype._getOrderedAndNormalizedTickables = function(tickablesPerMeasure){

    var sortedTickables = [];

    // sort the tickables which are assigned to the 
    // measures 
    // reason why doing that: the vexflow-Parser-Output
    // couldn't give a garanty that the ticks and note
    // informations are in the right order
    for(var i=0; i < tickablesPerMeasure.length; i++ ){

        if(tickablesPerMeasure[i]){

            tickablesPerMeasure[i].sort(byProperty('sortIndex'));

        }

    }

    //... after ordering each note inside the measures

    // grabbing the tickable and note infos in 
    // a one-dimensional array
    for (var i = 0; i < tickablesPerMeasure.length; i++){

        if(tickablesPerMeasure[i]){

            for(var j = 0; j < tickablesPerMeasure[i].length; j++){

                sortedTickables.push(tickablesPerMeasure[i][j].tickables);

            }
        }

    }

    return sortedTickables;

};

/**
 *
 */
NoteScoreDataSourcePlayAlong.prototype._getTickablesPerMeasure = function(docformatter){

    var root = this;

    var measureContent = docformatter.measureContent;

    var startMeasure = 0;

    var endMeasure = measureContent.length;

    var i = 0;

    var tickablesPerMeasure = [];

    // iterate over each measure in vexflow-Datastructure
    // to process all data we need 
    for(i = startMeasure; i < endMeasure; i++){

        // get the array that stores all tickable information
        // inside a specific measure
        // tContexts contains informations about
        // the tickables for a measure all musical informations
        // played to the same time 

        // vexflow-Datastructure
        // measurecontent[i].tcontexts.array[k].lenght -> number of elements in array is the number
        // number of elements that will be displayed in rendered Score at timeframe k

        // measurecontent[i].tcontexts.array[k].tickables -> the tickables that are
        // displayed at the same time

        var allTickablesInMeasure = measureContent[i].tContexts.array;

        // get the lenght of the array
        var numberOfTickablesInMeasure = allTickablesInMeasure.length;

        // accessing the VexFlowDataStructure and process
        // the tContexts-Member which stores the infos we need
        var measureNumber = i + 1;

        // get All-Tickables
        var j = 0;

        for(j = 0; j < numberOfTickablesInMeasure; j++){

            // get the Tickables that on the same timeframe
            // get all Tickables -> all Elements which
            // have a time-indicator like notes and pauses
            // tickables are all types of musical-informations
            // played on a give tick e.g. time

            // array contains all musicalinfo that 
            // played at the same time

            // iterate and filter the tickables which are stored 
            // on the used staves
            var tickablesInTimeFrame = allTickablesInMeasure[j].tickables;

            // get the data from the vexflow-formatter we need
            var normalizedTickables = root._addTickableToTickableDataQueue(tickablesInTimeFrame, measureNumber, root.bpm);

            var sortIndex = normalizedTickables[0].xPos;

            var obj = {
                sortIndex: sortIndex,
                tickables: normalizedTickables
            };

            if(!tickablesPerMeasure[measureNumber]){

                tickablesPerMeasure[measureNumber] = [];

            }

            tickablesPerMeasure[measureNumber].push(obj);

        }

    }

    return tickablesPerMeasure;

};

/**
 * waypoints are all notes in the source:
 * we have to filter all tickables which represents rest-notes
 * two cases: one hand - delete the restnote and set the xEnd of the prev note to
 **/

NoteScoreDataSourcePlayAlong.prototype._getTheWayPoints = function(usedClef, tickables){

    if(usedClef==='both'){

        return this._getTheWayPointsForOneHand('treble', tickables);

        //return this._getTheWayPointsForBothHands(tickables);

    }
    else{

        return this._getTheWayPointsForOneHand(usedClef, tickables);

    }

};

/*
 * computes the waypoints for both hands
 */
NoteScoreDataSourcePlayAlong.prototype._getTheWayPointsForBothHands = function(tickables){

    var tempWayPoints = [];

    var wayPointPositions = [];

    var i = 0;

    var len = tickables.length;

    var tempTickablesInUsedClef = [];

    for(i = 0; i < len; i++){

        // get all tickables in timeframe
        var tickablesInTimeFrame = tickables[i];

        // special cases two note ... all with the same run time
        // one of these notes has a restnote as follower
        var tempTickable = this._findTickableWithShortestRuntime(tickablesInTimeFrame);

        tempTickablesInUsedClef.push(tickablesInTimeFrame);

        tempWayPoints.push(tempTickable);

    }

    console.log('tempWayPoints');
    console.log(tempWayPoints);


    // ignore restnotes and tiednotes
    var firstNoteFound = false;

    var lastNoteIndex = -1;

    for (var i = 0; i < tempWayPoints.length; i++){

        // if the r note is the first note
        if(tempWayPoints[i].noteType === 'r' && !firstNoteFound){

            wayPointPositions.push(tempWayPoints[i]);

            lastNoteIndex += 1;

            firstNoteFound = true;

        }

        else if(tempWayPoints[i].noteType === 'r' && firstNoteFound){

            wayPointPositions[lastNoteIndex].timeToRun += tempWayPoints[i].timeToRun;

        }

        else if(tempWayPoints[i].noteType === 'n' && tempWayPoints[i].isTied && tempWayPoints[i].isTied==='end' ){

            wayPointPositions[lastNoteIndex].timeToRun += tempWayPoints[i].timeToRun;

        }

        else if(tempWayPoints[i].noteType === 'n'){

            firstNoteFound = true;

            wayPointPositions.push(tempWayPoints[i]);

            lastNoteIndex += 1;

        }

    }

    var recalculatedPositions = this._recalculateWayPointEndPositions(wayPointPositions);

    return recalculatedPositions;

};


/**
 * get the waypoints for one hand
 **/
NoteScoreDataSourcePlayAlong.prototype._getTheWayPointsForOneHand = function(clefToUse, tickables){

    var tempWayPoints = [];

    var wayPointPositions = [];

    var tempTickablesInUsedClef = [];

    var i = 0;

    var j = 0;

    var len = tickables.length;

    for(i = 0; i < len; i++){

        // get all tickables in timeframe
        var tickablesInTimeFrame = tickables[i];

        var j_len = tickablesInTimeFrame.length;

        // iterate and filter the tickables which are stored 
        // on the used staves

        var tempTickablesInUsedClefHelper = [];

        for (j = 0; j < j_len; j++){

            // get all tickables in the right staves (bass or treble)
            if(tickablesInTimeFrame[j].clef === clefToUse){

                tempWayPoints.push(tickablesInTimeFrame[j]);

                tempTickablesInUsedClefHelper.push(tickablesInTimeFrame[j]);

            }

        }

        tempTickablesInUsedClef.push(tempTickablesInUsedClefHelper);

    }

    // ignore restnotes and tiednotes
    var firstNoteFound = false;

    var lastNoteIndex = -1;

    for (var i = 0; i < tempWayPoints.length; i++){

        if(tempWayPoints[i].noteType === 'r' && !firstNoteFound){

            wayPointPositions.push(tempWayPoints[i]);

            lastNoteIndex += 1;

            firstNoteFound = true;

        }

        else if(tempWayPoints[i].noteType === 'r' && firstNoteFound){

            wayPointPositions[lastNoteIndex].timeToRun += tempWayPoints[i].timeToRun;

        }

        else if(tempWayPoints[i].noteType === 'n' && tempWayPoints[i].isTied && tempWayPoints[i].isTied==='end' ){

            wayPointPositions[lastNoteIndex].timeToRun += tempWayPoints[i].timeToRun;

        }

        else if(tempWayPoints[i].noteType === 'n'){

            firstNoteFound = true;

            wayPointPositions.push(tempWayPoints[i]);

            lastNoteIndex += 1;

        }

    }

    var recalculatedPositions = this._recalculateWayPointEndPositions(wayPointPositions);

    return recalculatedPositions;

};

/**
 * get the waypoints for one hand
 **/
NoteScoreDataSourcePlayAlong.prototype._getFilteredTickablesByClef = function(clefToUse, tickables){

    var filteredTickables = [];

    var len = tickables.length;

    for(i = 0; i < len; i++){

        var filteredTickablesPerTimeStamp = [];

        // get all tickables in timeframe
        var tickablesInTimeFrame = tickables[i];

        var j_len = tickablesInTimeFrame.length;

        // iterate and filter the tickables which are stored 
        // on the used staves

        for (j = 0; j < j_len; j++){

            // get all tickables in the right staves (bass or treble)
            if(tickablesInTimeFrame[j].clef === clefToUse){

                filteredTickablesPerTimeStamp.push(tickablesInTimeFrame[j]);

            }

        }

        filteredTickables.push(filteredTickablesPerTimeStamp);

    }

    return filteredTickables;

};

/**
 * gets the datastructure for KeyModePlusAnalyzier
 * the collection contains objects about the runtime
 * the starttime and the note which we have to play
 **/
NoteScoreDataSourcePlayAlong.prototype._computeExpectedQueue = function(tickableList){

    // init the return value
    var expectedArray = [];

    var tempTimeToRun = 100000;

    var timeDistanceToPrevNote = 0;

    var minimalEventRuntimeOfTickables = 100000;

    for (var i = 0; i < tickableList.length; i++){

        // tickabels are all musicalinformations to a given timestamp
        var expectedNotesOnTimeStamp = [];

        var pausing = 0;

        // get all tickables stored eg. played to the i-th timestamp
        var tickables = tickableList[i];

        // get the event-run-time of the first tickable
        // for futher comparing
        if(tickables.length > 0){

            minimalEventRuntimeOfTickables = tickables[0].timeToRun + 1;

        }

        // how run through all tickables of the given "timestamp"
        for (var j = 0; j < tickables.length; j++){

            var boundedNotes = [];

            var aTickable = tickables[j];

            // find the minimal runtime
            if(aTickable.timeToRun < minimalEventRuntimeOfTickables){

                minimalEventRuntimeOfTickables = aTickable.timeToRun;

            }

            for(var l = 0; l < aTickable.noteKeys.length; l++){

                var x = l + 1;

                if(aTickable.noteType === 'n' && (aTickable.isTied !== 'end' && aTickable.isTied!=='special')){

                    if(aTickable.isTied === 'begin'){
                        // find the bounded note currently only one level
                        // for marking false or true
                        boundedNotes = this._findBoundedNotes(i , j, tickableList);

                    }

                    //detect the note Keys eg. handle voices

                    expectedNotesOnTimeStamp.push({
                        "timeDistanceToPrevNote": timeDistanceToPrevNote,
                        "timeDistanceToNextNote": aTickable.timeToRun,
                        "timeToPlay": timeDistanceToPrevNote,
                        "eventRunTime": aTickable.timeToRun,
                        "midiNoteNumber": getMIDINote(aTickable.noteKeys[l]),
                        "viewNoteType": aTickable.noteType,
                        "boundedNotes": boundedNotes,
                        "noteViewData": {
                            "xPos": aTickable.xPos,
                            "endPos": aTickable.endPos,
                            "noteViewId": aTickable.noteid + '_' + x
                        }
                    });

                }
                if(aTickable.noteType === 'r'){

                    pausing = aTickable.timeToRun;
                    pausing = 0;

                }

            }
        }

        if(expectedNotesOnTimeStamp.length > 0){
            expectedArray.push(expectedNotesOnTimeStamp);
        }

        timeDistanceToPrevNote = minimalEventRuntimeOfTickables + pausing;

    }


    for(var i = 1; i < expectedArray.length; i++){

        for(var j = 0; j < expectedArray[i].length; j++){

            if(expectedArray[i-1][j]){
                expectedArray[i][j].timeDistanceToPrevNote = expectedArray[i-1][j].timeDistanceToNextNote;
            }

        }

    }

    return expectedArray;

};

/**
 * find all bounded notes of a note in the tickables
 * these bounded notes will be added to the expected-Data-Structure
 * for marking the bounded notes in the note view
 * @param timestampIndex
 * @param tickableIndex
 * @returns {Array}
 * @private
 */
NoteScoreDataSourcePlayAlong.prototype._findBoundedNotes = function(timestampIndex, tickableIndex, tickableList){

    var boundedNoteStack = [];

    // look for the next element to get the id of the bounded note
    var tickables = tickableList[timestampIndex + 1];

    if(tickables[tickableIndex]){

        if(tickables[tickableIndex].isTied && (tickables[tickableIndex].isTied === 'end' || tickables[tickableIndex].isTied === 'special')){

            var noteId = tickables[tickableIndex].noteid + '_1';

            boundedNoteStack.push(noteId);

        }

    }

    return boundedNoteStack;

};

NoteScoreDataSourcePlayAlong.prototype._recalculateWayPointEndPositions = function(waypoints){

    var root = this;

    // compute the endXPositions
    for (var i = 0; i < waypoints.length-1; i++){

        if(root._isLastNoteOnMeasure(i,waypoints)){
            // used by paginator in keymodeplus-mode every time
            waypoints[i].isLastNoteOnMeasure = true;
        }

        if(this._isLastMeasureOnPage(waypoints[i].measureNumber)
            && this._isLastNoteOnMeasure(i,waypoints)){

            if(waypoints[i+1]){

                waypoints[i+1].isFirstNoteOnPage = true;

            }

            waypoints[i].isLastNoteOnPage = true;

            waypoints[i].xEndPos = root._getPageXEnd(waypoints[i].measureNumber);

        }
        else{
            waypoints[i].xEndPos = waypoints[i+1].xPos-1;

            if(waypoints[i].xEndPos < waypoints[i].xPos){

                waypoints[i].xEndPos = root.pageBounds[0].pageEndX;

                waypoints[i].isLastNoteOnPage = true;

            }

        }

    }

    // set the last xEndPos 
    var lastWayPointIndex = waypoints.length-1;

    waypoints[lastWayPointIndex].xEndPos = root.pageBounds[0].pageEndX;

    waypoints[lastWayPointIndex].isLastNoteOnMeasure = true;

    waypoints[lastWayPointIndex].isLastNoteOnPage = true;

    waypoints[lastWayPointIndex].isLastNoteOnScore = true;

    return waypoints;

};


NoteScoreDataSourcePlayAlong.prototype._isLastMeasureOnPage = function(measureNumber){

    var root = this;

    for(var i=0; i < root.pageBounds.length; i++){

        if(root.pageBounds[i].lastMeasureNumberOnPage === measureNumber){

            return true;

        }

    }

    return false;

};

NoteScoreDataSourcePlayAlong.prototype._getPageXEnd = function(measureNumber){

    var root = this;

    for(var i=0; i < root.pageBounds.length; i++){

        if(root.pageBounds[i].lastMeasureNumberOnPage === measureNumber){

            return root.pageBounds[i].pageEndX;

        }

    }

};

NoteScoreDataSourcePlayAlong.prototype._isLastNoteOnMeasure = function(index,waypoints){

    var currentPosition = waypoints[index];

    if((index+1) < waypoints.length){

        //check if the nextnotemeasuer is the same
        var nextPosition = waypoints[index+1];

        if(currentPosition.measureNumber !== nextPosition.measureNumber){

            return true;

        }

    }
    else{

        return true;
    }

    return false;
};


/**
 get the Bounds of a page
 the Bound is defined as the XPos of the last MeasureXEND
 */
NoteScoreDataSourcePlayAlong.prototype._getPageBounds = function(formatter){

    var pageBounds = [];

    for(var i=0; i < formatter.measuresInBlock.length; i++){

        var numberOfMeasuesInBlock = formatter.measuresInBlock[i].length;

        var theLastMeasureIndexInBlock = formatter.measuresInBlock[i][numberOfMeasuesInBlock-1];

        var measureEndPositions =  formatter.measureX[theLastMeasureIndexInBlock] + formatter.measureWidth[theLastMeasureIndexInBlock];

        var pageBound = {
            pageIndex: i,
            pageEndX : measureEndPositions,
            lastMeasureNumberOnPage :  theLastMeasureIndexInBlock + 1
        };

        pageBounds.push(pageBound);

    }

    return pageBounds;

};

/**
 ** adds tickables to a datastructure so we dont need to access the vexflow-DataStructure
 ** anymore
 */
NoteScoreDataSourcePlayAlong.prototype._addTickableToTickableDataQueue = function(tickables,measureNumber,bpm){

    var root = this;

    var tempTickables = [];

    var clonedArray = tickables;

    for(var i = 0; i < clonedArray.length; i++){

        var aTickable = clonedArray[i];

        var obj = {
            noteid: aTickable.skoovenoteid,
            xPos:  aTickable.getAbsoluteX(),
            xEndPos: 0,
            clef: aTickable.clef,
            timeToRun: (aTickable.getIntrinsicTicks() * 60000) / (4096 * bpm),
            noteKeys: aTickable.getKeys(),
            midiNoteNumber: getMIDINote(aTickable.getKeys()),
            noteType: aTickable.noteType,
            measureNumber: measureNumber,
            isTied: aTickable.tie,
            isLastNoteOnMeasure: false,
            isLastNoteOnPage: false,
            isFirstNoteOnPage: false
        };

        tempTickables.push(obj);

    }

    return tempTickables;

};

/**
 * Delete all unused measure from VexFlow-Document
 * Params:
 */
NoteScoreDataSourcePlayAlong.prototype._deleteUnusedMeasures = function(usedMeasures){

    var root = this;

    var tempMeasures = [];

    if(usedMeasures && usedMeasures.firstMeasure && usedMeasures.lastMeasure){

        for(var i = usedMeasures.firstMeasure-1; i < usedMeasures.lastMeasure;i++){

            tempMeasures.push(root.vexFlowDocument.backend.measures[i]);

        }

        root.vexFlowDocument.backend.measures = tempMeasures;

    }

};

/**
 * finds the tickable with the shortest runtime in a tickableStack
 * used by building the animationdataQueue
 * returns the tickable
 * @private
 */
NoteScoreDataSourcePlayAlong.prototype._findTickableWithShortestRuntime = function(timeStampTickables){

    var len = timeStampTickables.length;
    var shortestRunTime = 100000;
    var tickableWithShortestRunTime = null;
    var shortestRunTimeIndex = 0;
    var normalNoteIndex = -1;
    var restNoteIndex = -1;

    console.log('min ticke');
    console.log(timeStampTickables);

    for(var i = 0; i < len; i++){

        var tickableRuntime = timeStampTickables[i].timeToRun;


        if(timeStampTickables[i].isTied=='end' && len>1){
            // if we found a tied note
            // check if there are some notes
            // on the other measure
            console.log('found the case');
            timeStampTickables[i].isTied = 'special';


        }


        if(timeStampTickables[i].noteType !='r'){

            normalNoteIndex = i;

        }

        if(timeStampTickables[i].noteType =='r'){

            restNoteIndex = i;

        }

        if(shortestRunTime > tickableRuntime){

            shortestRunTimeIndex = i;

            tickableWithShortestRunTime = timeStampTickables[i];

            shortestRunTime = tickableRuntime;

        }

    }

    var theTickable = JSON.parse(JSON.stringify(tickableWithShortestRunTime));

    if(restNoteIndex >- 1 && normalNoteIndex >- 1){

        theTickable = JSON.parse(JSON.stringify(timeStampTickables[normalNoteIndex]));

        theTickable.timeToRun = shortestRunTime;

    }

    return theTickable;

};


NoteScoreDataSourcePlayAlong.prototype._getUsedClef = function(usedHand){

    var usedClef = 'both';

    switch(usedHand) {
        case 'r':
            return 'treble';
            break;
        case 'l':
            return 'bass';
            break;
        case 'b':
            return 'both';
            break;
    }

};

var byProperty = function(prop) {

    return function(a , b) {
        if (typeof a[prop] == "number") {

            return (a[prop] - b[prop]);

        }
        else
        {

            return ((a[prop] < b[prop]) ? -1 : ((a[prop] > b[prop]) ? 1 : 0));

        }
    };

};
